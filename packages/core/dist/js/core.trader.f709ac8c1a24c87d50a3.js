/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self['webpackChunk'] = self['webpackChunk'] || []).push([
    ['trader'],
    {
        /***/ '../../trader/dist/trader/js/trader.js':
            /*!*********************************************!*\
  !*** ../../trader/dist/trader/js/trader.js ***!
  \*********************************************/
            /***/ (module, __unused_webpack_exports, __webpack_require__) => {
                eval(
                    '/*\n * ATTENTION: An "eval-source-map" devtool has been used.\n * This devtool is neither made for production nor for readable output files.\n * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.\n * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)\n * or disable the default devtool with "devtool: false".\n * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).\n */\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(true)\n\t\tmodule.exports = factory(__webpack_require__(/*! @deriv-com/analytics */ "../../../node_modules/@deriv-com/analytics/lib/index.js"), __webpack_require__(/*! @deriv/components */ "../../components/src/index.ts"), __webpack_require__(/*! @deriv/deriv-charts */ "../../../node_modules/@deriv/deriv-charts/dist/smartcharts.js"), __webpack_require__(/*! @deriv/shared */ "../../shared/src/index.ts"), __webpack_require__(/*! @deriv/shared/src/utils/platform/platform */ "../../shared/src/utils/platform/platform.ts"), __webpack_require__(/*! @deriv/translations */ "../../translations/src/index.js"), __webpack_require__(/*! mobx */ "../../../node_modules/mobx/dist/mobx.esm.js"), __webpack_require__(/*! mobx-react */ "../../../node_modules/mobx-react/dist/mobxreact.esm.js"), __webpack_require__(/*! react */ "../../../node_modules/react/index.js"), __webpack_require__(/*! react-dom */ "../../../node_modules/react-dom/index.js"), __webpack_require__(/*! react-router */ "../../../node_modules/react-router/esm/react-router.js"), __webpack_require__(/*! react-router-dom */ "../../../node_modules/react-router-dom/esm/react-router-dom.js"));\n\telse {}\n})(self, (__WEBPACK_EXTERNAL_MODULE__deriv_com_analytics__, __WEBPACK_EXTERNAL_MODULE__deriv_components__, __WEBPACK_EXTERNAL_MODULE__deriv_deriv_charts__, __WEBPACK_EXTERNAL_MODULE__deriv_shared__, __WEBPACK_EXTERNAL_MODULE__deriv_shared_src_utils_platform_platform__, __WEBPACK_EXTERNAL_MODULE__deriv_translations__, __WEBPACK_EXTERNAL_MODULE_mobx__, __WEBPACK_EXTERNAL_MODULE_mobx_react__, __WEBPACK_EXTERNAL_MODULE_react__, __WEBPACK_EXTERNAL_MODULE_react_dom__, __WEBPACK_EXTERNAL_MODULE_react_router__, __WEBPACK_EXTERNAL_MODULE_react_router_dom__) => {\nreturn /******/ (() => { // webpackBootstrap\n/******/ \t"use strict";\n/******/ \tvar __webpack_modules__ = ({\n\n/***/ "../api/src/hooks/useRemoteConfig.ts":\n/*!*******************************************!*\\\n  !*** ../api/src/hooks/useRemoteConfig.ts ***!\n  \\*******************************************/\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n\neval("__webpack_require__.r(__webpack_exports__);\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\n/* harmony export */   \\"default\\": () => (__WEBPACK_DEFAULT_EXPORT__)\\n/* harmony export */ });\\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \\"react\\");\\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\\n/* harmony import */ var _deriv_com_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @deriv-com/utils */ \\"../../node_modules/@deriv-com/utils/dist/deriv-utils.js\\");\\n/* harmony import */ var _remote_config_json__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../remote_config.json */ \\"../api/src/remote_config.json\\");\\nfunction _typeof(o) { \\"@babel/helpers - typeof\\"; return _typeof = \\"function\\" == typeof Symbol && \\"symbol\\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \\"function\\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \\"symbol\\" : typeof o; }, _typeof(o); }\\nfunction _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }\\nfunction _nonIterableRest() { throw new TypeError(\\"Invalid attempt to destructure non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\\"); }\\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\\"string\\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \\"Object\\" === t && r.constructor && (t = r.constructor.name), \\"Map\\" === t || \\"Set\\" === t ? Array.from(r) : \\"Arguments\\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \\"undefined\\" != typeof Symbol && r[Symbol.iterator] || r[\\"@@iterator\\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t[\\"return\\"] && (u = t[\\"return\\"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\\nfunction _arrayWithHoles(r) { if (Array.isArray(r)) return r; }\\nfunction _regeneratorRuntime() { \\"use strict\\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \\"function\\" == typeof Symbol ? Symbol : {}, a = i.iterator || \\"@@iterator\\", c = i.asyncIterator || \\"@@asyncIterator\\", u = i.toStringTag || \\"@@toStringTag\\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \\"\\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \\"_invoke\\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \\"normal\\", arg: t.call(e, r) }; } catch (t) { return { type: \\"throw\\", arg: t }; } } e.wrap = wrap; var h = \\"suspendedStart\\", l = \\"suspendedYield\\", f = \\"executing\\", s = \\"completed\\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\\"next\\", \\"throw\\", \\"return\\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\\"throw\\" !== c.type) { var u = c.arg, h = u.value; return h && \\"object\\" == _typeof(h) && n.call(h, \\"__await\\") ? e.resolve(h.__await).then(function (t) { invoke(\\"next\\", t, i, a); }, function (t) { invoke(\\"throw\\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\\"throw\\", t, i, a); }); } a(c.arg); } var r; o(this, \\"_invoke\\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error(\\"Generator is already running\\"); if (o === s) { if (\\"throw\\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\\"next\\" === n.method) n.sent = n._sent = n.arg;else if (\\"throw\\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \\"return\\" === n.method && n.abrupt(\\"return\\", n.arg); o = f; var p = tryCatch(e, r, n); if (\\"normal\\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \\"throw\\" === p.type && (o = s, n.method = \\"throw\\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \\"throw\\" === n && e.iterator[\\"return\\"] && (r.method = \\"return\\", r.arg = t, maybeInvokeDelegate(e, r), \\"throw\\" === r.method) || \\"return\\" !== n && (r.method = \\"throw\\", r.arg = new TypeError(\\"The iterator does not provide a \'\\" + n + \\"\' method\\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\\"throw\\" === i.type) return r.method = \\"throw\\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \\"return\\" !== r.method && (r.method = \\"next\\", r.arg = t), r.delegate = null, y) : a : (r.method = \\"throw\\", r.arg = new TypeError(\\"iterator result is not an object\\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \\"normal\\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \\"root\\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \\"\\" === e) { var r = e[a]; if (r) return r.call(e); if (\\"function\\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + \\" is not iterable\\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \\"constructor\\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \\"constructor\\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \\"GeneratorFunction\\"), e.isGeneratorFunction = function (t) { var e = \\"function\\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \\"GeneratorFunction\\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \\"GeneratorFunction\\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \\"Generator\\"), define(g, a, function () { return this; }), define(g, \\"toString\\", function () { return \\"[object Generator]\\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \\"next\\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \\"t\\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\\"throw\\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \\"throw\\", a.arg = e, r.next = n, o && (r.method = \\"next\\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\\"root\\" === i.tryLoc) return handle(\\"end\\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \\"catchLoc\\"), u = n.call(i, \\"finallyLoc\\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error(\\"try statement without catch or finally\\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \\"finallyLoc\\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\\"break\\" === t || \\"continue\\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \\"next\\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\\"throw\\" === t.type) throw t.arg; return \\"break\\" === t.type || \\"continue\\" === t.type ? this.next = t.arg : \\"return\\" === t.type ? (this.rval = this.arg = t.arg, this.method = \\"return\\", this.next = \\"end\\") : \\"normal\\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, \\"catch\\": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\\"throw\\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error(\\"illegal catch attempt\\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \\"next\\" === this.method && (this.arg = t), y; } }, e; }\\nfunction asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\\nfunction _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, \\"next\\", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, \\"throw\\", n); } _next(void 0); }); }; }\\n\\n\\n\\nvar remoteConfigQuery = /*#__PURE__*/function () {\\n  var _ref = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\\n    var isProductionOrStaging, REMOTE_CONFIG_URL, response;\\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\\n      while (1) switch (_context.prev = _context.next) {\\n        case 0:\\n          isProductionOrStaging =  false || \\"development\\" === \'staging\';\\n          REMOTE_CONFIG_URL = process.env.REMOTE_CONFIG_URL || \'\';\\n          if (!(isProductionOrStaging && REMOTE_CONFIG_URL === \'\')) {\\n            _context.next = 4;\\n            break;\\n          }\\n          throw new Error(\'Remote Config URL is not set!\');\\n        case 4:\\n          _context.next = 6;\\n          return fetch(REMOTE_CONFIG_URL);\\n        case 6:\\n          response = _context.sent;\\n          if (response.ok) {\\n            _context.next = 9;\\n            break;\\n          }\\n          throw new Error(\'Remote Config Server is out of reach!\');\\n        case 9:\\n          return _context.abrupt(\\"return\\", response.json());\\n        case 10:\\n        case \\"end\\":\\n          return _context.stop();\\n      }\\n    }, _callee);\\n  }));\\n  return function remoteConfigQuery() {\\n    return _ref.apply(this, arguments);\\n  };\\n}();\\nfunction useRemoteConfig() {\\n  var enabled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\\n  var _useState = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(_remote_config_json__WEBPACK_IMPORTED_MODULE_2__),\\n    _useState2 = _slicedToArray(_useState, 2),\\n    data = _useState2[0],\\n    setData = _useState2[1];\\n  var isMounted = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);\\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {\\n    isMounted.current = true;\\n    return function () {\\n      isMounted.current = false;\\n    };\\n  }, []);\\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {\\n    if (enabled) {\\n      remoteConfigQuery().then(/*#__PURE__*/function () {\\n        var _ref2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(res) {\\n          var resHash, dataHash;\\n          return _regeneratorRuntime().wrap(function _callee2$(_context2) {\\n            while (1) switch (_context2.prev = _context2.next) {\\n              case 0:\\n                _context2.next = 2;\\n                return _deriv_com_utils__WEBPACK_IMPORTED_MODULE_1__.ObjectUtils.hashObject(res);\\n              case 2:\\n                resHash = _context2.sent;\\n                _context2.next = 5;\\n                return _deriv_com_utils__WEBPACK_IMPORTED_MODULE_1__.ObjectUtils.hashObject(data);\\n              case 5:\\n                dataHash = _context2.sent;\\n                if (resHash !== dataHash && isMounted.current) {\\n                  setData(res);\\n                }\\n              case 7:\\n              case \\"end\\":\\n                return _context2.stop();\\n            }\\n          }, _callee2);\\n        }));\\n        return function (_x) {\\n          return _ref2.apply(this, arguments);\\n        };\\n      }())[\\"catch\\"](function (error) {\\n        // eslint-disable-next-line no-console\\n        console.log(\'Remote Config error: \', error);\\n      });\\n    }\\n  }, [enabled, data]);\\n  return {\\n    data: data\\n  };\\n}\\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (useRemoteConfig);//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vYXBpL3NyYy9ob29rcy91c2VSZW1vdGVDb25maWcudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQ0E7QUFBQTtBQUFBO0FBREE7QUFDQTtBQUNBO0FBRUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFFQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFFQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQVhBO0FBQUE7QUFBQTtBQWFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUFBO0FBQUE7QUFDQTtBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGRlcml2L3RyYWRlci8uLi9hcGkvc3JjL2hvb2tzL3VzZVJlbW90ZUNvbmZpZy50cz9mOTJmIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZUVmZmVjdCwgdXNlUmVmLCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IE9iamVjdFV0aWxzIH0gZnJvbSAnQGRlcml2LWNvbS91dGlscyc7XG5pbXBvcnQgaW5pdERhdGEgZnJvbSAnLi4vcmVtb3RlX2NvbmZpZy5qc29uJztcblxuY29uc3QgcmVtb3RlQ29uZmlnUXVlcnkgPSBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgY29uc3QgaXNQcm9kdWN0aW9uT3JTdGFnaW5nID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJyB8fCBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3N0YWdpbmcnO1xuICAgIGNvbnN0IFJFTU9URV9DT05GSUdfVVJMID0gcHJvY2Vzcy5lbnYuUkVNT1RFX0NPTkZJR19VUkwgfHwgJyc7XG4gICAgaWYgKGlzUHJvZHVjdGlvbk9yU3RhZ2luZyAmJiBSRU1PVEVfQ09ORklHX1VSTCA9PT0gJycpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZW1vdGUgQ29uZmlnIFVSTCBpcyBub3Qgc2V0IScpO1xuICAgIH1cbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKFJFTU9URV9DT05GSUdfVVJMKTtcbiAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignUmVtb3RlIENvbmZpZyBTZXJ2ZXIgaXMgb3V0IG9mIHJlYWNoIScpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpO1xufTtcblxuZnVuY3Rpb24gdXNlUmVtb3RlQ29uZmlnKGVuYWJsZWQgPSBmYWxzZSkge1xuICAgIGNvbnN0IFtkYXRhLCBzZXREYXRhXSA9IHVzZVN0YXRlKGluaXREYXRhKTtcbiAgICBjb25zdCBpc01vdW50ZWQgPSB1c2VSZWYoZmFsc2UpO1xuXG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgaXNNb3VudGVkLmN1cnJlbnQgPSB0cnVlO1xuXG4gICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICBpc01vdW50ZWQuY3VycmVudCA9IGZhbHNlO1xuICAgICAgICB9O1xuICAgIH0sIFtdKTtcblxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGlmIChlbmFibGVkKSB7XG4gICAgICAgICAgICByZW1vdGVDb25maWdRdWVyeSgpXG4gICAgICAgICAgICAgICAgLnRoZW4oYXN5bmMgcmVzID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzSGFzaCA9IGF3YWl0IE9iamVjdFV0aWxzLmhhc2hPYmplY3QocmVzKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZGF0YUhhc2ggPSBhd2FpdCBPYmplY3RVdGlscy5oYXNoT2JqZWN0KGRhdGEpO1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVzSGFzaCAhPT0gZGF0YUhhc2ggJiYgaXNNb3VudGVkLmN1cnJlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldERhdGEocmVzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLmNhdGNoKGVycm9yID0+IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1JlbW90ZSBDb25maWcgZXJyb3I6ICcsIGVycm9yKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH0sIFtlbmFibGVkLCBkYXRhXSk7XG5cbiAgICByZXR1cm4geyBkYXRhIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IHVzZVJlbW90ZUNvbmZpZztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///../api/src/hooks/useRemoteConfig.ts\\n");\n\n/***/ }),\n\n/***/ "../hooks/src/useDtraderV2Flag.ts":\n/*!****************************************!*\\\n  !*** ../hooks/src/useDtraderV2Flag.ts ***!\n  \\****************************************/\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n\neval("__webpack_require__.r(__webpack_exports__);\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\n/* harmony export */   \\"default\\": () => (__WEBPACK_DEFAULT_EXPORT__)\\n/* harmony export */ });\\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \\"react\\");\\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\\n/* harmony import */ var _useIsGrowthbookLoaded__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./useIsGrowthbookLoaded */ \\"../hooks/src/useIsGrowthbookLoaded.ts\\");\\n/* harmony import */ var _deriv_shared__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @deriv/shared */ \\"@deriv/shared\\");\\n/* harmony import */ var _deriv_shared__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_deriv_shared__WEBPACK_IMPORTED_MODULE_1__);\\n/* harmony import */ var _deriv_com_ui__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @deriv-com/ui */ \\"../../node_modules/@deriv-com/ui/dist/hooks/useDevice.js\\");\\n/* harmony import */ var _deriv_com_analytics__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @deriv-com/analytics */ \\"@deriv-com/analytics\\");\\n/* harmony import */ var _deriv_com_analytics__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_deriv_com_analytics__WEBPACK_IMPORTED_MODULE_2__);\\nfunction _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }\\nfunction _nonIterableRest() { throw new TypeError(\\"Invalid attempt to destructure non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\\"); }\\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\\"string\\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \\"Object\\" === t && r.constructor && (t = r.constructor.name), \\"Map\\" === t || \\"Set\\" === t ? Array.from(r) : \\"Arguments\\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \\"undefined\\" != typeof Symbol && r[Symbol.iterator] || r[\\"@@iterator\\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t[\\"return\\"] && (u = t[\\"return\\"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\\nfunction _arrayWithHoles(r) { if (Array.isArray(r)) return r; }\\n\\n\\n\\n\\n\\nvar useDtraderV2Flag = function useDtraderV2Flag() {\\n  var _useIsGrowthbookIsLoa = (0,_useIsGrowthbookLoaded__WEBPACK_IMPORTED_MODULE_3__[\\"default\\"])(),\\n    is_growthbook_loaded = _useIsGrowthbookIsLoa.isGBLoaded,\\n    is_gb_available = _useIsGrowthbookIsLoa.isGBAvailable;\\n  var load_dtrader_module = is_growthbook_loaded || !is_gb_available;\\n  var is_dtrader_v2 = (0,_deriv_shared__WEBPACK_IMPORTED_MODULE_1__.isDTraderV2)();\\n  var _useDevice = (0,_deriv_com_ui__WEBPACK_IMPORTED_MODULE_4__.useDevice)(),\\n    is_mobile = _useDevice.isMobile;\\n  var is_feature_flag_active = Boolean(_deriv_com_analytics__WEBPACK_IMPORTED_MODULE_2__.Analytics === null || _deriv_com_analytics__WEBPACK_IMPORTED_MODULE_2__.Analytics === void 0 ? void 0 : _deriv_com_analytics__WEBPACK_IMPORTED_MODULE_2__.Analytics.getFeatureValue(\'dtrader_v2_enabled\', false));\\n  var is_trade_or_contract_path = location.pathname.startsWith(_deriv_shared__WEBPACK_IMPORTED_MODULE_1__.routes.trade) || location.pathname.startsWith(\'/contract/\');\\n  var _useState = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false),\\n    _useState2 = _slicedToArray(_useState, 2),\\n    dtrader_v2_enabled = _useState2[0],\\n    setDTraderV2Enabled = _useState2[1];\\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {\\n    if (is_growthbook_loaded || (0,_deriv_shared__WEBPACK_IMPORTED_MODULE_1__.isDTraderV2)()) {\\n      setDTraderV2Enabled((is_dtrader_v2 || is_feature_flag_active) && is_mobile && is_trade_or_contract_path);\\n    }\\n    // eslint-disable-next-line react-hooks/exhaustive-deps\\n  }, [is_mobile, is_growthbook_loaded]);\\n  return {\\n    dtrader_v2_enabled: dtrader_v2_enabled,\\n    load_dtrader_module: load_dtrader_module\\n  };\\n};\\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (useDtraderV2Flag);//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vaG9va3Mvc3JjL3VzZUR0cmFkZXJWMkZsYWcudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFFQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBR0E7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZGVyaXYvdHJhZGVyLy4uL2hvb2tzL3NyYy91c2VEdHJhZGVyVjJGbGFnLnRzPzAxMjEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlU3RhdGUsIHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB1c2VJc0dyb3d0aGJvb2tJc0xvYWRlZCBmcm9tICcuL3VzZUlzR3Jvd3RoYm9va0xvYWRlZCc7XG5pbXBvcnQgeyBpc0RUcmFkZXJWMiwgcm91dGVzIH0gZnJvbSAnQGRlcml2L3NoYXJlZCc7XG5pbXBvcnQgeyB1c2VEZXZpY2UgfSBmcm9tICdAZGVyaXYtY29tL3VpJztcbmltcG9ydCB7IEFuYWx5dGljcyB9IGZyb20gJ0BkZXJpdi1jb20vYW5hbHl0aWNzJztcblxuY29uc3QgdXNlRHRyYWRlclYyRmxhZyA9ICgpID0+IHtcbiAgICBjb25zdCB7IGlzR0JMb2FkZWQ6IGlzX2dyb3d0aGJvb2tfbG9hZGVkLCBpc0dCQXZhaWxhYmxlOiBpc19nYl9hdmFpbGFibGUgfSA9IHVzZUlzR3Jvd3RoYm9va0lzTG9hZGVkKCk7XG4gICAgY29uc3QgbG9hZF9kdHJhZGVyX21vZHVsZSA9IGlzX2dyb3d0aGJvb2tfbG9hZGVkIHx8ICFpc19nYl9hdmFpbGFibGU7XG5cbiAgICBjb25zdCBpc19kdHJhZGVyX3YyID0gaXNEVHJhZGVyVjIoKTtcbiAgICBjb25zdCB7IGlzTW9iaWxlOiBpc19tb2JpbGUgfSA9IHVzZURldmljZSgpO1xuICAgIGNvbnN0IGlzX2ZlYXR1cmVfZmxhZ19hY3RpdmUgPSBCb29sZWFuKEFuYWx5dGljcz8uZ2V0RmVhdHVyZVZhbHVlKCdkdHJhZGVyX3YyX2VuYWJsZWQnLCBmYWxzZSkpO1xuICAgIGNvbnN0IGlzX3RyYWRlX29yX2NvbnRyYWN0X3BhdGggPVxuICAgICAgICBsb2NhdGlvbi5wYXRobmFtZS5zdGFydHNXaXRoKHJvdXRlcy50cmFkZSkgfHwgbG9jYXRpb24ucGF0aG5hbWUuc3RhcnRzV2l0aCgnL2NvbnRyYWN0LycpO1xuXG4gICAgY29uc3QgW2R0cmFkZXJfdjJfZW5hYmxlZCwgc2V0RFRyYWRlclYyRW5hYmxlZF0gPSB1c2VTdGF0ZShmYWxzZSk7XG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgaWYgKGlzX2dyb3d0aGJvb2tfbG9hZGVkIHx8IGlzRFRyYWRlclYyKCkpIHtcbiAgICAgICAgICAgIHNldERUcmFkZXJWMkVuYWJsZWQoKGlzX2R0cmFkZXJfdjIgfHwgaXNfZmVhdHVyZV9mbGFnX2FjdGl2ZSkgJiYgaXNfbW9iaWxlICYmIGlzX3RyYWRlX29yX2NvbnRyYWN0X3BhdGgpO1xuICAgICAgICB9XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9leGhhdXN0aXZlLWRlcHNcbiAgICB9LCBbaXNfbW9iaWxlLCBpc19ncm93dGhib29rX2xvYWRlZF0pO1xuXG4gICAgcmV0dXJuIHsgZHRyYWRlcl92Ml9lbmFibGVkLCBsb2FkX2R0cmFkZXJfbW9kdWxlIH07XG59O1xuXG5leHBvcnQgZGVmYXVsdCB1c2VEdHJhZGVyVjJGbGFnO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///../hooks/src/useDtraderV2Flag.ts\\n");\n\n/***/ }),\n\n/***/ "../hooks/src/useIsGrowthbookLoaded.ts":\n/*!*********************************************!*\\\n  !*** ../hooks/src/useIsGrowthbookLoaded.ts ***!\n  \\*********************************************/\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n\neval("__webpack_require__.r(__webpack_exports__);\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\n/* harmony export */   \\"default\\": () => (__WEBPACK_DEFAULT_EXPORT__)\\n/* harmony export */ });\\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \\"react\\");\\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\\n/* harmony import */ var _deriv_com_analytics__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @deriv-com/analytics */ \\"@deriv-com/analytics\\");\\n/* harmony import */ var _deriv_com_analytics__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_deriv_com_analytics__WEBPACK_IMPORTED_MODULE_1__);\\n/* harmony import */ var _deriv_api__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @deriv/api */ \\"../api/src/hooks/useRemoteConfig.ts\\");\\nfunction _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }\\nfunction _nonIterableRest() { throw new TypeError(\\"Invalid attempt to destructure non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\\"); }\\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\\"string\\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \\"Object\\" === t && r.constructor && (t = r.constructor.name), \\"Map\\" === t || \\"Set\\" === t ? Array.from(r) : \\"Arguments\\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \\"undefined\\" != typeof Symbol && r[Symbol.iterator] || r[\\"@@iterator\\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t[\\"return\\"] && (u = t[\\"return\\"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\\nfunction _arrayWithHoles(r) { if (Array.isArray(r)) return r; }\\n\\n\\n\\nvar useIsGrowthbookIsLoaded = function useIsGrowthbookIsLoaded() {\\n  var _useState = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false),\\n    _useState2 = _slicedToArray(_useState, 2),\\n    isGBLoaded = _useState2[0],\\n    setIsGBLoaded = _useState2[1];\\n  var _useRemoteConfig = (0,_deriv_api__WEBPACK_IMPORTED_MODULE_2__[\\"default\\"])(true),\\n    data = _useRemoteConfig.data;\\n  var _useState3 = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(true),\\n    _useState4 = _slicedToArray(_useState3, 2),\\n    isGBAvailable = _useState4[0],\\n    setisGBAvailable = _useState4[1];\\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {\\n    var analytics_interval;\\n    if (data !== null && data !== void 0 && data.marketing_growthbook) {\\n      var checksCounter = 0;\\n      analytics_interval = setInterval(function () {\\n        var _Analytics$getInstanc;\\n        // Check if the analytics instance is available for 10 seconds before setting the feature flag value\\n        if (checksCounter > 20) {\\n          // If the analytics instance is not available after 10 seconds, clear the interval\\n          clearInterval(analytics_interval);\\n          setisGBAvailable(false);\\n          return;\\n        }\\n        checksCounter += 1;\\n        if (_deriv_com_analytics__WEBPACK_IMPORTED_MODULE_1__.Analytics !== null && _deriv_com_analytics__WEBPACK_IMPORTED_MODULE_1__.Analytics !== void 0 && (_Analytics$getInstanc = _deriv_com_analytics__WEBPACK_IMPORTED_MODULE_1__.Analytics.getInstances()) !== null && _Analytics$getInstanc !== void 0 && _Analytics$getInstanc.ab) {\\n          setIsGBLoaded(true);\\n          clearInterval(analytics_interval);\\n        }\\n      }, 500);\\n    } else {\\n      setisGBAvailable(false);\\n    }\\n    return function () {\\n      clearInterval(analytics_interval);\\n    };\\n  }, [data.marketing_growthbook]);\\n  return {\\n    isGBLoaded: isGBLoaded,\\n    isGBAvailable: isGBAvailable\\n  };\\n};\\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (useIsGrowthbookIsLoaded);//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vaG9va3Mvc3JjL3VzZUlzR3Jvd3RoYm9va0xvYWRlZC50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL0BkZXJpdi90cmFkZXIvLi4vaG9va3Mvc3JjL3VzZUlzR3Jvd3RoYm9va0xvYWRlZC50cz80YjFkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBBbmFseXRpY3MgfSBmcm9tICdAZGVyaXYtY29tL2FuYWx5dGljcyc7XG5pbXBvcnQgeyB1c2VSZW1vdGVDb25maWcgfSBmcm9tICdAZGVyaXYvYXBpJztcblxuY29uc3QgdXNlSXNHcm93dGhib29rSXNMb2FkZWQgPSAoKSA9PiB7XG4gICAgY29uc3QgW2lzR0JMb2FkZWQsIHNldElzR0JMb2FkZWRdID0gdXNlU3RhdGUoZmFsc2UpO1xuICAgIGNvbnN0IHsgZGF0YSB9ID0gdXNlUmVtb3RlQ29uZmlnKHRydWUpO1xuICAgIGNvbnN0IFtpc0dCQXZhaWxhYmxlLCBzZXRpc0dCQXZhaWxhYmxlXSA9IHVzZVN0YXRlPGJvb2xlYW4+KHRydWUpO1xuXG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgbGV0IGFuYWx5dGljc19pbnRlcnZhbDogTm9kZUpTLlRpbWVvdXQ7XG5cbiAgICAgICAgaWYgKGRhdGE/Lm1hcmtldGluZ19ncm93dGhib29rKSB7XG4gICAgICAgICAgICBsZXQgY2hlY2tzQ291bnRlciA9IDA7XG4gICAgICAgICAgICBhbmFseXRpY3NfaW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIGFuYWx5dGljcyBpbnN0YW5jZSBpcyBhdmFpbGFibGUgZm9yIDEwIHNlY29uZHMgYmVmb3JlIHNldHRpbmcgdGhlIGZlYXR1cmUgZmxhZyB2YWx1ZVxuICAgICAgICAgICAgICAgIGlmIChjaGVja3NDb3VudGVyID4gMjApIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gSWYgdGhlIGFuYWx5dGljcyBpbnN0YW5jZSBpcyBub3QgYXZhaWxhYmxlIGFmdGVyIDEwIHNlY29uZHMsIGNsZWFyIHRoZSBpbnRlcnZhbFxuICAgICAgICAgICAgICAgICAgICBjbGVhckludGVydmFsKGFuYWx5dGljc19pbnRlcnZhbCk7XG4gICAgICAgICAgICAgICAgICAgIHNldGlzR0JBdmFpbGFibGUoZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNoZWNrc0NvdW50ZXIgKz0gMTtcbiAgICAgICAgICAgICAgICBpZiAoQW5hbHl0aWNzPy5nZXRJbnN0YW5jZXMoKT8uYWIpIHtcbiAgICAgICAgICAgICAgICAgICAgc2V0SXNHQkxvYWRlZCh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgY2xlYXJJbnRlcnZhbChhbmFseXRpY3NfaW50ZXJ2YWwpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIDUwMCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzZXRpc0dCQXZhaWxhYmxlKGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgY2xlYXJJbnRlcnZhbChhbmFseXRpY3NfaW50ZXJ2YWwpO1xuICAgICAgICB9O1xuICAgIH0sIFtkYXRhLm1hcmtldGluZ19ncm93dGhib29rXSk7XG5cbiAgICByZXR1cm4geyBpc0dCTG9hZGVkLCBpc0dCQXZhaWxhYmxlIH07XG59O1xuXG5leHBvcnQgZGVmYXVsdCB1c2VJc0dyb3d0aGJvb2tJc0xvYWRlZDtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///../hooks/src/useIsGrowthbookLoaded.ts\\n");\n\n/***/ }),\n\n/***/ "./src/index.tsx":\n/*!***********************!*\\\n  !*** ./src/index.tsx ***!\n  \\***********************/\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n\neval("__webpack_require__.r(__webpack_exports__);\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\n/* harmony export */   \\"default\\": () => (__WEBPACK_DEFAULT_EXPORT__)\\n/* harmony export */ });\\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \\"react\\");\\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\\n/* harmony import */ var _deriv_shared__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @deriv/shared */ \\"@deriv/shared\\");\\n/* harmony import */ var _deriv_shared__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_deriv_shared__WEBPACK_IMPORTED_MODULE_1__);\\n/* harmony import */ var _deriv_components__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @deriv/components */ \\"@deriv/components\\");\\n/* harmony import */ var _deriv_components__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_deriv_components__WEBPACK_IMPORTED_MODULE_2__);\\n/* harmony import */ var _deriv_hooks__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @deriv/hooks */ \\"../hooks/src/useDtraderV2Flag.ts\\");\\n\\n\\n\\n\\nvar AppLoader = (0,_deriv_shared__WEBPACK_IMPORTED_MODULE_1__.makeLazyLoader)(function () {\\n  return (0,_deriv_shared__WEBPACK_IMPORTED_MODULE_1__.moduleLoader)(function () {\\n    return Promise.all(/*! import() | trader-app */[__webpack_require__.e(\\"vendors-node_modules_bowser_es5_js-node_modules_dayjs_dayjs_min_js-node_modules_lodash_deboun-bbb277\\"), __webpack_require__.e(\\"vendors-node_modules_react-content-loader_dist_react-content-loader_es_js-node_modules_react--c10131\\"), __webpack_require__.e(\\"src_sass_app_scss-src_App_Components_Elements_PositionsDrawer_helpers_index_ts-src_App_init-s-ba58f8\\"), __webpack_require__.e(\\"trader-app\\")]).then(__webpack_require__.bind(__webpack_require__, /*! ./App/index */ \\"./src/App/index.tsx\\"));\\n  });\\n}, function () {\\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_deriv_components__WEBPACK_IMPORTED_MODULE_2__.Loading, null);\\n})();\\nvar AppV2Loader = (0,_deriv_shared__WEBPACK_IMPORTED_MODULE_1__.makeLazyLoader)(function () {\\n  return (0,_deriv_shared__WEBPACK_IMPORTED_MODULE_1__.moduleLoader)(function () {\\n    return Promise.all(/*! import() | trader-app-v2 */[__webpack_require__.e(\\"vendors-node_modules_bowser_es5_js-node_modules_dayjs_dayjs_min_js-node_modules_lodash_deboun-bbb277\\"), __webpack_require__.e(\\"vendors-node_modules_cloudflare_stream-react_dist_stream-react_esm_js-node_modules_deriv_quil-145140\\"), __webpack_require__.e(\\"hooks_src_useMFAccountStatus_ts-src_Modules_Trading_Helpers_video-config_ts-src_Stores_Module-77c64e\\"), __webpack_require__.e(\\"src_sass_app_scss-src_App_Components_Elements_PositionsDrawer_helpers_index_ts-src_App_init-s-ba58f8\\"), __webpack_require__.e(\\"src_Modules_Contract_Containers_replay-chart_tsx-src_Stores_Modules_Trading_Helpers_logic_ts\\"), __webpack_require__.e(\\"trader-app-v2\\")]).then(__webpack_require__.bind(__webpack_require__, /*! ./AppV2/index */ \\"./src/AppV2/index.tsx\\"));\\n  });\\n}, function () {\\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_deriv_components__WEBPACK_IMPORTED_MODULE_2__.Loading.DTraderV2, {\\n    initial_app_loading: true,\\n    is_contract_details: window.location.pathname.startsWith(\'/contract/\'),\\n    is_positions: window.location.pathname === _deriv_shared__WEBPACK_IMPORTED_MODULE_1__.routes.trader_positions,\\n    is_closed_tab: (0,_deriv_shared__WEBPACK_IMPORTED_MODULE_1__.getPositionsV2TabIndexFromURL)() === 1\\n  });\\n})();\\nvar App = function App(_ref) {\\n  var passthrough = _ref.passthrough;\\n  var _useDtraderV2Flag = (0,_deriv_hooks__WEBPACK_IMPORTED_MODULE_3__[\\"default\\"])(),\\n    dtrader_v2_enabled = _useDtraderV2Flag.dtrader_v2_enabled,\\n    load_dtrader_module = _useDtraderV2Flag.load_dtrader_module;\\n  if (load_dtrader_module) {\\n    return dtrader_v2_enabled ? /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(AppV2Loader, {\\n      passthrough: passthrough\\n    }) : /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(AppLoader, {\\n      passthrough: passthrough\\n    });\\n  }\\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_deriv_components__WEBPACK_IMPORTED_MODULE_2__.Loading, null);\\n};\\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (App);//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW5kZXgudHN4IiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBR0E7QUFTQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUdBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUlBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL0BkZXJpdi90cmFkZXIvLi9zcmMvaW5kZXgudHN4P2Q5ODYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGdldFBvc2l0aW9uc1YyVGFiSW5kZXhGcm9tVVJMLCBtYWtlTGF6eUxvYWRlciwgbW9kdWxlTG9hZGVyLCByb3V0ZXMgfSBmcm9tICdAZGVyaXYvc2hhcmVkJztcbmltcG9ydCB7IExvYWRpbmcgfSBmcm9tICdAZGVyaXYvY29tcG9uZW50cyc7XG5pbXBvcnQgeyBUQ29yZVN0b3JlcyB9IGZyb20gJ0BkZXJpdi9zdG9yZXMvdHlwZXMnO1xuaW1wb3J0IHsgVFdlYlNvY2tldCB9IGZyb20gJ1R5cGVzJztcbmltcG9ydCB7IHVzZUR0cmFkZXJWMkZsYWcgfSBmcm9tICdAZGVyaXYvaG9va3MnO1xuXG50eXBlIEFwcHR5cGVzID0ge1xuICAgIHBhc3N0aHJvdWdoOiB7XG4gICAgICAgIHJvb3Rfc3RvcmU6IFRDb3JlU3RvcmVzO1xuICAgICAgICBXUzogVFdlYlNvY2tldDtcbiAgICB9O1xufTtcblxuY29uc3QgQXBwTG9hZGVyID0gbWFrZUxhenlMb2FkZXIoXG4gICAgKCkgPT4gbW9kdWxlTG9hZGVyKCgpID0+IGltcG9ydCgvKiB3ZWJwYWNrQ2h1bmtOYW1lOiBcInRyYWRlci1hcHBcIiwgd2VicGFja1ByZWxvYWQ6IHRydWUgKi8gJy4vQXBwL2luZGV4JykpLFxuICAgICgpID0+IDxMb2FkaW5nIC8+XG4pKCkgYXMgUmVhY3QuQ29tcG9uZW50VHlwZTxBcHB0eXBlcz47XG5cbmNvbnN0IEFwcFYyTG9hZGVyID0gbWFrZUxhenlMb2FkZXIoXG4gICAgKCkgPT4gbW9kdWxlTG9hZGVyKCgpID0+IGltcG9ydCgvKiB3ZWJwYWNrQ2h1bmtOYW1lOiBcInRyYWRlci1hcHAtdjJcIiwgd2VicGFja1ByZWxvYWQ6IHRydWUgKi8gJy4vQXBwVjIvaW5kZXgnKSksXG4gICAgKCkgPT4gKFxuICAgICAgICA8TG9hZGluZy5EVHJhZGVyVjJcbiAgICAgICAgICAgIGluaXRpYWxfYXBwX2xvYWRpbmdcbiAgICAgICAgICAgIGlzX2NvbnRyYWN0X2RldGFpbHM9e3dpbmRvdy5sb2NhdGlvbi5wYXRobmFtZS5zdGFydHNXaXRoKCcvY29udHJhY3QvJyl9XG4gICAgICAgICAgICBpc19wb3NpdGlvbnM9e3dpbmRvdy5sb2NhdGlvbi5wYXRobmFtZSA9PT0gcm91dGVzLnRyYWRlcl9wb3NpdGlvbnN9XG4gICAgICAgICAgICBpc19jbG9zZWRfdGFiPXtnZXRQb3NpdGlvbnNWMlRhYkluZGV4RnJvbVVSTCgpID09PSAxfVxuICAgICAgICAvPlxuICAgIClcbikoKSBhcyBSZWFjdC5Db21wb25lbnRUeXBlPEFwcHR5cGVzPjtcblxuY29uc3QgQXBwID0gKHsgcGFzc3Rocm91Z2ggfTogQXBwdHlwZXMpID0+IHtcbiAgICBjb25zdCB7IGR0cmFkZXJfdjJfZW5hYmxlZCwgbG9hZF9kdHJhZGVyX21vZHVsZSB9ID0gdXNlRHRyYWRlclYyRmxhZygpO1xuICAgIGlmIChsb2FkX2R0cmFkZXJfbW9kdWxlKSB7XG4gICAgICAgIHJldHVybiBkdHJhZGVyX3YyX2VuYWJsZWQgPyA8QXBwVjJMb2FkZXIgcGFzc3Rocm91Z2g9e3Bhc3N0aHJvdWdofSAvPiA6IDxBcHBMb2FkZXIgcGFzc3Rocm91Z2g9e3Bhc3N0aHJvdWdofSAvPjtcbiAgICB9XG4gICAgcmV0dXJuIDxMb2FkaW5nIC8+O1xufTtcbmV4cG9ydCBkZWZhdWx0IEFwcDtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///./src/index.tsx\\n");\n\n/***/ }),\n\n/***/ "@deriv-com/analytics":\n/*!***************************************!*\\\n  !*** external "@deriv-com/analytics" ***!\n  \\***************************************/\n/***/ ((module) => {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE__deriv_com_analytics__;\n\n/***/ }),\n\n/***/ "@deriv/components":\n/*!************************************!*\\\n  !*** external "@deriv/components" ***!\n  \\************************************/\n/***/ ((module) => {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE__deriv_components__;\n\n/***/ }),\n\n/***/ "@deriv/deriv-charts":\n/*!**************************************!*\\\n  !*** external "@deriv/deriv-charts" ***!\n  \\**************************************/\n/***/ ((module) => {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE__deriv_deriv_charts__;\n\n/***/ }),\n\n/***/ "@deriv/shared":\n/*!********************************!*\\\n  !*** external "@deriv/shared" ***!\n  \\********************************/\n/***/ ((module) => {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE__deriv_shared__;\n\n/***/ }),\n\n/***/ "@deriv/shared/src/utils/platform/platform":\n/*!************************************************************!*\\\n  !*** external "@deriv/shared/src/utils/platform/platform" ***!\n  \\************************************************************/\n/***/ ((module) => {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE__deriv_shared_src_utils_platform_platform__;\n\n/***/ }),\n\n/***/ "@deriv/translations":\n/*!**************************************!*\\\n  !*** external "@deriv/translations" ***!\n  \\**************************************/\n/***/ ((module) => {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE__deriv_translations__;\n\n/***/ }),\n\n/***/ "mobx":\n/*!***********************!*\\\n  !*** external "mobx" ***!\n  \\***********************/\n/***/ ((module) => {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE_mobx__;\n\n/***/ }),\n\n/***/ "mobx-react":\n/*!*****************************!*\\\n  !*** external "mobx-react" ***!\n  \\*****************************/\n/***/ ((module) => {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE_mobx_react__;\n\n/***/ }),\n\n/***/ "react":\n/*!************************!*\\\n  !*** external "react" ***!\n  \\************************/\n/***/ ((module) => {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE_react__;\n\n/***/ }),\n\n/***/ "react-dom":\n/*!****************************!*\\\n  !*** external "react-dom" ***!\n  \\****************************/\n/***/ ((module) => {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE_react_dom__;\n\n/***/ }),\n\n/***/ "react-router":\n/*!*******************************!*\\\n  !*** external "react-router" ***!\n  \\*******************************/\n/***/ ((module) => {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE_react_router__;\n\n/***/ }),\n\n/***/ "react-router-dom":\n/*!***********************************!*\\\n  !*** external "react-router-dom" ***!\n  \\***********************************/\n/***/ ((module) => {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE_react_router_dom__;\n\n/***/ }),\n\n/***/ "../../node_modules/@deriv-com/ui/dist/_commonjsHelpers-BkfeUUK-.js":\n/*!**************************************************************************!*\\\n  !*** ../../node_modules/@deriv-com/ui/dist/_commonjsHelpers-BkfeUUK-.js ***!\n  \\**************************************************************************/\n/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {\n\neval("__webpack_require__.r(__webpack_exports__);\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\n/* harmony export */   a: () => (/* binding */ l),\\n/* harmony export */   c: () => (/* binding */ u),\\n/* harmony export */   g: () => (/* binding */ f)\\n/* harmony export */ });\\nvar u = typeof globalThis < \\"u\\" ? globalThis : typeof window < \\"u\\" ? window : typeof global < \\"u\\" ? global : typeof self < \\"u\\" ? self : {};\\nfunction f(e) {\\n  return e && e.__esModule && Object.prototype.hasOwnProperty.call(e, \\"default\\") ? e.default : e;\\n}\\nfunction l(e) {\\n  if (e.__esModule) return e;\\n  var r = e.default;\\n  if (typeof r == \\"function\\") {\\n    var t = function o() {\\n      return this instanceof o ? Reflect.construct(r, arguments, this.constructor) : r.apply(this, arguments);\\n    };\\n    t.prototype = r.prototype;\\n  } else t = {};\\n  return Object.defineProperty(t, \\"__esModule\\", { value: !0 }), Object.keys(e).forEach(function(o) {\\n    var n = Object.getOwnPropertyDescriptor(e, o);\\n    Object.defineProperty(t, o, n.get ? n : {\\n      enumerable: !0,\\n      get: function() {\\n        return e[o];\\n      }\\n    });\\n  }), t;\\n}\\n\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzL0BkZXJpdi1jb20vdWkvZGlzdC9fY29tbW9uanNIZWxwZXJzLUJrZmVVVUstLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFLQSIsInNvdXJjZXMiOlsid2VicGFjazovL0BkZXJpdi90cmFkZXIvLi4vLi4vbm9kZV9tb2R1bGVzL0BkZXJpdi1jb20vdWkvZGlzdC9fY29tbW9uanNIZWxwZXJzLUJrZmVVVUstLmpzP2RjMDciXSwic291cmNlc0NvbnRlbnQiOlsidmFyIHUgPSB0eXBlb2YgZ2xvYmFsVGhpcyA8IFwidVwiID8gZ2xvYmFsVGhpcyA6IHR5cGVvZiB3aW5kb3cgPCBcInVcIiA/IHdpbmRvdyA6IHR5cGVvZiBnbG9iYWwgPCBcInVcIiA/IGdsb2JhbCA6IHR5cGVvZiBzZWxmIDwgXCJ1XCIgPyBzZWxmIDoge307XG5mdW5jdGlvbiBmKGUpIHtcbiAgcmV0dXJuIGUgJiYgZS5fX2VzTW9kdWxlICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLCBcImRlZmF1bHRcIikgPyBlLmRlZmF1bHQgOiBlO1xufVxuZnVuY3Rpb24gbChlKSB7XG4gIGlmIChlLl9fZXNNb2R1bGUpIHJldHVybiBlO1xuICB2YXIgciA9IGUuZGVmYXVsdDtcbiAgaWYgKHR5cGVvZiByID09IFwiZnVuY3Rpb25cIikge1xuICAgIHZhciB0ID0gZnVuY3Rpb24gbygpIHtcbiAgICAgIHJldHVybiB0aGlzIGluc3RhbmNlb2YgbyA/IFJlZmxlY3QuY29uc3RydWN0KHIsIGFyZ3VtZW50cywgdGhpcy5jb25zdHJ1Y3RvcikgOiByLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfTtcbiAgICB0LnByb3RvdHlwZSA9IHIucHJvdG90eXBlO1xuICB9IGVsc2UgdCA9IHt9O1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiAhMCB9KSwgT2JqZWN0LmtleXMoZSkuZm9yRWFjaChmdW5jdGlvbihvKSB7XG4gICAgdmFyIG4gPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGUsIG8pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCBvLCBuLmdldCA/IG4gOiB7XG4gICAgICBlbnVtZXJhYmxlOiAhMCxcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBlW29dO1xuICAgICAgfVxuICAgIH0pO1xuICB9KSwgdDtcbn1cbmV4cG9ydCB7XG4gIGwgYXMgYSxcbiAgdSBhcyBjLFxuICBmIGFzIGdcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///../../node_modules/@deriv-com/ui/dist/_commonjsHelpers-BkfeUUK-.js\\n");\n\n/***/ }),\n\n/***/ "../../node_modules/@deriv-com/ui/dist/hooks/useDevice.js":\n/*!****************************************************************!*\\\n  !*** ../../node_modules/@deriv-com/ui/dist/hooks/useDevice.js ***!\n  \\****************************************************************/\n/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {\n\neval("__webpack_require__.r(__webpack_exports__);\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\n/* harmony export */   useDevice: () => (/* binding */ d)\\n/* harmony export */ });\\n/* harmony import */ var _index_EY1gwl5O_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../index-EY1gwl5O.js */ \\"../../node_modules/@deriv-com/ui/dist/index-EY1gwl5O.js\\");\\n\\nconst d = () => {\\n  const i = (0,_index_EY1gwl5O_js__WEBPACK_IMPORTED_MODULE_0__.u)(\\"(min-width: 1280px)\\"), a = (0,_index_EY1gwl5O_js__WEBPACK_IMPORTED_MODULE_0__.u)(\\"(max-width: 600px)\\"), n = (0,_index_EY1gwl5O_js__WEBPACK_IMPORTED_MODULE_0__.u)(\\n    \\"(min-width: 601px) and (max-width: 1279px)\\"\\n  ), e = (0,_index_EY1gwl5O_js__WEBPACK_IMPORTED_MODULE_0__.u)(\\n    \\"(min-width: 601px) and (max-width: 1279px) and (orientation: portrait)\\"\\n  ), o = (0,_index_EY1gwl5O_js__WEBPACK_IMPORTED_MODULE_0__.u)(\\n    \\"(max-width: 1279px) and (orientation: landscape)\\"\\n  );\\n  return {\\n    /** returns Larger screen tablets [min-width: 1280px] */\\n    isDesktop: i,\\n    /**  returns Smaller screen tablets [max-width: 600px] */\\n    isMobile: a,\\n    /** returns Larger screen phones and smaller screen desktop [min-width: 601px and max-width: 1279px] */\\n    isTablet: n,\\n    /** returns tablet screen with portrait orientation [min-width: 601px and max-width: 1279px and orientation: portrait] */\\n    isTabletPortrait: e,\\n    /** returns mobile or medium screens in landscape orientation [max-width: 1279px and orientation: landscape] */\\n    isMobileOrTabletLandscape: o\\n  };\\n};\\n\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzL0BkZXJpdi1jb20vdWkvZGlzdC9ob29rcy91c2VEZXZpY2UuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGRlcml2L3RyYWRlci8uLi8uLi9ub2RlX21vZHVsZXMvQGRlcml2LWNvbS91aS9kaXN0L2hvb2tzL3VzZURldmljZS5qcz8yNzA4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHUgYXMgdCB9IGZyb20gXCIuLi9pbmRleC1FWTFnd2w1Ty5qc1wiO1xuY29uc3QgZCA9ICgpID0+IHtcbiAgY29uc3QgaSA9IHQoXCIobWluLXdpZHRoOiAxMjgwcHgpXCIpLCBhID0gdChcIihtYXgtd2lkdGg6IDYwMHB4KVwiKSwgbiA9IHQoXG4gICAgXCIobWluLXdpZHRoOiA2MDFweCkgYW5kIChtYXgtd2lkdGg6IDEyNzlweClcIlxuICApLCBlID0gdChcbiAgICBcIihtaW4td2lkdGg6IDYwMXB4KSBhbmQgKG1heC13aWR0aDogMTI3OXB4KSBhbmQgKG9yaWVudGF0aW9uOiBwb3J0cmFpdClcIlxuICApLCBvID0gdChcbiAgICBcIihtYXgtd2lkdGg6IDEyNzlweCkgYW5kIChvcmllbnRhdGlvbjogbGFuZHNjYXBlKVwiXG4gICk7XG4gIHJldHVybiB7XG4gICAgLyoqIHJldHVybnMgTGFyZ2VyIHNjcmVlbiB0YWJsZXRzIFttaW4td2lkdGg6IDEyODBweF0gKi9cbiAgICBpc0Rlc2t0b3A6IGksXG4gICAgLyoqICByZXR1cm5zIFNtYWxsZXIgc2NyZWVuIHRhYmxldHMgW21heC13aWR0aDogNjAwcHhdICovXG4gICAgaXNNb2JpbGU6IGEsXG4gICAgLyoqIHJldHVybnMgTGFyZ2VyIHNjcmVlbiBwaG9uZXMgYW5kIHNtYWxsZXIgc2NyZWVuIGRlc2t0b3AgW21pbi13aWR0aDogNjAxcHggYW5kIG1heC13aWR0aDogMTI3OXB4XSAqL1xuICAgIGlzVGFibGV0OiBuLFxuICAgIC8qKiByZXR1cm5zIHRhYmxldCBzY3JlZW4gd2l0aCBwb3J0cmFpdCBvcmllbnRhdGlvbiBbbWluLXdpZHRoOiA2MDFweCBhbmQgbWF4LXdpZHRoOiAxMjc5cHggYW5kIG9yaWVudGF0aW9uOiBwb3J0cmFpdF0gKi9cbiAgICBpc1RhYmxldFBvcnRyYWl0OiBlLFxuICAgIC8qKiByZXR1cm5zIG1vYmlsZSBvciBtZWRpdW0gc2NyZWVucyBpbiBsYW5kc2NhcGUgb3JpZW50YXRpb24gW21heC13aWR0aDogMTI3OXB4IGFuZCBvcmllbnRhdGlvbjogbGFuZHNjYXBlXSAqL1xuICAgIGlzTW9iaWxlT3JUYWJsZXRMYW5kc2NhcGU6IG9cbiAgfTtcbn07XG5leHBvcnQge1xuICBkIGFzIHVzZURldmljZVxufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///../../node_modules/@deriv-com/ui/dist/hooks/useDevice.js\\n");\n\n/***/ }),\n\n/***/ "../../node_modules/@deriv-com/ui/dist/index-EY1gwl5O.js":\n/*!***************************************************************!*\\\n  !*** ../../node_modules/@deriv-com/ui/dist/index-EY1gwl5O.js ***!\n  \\***************************************************************/\n/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {\n\neval("__webpack_require__.r(__webpack_exports__);\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\n/* harmony export */   a: () => (/* binding */ g),\\n/* harmony export */   u: () => (/* binding */ O)\\n/* harmony export */ });\\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \\"react\\");\\n/* harmony import */ var _commonjsHelpers_BkfeUUK_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_commonjsHelpers-BkfeUUK-.js */ \\"../../node_modules/@deriv-com/ui/dist/_commonjsHelpers-BkfeUUK-.js\\");\\n\\n\\nvar v = typeof _commonjsHelpers_BkfeUUK_js__WEBPACK_IMPORTED_MODULE_1__.c == \\"object\\" && _commonjsHelpers_BkfeUUK_js__WEBPACK_IMPORTED_MODULE_1__.c && _commonjsHelpers_BkfeUUK_js__WEBPACK_IMPORTED_MODULE_1__.c.Object === Object && _commonjsHelpers_BkfeUUK_js__WEBPACK_IMPORTED_MODULE_1__.c, E = typeof self == \\"object\\" && self && self.Object === Object && self;\\nv || E || Function(\\"return this\\")();\\nvar f = typeof window < \\"u\\" ? react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect : react__WEBPACK_IMPORTED_MODULE_0__.useEffect;\\nfunction L(t, s, o, i) {\\n  const c = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(s);\\n  f(() => {\\n    c.current = s;\\n  }, [s]), (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\\n    const n = window;\\n    if (!(n && n.addEventListener))\\n      return;\\n    const r = (e) => {\\n      c.current(e);\\n    };\\n    return n.addEventListener(t, r, i), () => {\\n      n.removeEventListener(t, r, i);\\n    };\\n  }, [t, o, i]);\\n}\\nvar h = typeof window > \\"u\\";\\nfunction O(t, {\\n  defaultValue: s = !1,\\n  initializeWithValue: o = !0\\n} = {}) {\\n  const i = (e) => h ? s : window.matchMedia(e).matches, [c, n] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(() => o ? i(t) : s);\\n  function r() {\\n    n(i(t));\\n  }\\n  return f(() => {\\n    const e = window.matchMedia(t);\\n    return r(), e.addListener ? e.addListener(r) : e.addEventListener(\\"change\\", r), () => {\\n      e.removeListener ? e.removeListener(r) : e.removeEventListener(\\"change\\", r);\\n    };\\n  }, [t]), c;\\n}\\nfunction g(t, s, o = \\"mousedown\\", i = {}) {\\n  L(\\n    o,\\n    (c) => {\\n      const n = c.target;\\n      if (!n || !n.isConnected)\\n        return;\\n      (Array.isArray(t) ? t.filter((e) => !!e.current).every((e) => e.current && !e.current.contains(n)) : t.current && !t.current.contains(n)) && s(c);\\n    },\\n    void 0,\\n    i\\n  );\\n}\\n\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzL0BkZXJpdi1jb20vdWkvZGlzdC9pbmRleC1FWTFnd2w1Ty5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUlBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGRlcml2L3RyYWRlci8uLi8uLi9ub2RlX21vZHVsZXMvQGRlcml2LWNvbS91aS9kaXN0L2luZGV4LUVZMWd3bDVPLmpzP2I4MzMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlU3RhdGUgYXMgZCwgdXNlTGF5b3V0RWZmZWN0IGFzIG0sIHVzZUVmZmVjdCBhcyB1LCB1c2VSZWYgYXMgbCB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgYyBhcyBhIH0gZnJvbSBcIi4vX2NvbW1vbmpzSGVscGVycy1Ca2ZlVVVLLS5qc1wiO1xudmFyIHYgPSB0eXBlb2YgYSA9PSBcIm9iamVjdFwiICYmIGEgJiYgYS5PYmplY3QgPT09IE9iamVjdCAmJiBhLCBFID0gdHlwZW9mIHNlbGYgPT0gXCJvYmplY3RcIiAmJiBzZWxmICYmIHNlbGYuT2JqZWN0ID09PSBPYmplY3QgJiYgc2VsZjtcbnYgfHwgRSB8fCBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG52YXIgZiA9IHR5cGVvZiB3aW5kb3cgPCBcInVcIiA/IG0gOiB1O1xuZnVuY3Rpb24gTCh0LCBzLCBvLCBpKSB7XG4gIGNvbnN0IGMgPSBsKHMpO1xuICBmKCgpID0+IHtcbiAgICBjLmN1cnJlbnQgPSBzO1xuICB9LCBbc10pLCB1KCgpID0+IHtcbiAgICBjb25zdCBuID0gd2luZG93O1xuICAgIGlmICghKG4gJiYgbi5hZGRFdmVudExpc3RlbmVyKSlcbiAgICAgIHJldHVybjtcbiAgICBjb25zdCByID0gKGUpID0+IHtcbiAgICAgIGMuY3VycmVudChlKTtcbiAgICB9O1xuICAgIHJldHVybiBuLmFkZEV2ZW50TGlzdGVuZXIodCwgciwgaSksICgpID0+IHtcbiAgICAgIG4ucmVtb3ZlRXZlbnRMaXN0ZW5lcih0LCByLCBpKTtcbiAgICB9O1xuICB9LCBbdCwgbywgaV0pO1xufVxudmFyIGggPSB0eXBlb2Ygd2luZG93ID4gXCJ1XCI7XG5mdW5jdGlvbiBPKHQsIHtcbiAgZGVmYXVsdFZhbHVlOiBzID0gITEsXG4gIGluaXRpYWxpemVXaXRoVmFsdWU6IG8gPSAhMFxufSA9IHt9KSB7XG4gIGNvbnN0IGkgPSAoZSkgPT4gaCA/IHMgOiB3aW5kb3cubWF0Y2hNZWRpYShlKS5tYXRjaGVzLCBbYywgbl0gPSBkKCgpID0+IG8gPyBpKHQpIDogcyk7XG4gIGZ1bmN0aW9uIHIoKSB7XG4gICAgbihpKHQpKTtcbiAgfVxuICByZXR1cm4gZigoKSA9PiB7XG4gICAgY29uc3QgZSA9IHdpbmRvdy5tYXRjaE1lZGlhKHQpO1xuICAgIHJldHVybiByKCksIGUuYWRkTGlzdGVuZXIgPyBlLmFkZExpc3RlbmVyKHIpIDogZS5hZGRFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsIHIpLCAoKSA9PiB7XG4gICAgICBlLnJlbW92ZUxpc3RlbmVyID8gZS5yZW1vdmVMaXN0ZW5lcihyKSA6IGUucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLCByKTtcbiAgICB9O1xuICB9LCBbdF0pLCBjO1xufVxuZnVuY3Rpb24gZyh0LCBzLCBvID0gXCJtb3VzZWRvd25cIiwgaSA9IHt9KSB7XG4gIEwoXG4gICAgbyxcbiAgICAoYykgPT4ge1xuICAgICAgY29uc3QgbiA9IGMudGFyZ2V0O1xuICAgICAgaWYgKCFuIHx8ICFuLmlzQ29ubmVjdGVkKVxuICAgICAgICByZXR1cm47XG4gICAgICAoQXJyYXkuaXNBcnJheSh0KSA/IHQuZmlsdGVyKChlKSA9PiAhIWUuY3VycmVudCkuZXZlcnkoKGUpID0+IGUuY3VycmVudCAmJiAhZS5jdXJyZW50LmNvbnRhaW5zKG4pKSA6IHQuY3VycmVudCAmJiAhdC5jdXJyZW50LmNvbnRhaW5zKG4pKSAmJiBzKGMpO1xuICAgIH0sXG4gICAgdm9pZCAwLFxuICAgIGlcbiAgKTtcbn1cbmV4cG9ydCB7XG4gIGcgYXMgYSxcbiAgTyBhcyB1XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///../../node_modules/@deriv-com/ui/dist/index-EY1gwl5O.js\\n");\n\n/***/ }),\n\n/***/ "../../node_modules/@deriv-com/utils/dist/deriv-utils.js":\n/*!***************************************************************!*\\\n  !*** ../../node_modules/@deriv-com/utils/dist/deriv-utils.js ***!\n  \\***************************************************************/\n/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {\n\neval("__webpack_require__.r(__webpack_exports__);\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\n/* harmony export */   AppIDConstants: () => (/* binding */ Ke),\\n/* harmony export */   BrandConstants: () => (/* binding */ ke),\\n/* harmony export */   BrandUtils: () => (/* binding */ at),\\n/* harmony export */   CurrencyConstants: () => (/* binding */ He),\\n/* harmony export */   DocumentConstants: () => (/* binding */ We),\\n/* harmony export */   FormatUtils: () => (/* binding */ Qe),\\n/* harmony export */   ImageUtils: () => (/* binding */ qe),\\n/* harmony export */   LocalStorageConstants: () => (/* binding */ xe),\\n/* harmony export */   LocalStorageUtils: () => (/* binding */ et),\\n/* harmony export */   MobileDevicesConstants: () => (/* binding */ Xe),\\n/* harmony export */   OSDetectionUtils: () => (/* binding */ st),\\n/* harmony export */   ObjectUtils: () => (/* binding */ tt),\\n/* harmony export */   PromiseUtils: () => (/* binding */ rt),\\n/* harmony export */   URLConstants: () => (/* binding */ Ve),\\n/* harmony export */   URLUtils: () => (/* binding */ ot),\\n/* harmony export */   ValidationConstants: () => (/* binding */ Je),\\n/* harmony export */   WebSocketUtils: () => (/* binding */ nt)\\n/* harmony export */ });\\nconst v = {\\n  real: \\"green.derivws.com\\",\\n  demo: \\"blue.derivws.com\\"\\n}, w = {\\n  \\"deriv.app\\": \\"16929\\",\\n  \\"app.deriv.com\\": \\"16929\\",\\n  \\"staging-app.deriv.com\\": \\"16303\\",\\n  \\"app.deriv.me\\": \\"1411\\",\\n  \\"staging-app.deriv.me\\": \\"1411\\",\\n  \\"app.deriv.be\\": \\"30767\\",\\n  \\"staging-app.deriv.be\\": \\"31186\\",\\n  \\"binary.com\\": \\"1\\",\\n  \\"test-app.deriv.com\\": \\"51072\\",\\n  \\"p2p.deriv.com\\": \\"61859\\",\\n  \\"staging-p2p.deriv.com\\": \\"62019\\"\\n}, D = \\"deriv\\", Ke = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\\n  __proto__: null,\\n  appBrand: D,\\n  domainAppId: w,\\n  environments: v\\n}, Symbol.toStringTag, { value: \\"Module\\" })), L = {\\n  AAD: 2,\\n  AED: 2,\\n  AFN: 2,\\n  ALL: 2,\\n  AMD: 2,\\n  ANG: 2,\\n  AOA: 2,\\n  ARS: 2,\\n  AUD: 2,\\n  AWG: 2,\\n  AZN: 2,\\n  BAM: 2,\\n  BBD: 2,\\n  BCH: 8,\\n  BDT: 2,\\n  BGN: 2,\\n  BHD: 3,\\n  BIF: 0,\\n  BMD: 2,\\n  BND: 2,\\n  BOB: 2,\\n  BOV: 2,\\n  BRL: 2,\\n  BSD: 2,\\n  BTC: 8,\\n  BTN: 2,\\n  BUSD: 2,\\n  BWP: 2,\\n  BYN: 2,\\n  BZD: 2,\\n  CAD: 2,\\n  CDF: 2,\\n  CHE: 2,\\n  CHF: 2,\\n  CHW: 2,\\n  CLF: 4,\\n  CLP: 0,\\n  CNY: 2,\\n  COP: 2,\\n  COU: 2,\\n  CRC: 2,\\n  CUC: 2,\\n  CUP: 2,\\n  CVE: 2,\\n  CZK: 2,\\n  DAI: 2,\\n  DJF: 0,\\n  DKK: 2,\\n  DOP: 2,\\n  DZD: 2,\\n  EGP: 2,\\n  ERN: 2,\\n  ETB: 2,\\n  ETC: 8,\\n  ETH: 8,\\n  EUR: 2,\\n  EURS: 2,\\n  eUSDT: 2,\\n  FJD: 2,\\n  FKP: 2,\\n  GBP: 2,\\n  GEL: 2,\\n  GHS: 2,\\n  GIP: 2,\\n  GMD: 2,\\n  GNF: 0,\\n  GTQ: 2,\\n  GYD: 2,\\n  HKD: 2,\\n  HNL: 2,\\n  HRK: 2,\\n  HTG: 2,\\n  HUF: 2,\\n  IDK: 0,\\n  IDR: 2,\\n  ILS: 2,\\n  INR: 2,\\n  IQD: 3,\\n  IRR: 2,\\n  ISK: 0,\\n  JMD: 2,\\n  JOD: 3,\\n  JPY: 0,\\n  KES: 2,\\n  KGS: 2,\\n  KHR: 2,\\n  KMF: 0,\\n  KPW: 2,\\n  KRW: 0,\\n  KWD: 3,\\n  KYD: 2,\\n  KZT: 2,\\n  LAK: 2,\\n  LBP: 2,\\n  LKR: 2,\\n  LRD: 2,\\n  LSL: 2,\\n  LTC: 8,\\n  LYD: 3,\\n  MAD: 2,\\n  MDL: 2,\\n  MGA: 2,\\n  MKD: 2,\\n  MMK: 2,\\n  MNT: 2,\\n  MOP: 2,\\n  MRU: 2,\\n  MUR: 2,\\n  MVR: 2,\\n  MWK: 2,\\n  MXN: 2,\\n  MXV: 2,\\n  MYR: 2,\\n  MZN: 2,\\n  NAD: 2,\\n  NGN: 2,\\n  NIO: 2,\\n  NOK: 2,\\n  NPR: 2,\\n  NZD: 2,\\n  OMR: 3,\\n  PAB: 2,\\n  PAX: 2,\\n  PEN: 2,\\n  PGK: 2,\\n  PHP: 2,\\n  PKR: 2,\\n  PLN: 2,\\n  PYG: 0,\\n  QAR: 2,\\n  RON: 2,\\n  RSD: 2,\\n  RUB: 2,\\n  RWF: 0,\\n  SAR: 2,\\n  SBD: 2,\\n  SCR: 2,\\n  SDG: 2,\\n  SEK: 2,\\n  SGD: 2,\\n  SHP: 2,\\n  SLL: 2,\\n  SOS: 2,\\n  SRD: 2,\\n  SSP: 2,\\n  STN: 2,\\n  SVC: 2,\\n  SYP: 2,\\n  SZL: 2,\\n  THB: 2,\\n  TJS: 2,\\n  TMT: 2,\\n  TND: 3,\\n  TOP: 2,\\n  TRY: 2,\\n  TTD: 2,\\n  TUSD: 2,\\n  tUSDT: 2,\\n  TWD: 2,\\n  TZS: 2,\\n  UAH: 2,\\n  UGX: 0,\\n  USB: 2,\\n  USD: 2,\\n  USDC: 2,\\n  USDK: 2,\\n  UST: 2,\\n  USN: 2,\\n  UYI: 0,\\n  UYU: 2,\\n  UYW: 4,\\n  UZS: 2,\\n  VES: 2,\\n  VND: 0,\\n  VUV: 0,\\n  WST: 2,\\n  XAF: 0,\\n  XCD: 2,\\n  XOF: 0,\\n  XPF: 0,\\n  YER: 2,\\n  ZAR: 2,\\n  ZMW: 2,\\n  ZWL: 2\\n}, He = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\\n  __proto__: null,\\n  precision: L\\n}, Symbol.toStringTag, { value: \\"Module\\" })), P = [\\"PNG\\", \\"JPG\\", \\"JPEG\\", \\"GIF\\", \\"PDF\\"], We = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\\n  __proto__: null,\\n  supportedDocumentFormats: P\\n}, Symbol.toStringTag, { value: \\"Module\\" })), T = \\"client.active_loginid\\", V = \\"client.account_list\\", J = \\"client.verify_email\\", O = \\"config.app_id\\", M = \\"config.server_url\\", p = \\"i18n_language\\", k = \\"ui.theme\\", X = \\"ui.show_report_drawer\\", Q = \\"ui.expand_account_switcher\\", q = \\"trader.layout\\", ee = \\"should_not_show_auto_archive_message_again\\", te = \\"order_ids\\", re = \\"should_show_p2p_guide\\", ne = \\"should_show_p2p_follow_user_guide\\", xe = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\\n  __proto__: null,\\n  accountList: V,\\n  activeLoginid: T,\\n  configAppId: O,\\n  configServerURL: M,\\n  i18nLanguage: p,\\n  lastVerifyEmail: J,\\n  p2pArchiveMessage: ee,\\n  p2pOrderIds: te,\\n  p2pShowFollowUserGuide: ne,\\n  p2pShowGuide: re,\\n  traderLayout: q,\\n  uiExpandAccountSwitcher: Q,\\n  uiShowReportsDrawer: X,\\n  uiTheme: k\\n}, Symbol.toStringTag, { value: \\"Module\\" })), h = \\"deriv.com\\", R = \\"deriv.me\\", N = \\"deriv.be\\", C = [h, N, R], f = typeof window < \\"u\\" && window.location.hostname.split(\\"app.\\")[1], d = C.includes(f) ? f : h, oe = `https://bot.${d}`, ae = `https://staging-bot.${d}`, se = `https://app.${d}`, ie = `https://staging-app.${d}`, U = `https://${d}`, $ = `https://eu.${d}`, ce = `https://staging.${d}`, de = d, le = `https://smarttrader.${d}`, ue = `https://staging-smarttrader.${d}`, ge = `https://p2p.${d}`, me = `https://staging-p2p.${d}`, pe = \\"https://wa.me/35699578341\\", Se = {\\n  lang: \\"lang\\",\\n  action: \\"action\\"\\n}, Ve = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\\n  __proto__: null,\\n  baseDomain: f,\\n  binaryBotProduction: oe,\\n  binaryBotStaging: ae,\\n  deriv: h,\\n  derivAppProduction: se,\\n  derivAppStaging: ie,\\n  derivBe: N,\\n  derivComProduction: U,\\n  derivComProductionEU: $,\\n  derivComStaging: ce,\\n  derivHost: de,\\n  derivMe: R,\\n  derivP2pProduction: ge,\\n  derivP2pStaging: me,\\n  domain: d,\\n  queryParameters: Se,\\n  smartTraderProduction: le,\\n  smartTraderStaging: ue,\\n  supportedDomains: C,\\n  whatsApp: pe\\n}, Symbol.toStringTag, { value: \\"Module\\" })), fe = {\\n  /**\\n   * Represents the special characters permitted in an address.\\n   * @remarks This is to be used in the message of the validation error, to let the user know which characters are permitted.\\n   * @example `Special characters permitted: ${ValidationConstants.messagesHints.addressPermittedSpecialCharacters}`\\n   */\\n  addressPermittedSpecialCharacters: \\". , \' : ; ( ) ° @ # / -\\"\\n}, Ae = {\\n  /**\\n   * @regex /^[\\\\p{L}\\\\p{Nd}\\\\s\'’.,:;()\\\\\\\\x{b0}@#/-]{0,70}$/u\\n   * @description\\n   * This pattern matches any string with no more than 70 characters, can contain letters, numbers, spaces, and any of the following special characters: \'’.,:;()@#/-.\\n   * @example ValidationConstants.patterns.address.test(\\"123 Main St.\\")\\n   * @example ValidationConstants.patterns.address.test(\\"Apt. 123\\")\\n   * @example ValidationConstants.patterns.address.test(\\"123 Main St. Apt. 123\\")\\n   **/\\n  address: /^[\\\\p{L}\\\\p{Nd}\\\\s\'’.,:;()\\\\\\\\x{b0}@#/-]{0,70}$/u,\\n  /**\\n   * @regex /^\\\\p{L}[\\\\p{L}\\\\s\'.-]{0,49}$/u\\n   * @description This pattern matches any string with no more than 50 characters.\\n   * @example ValidationConstants.patterns.addressCity.test(\\"Main St.\\")\\n   * @example ValidationConstants.patterns.addressCity.test(\\"Apt.\\")\\n   * @example ValidationConstants.patterns.addressCity.test(\\"Main St. Apt.\\")\\n   **/\\n  addressCity: new RegExp(\\"^\\\\\\\\p{L}[\\\\\\\\p{L}\\\\\\\\s\'.-]{0,49}$\\", \\"u\\"),\\n  /**\\n   * @regex /^[\\\\p{L}\\\\p{Nd}\\\\s\'.,-;]{0,100}$/u\\n   * @description This pattern matches any string that contains up to 100 characters composed of Unicode letters, Unicode digits, whitespace characters, apostrophes, periods, commas, hyphens, and semicolons ( \'.,-;).\\n   * @example ValidationConstants.patterns.addressState.test(\\"New York\\")\\n   * @example ValidationConstants.patterns.addressState.test(\\"Québec\\")\\n   **/\\n  addressState: /^[\\\\p{L}\\\\p{Nd}\\\\s\'.,-;]{0,100}$/u,\\n  /**\\n   * @regex /^(?=.{1,20}$)[+-]?[0-9]+\\\\.?[0-9]*$/\\n   * @description This pattern matches any string with 0-9 characters (numeric values. i.e. both integers and floats), and may contain a \'+\' or \'-\' sign.\\n   * @example ValidationConstants.patterns.barrier.test(\\"123\\")\\n   * @example ValidationConstants.patterns.barrier.test(\\"123.45\\")\\n   * @example ValidationConstants.patterns.barrier.test(\\"-123\\")\\n   * @example ValidationConstants.patterns.barrier.test(\\"-123.45\\")\\n   * @example ValidationConstants.patterns.barrier.test(\\"+123\\")\\n   * @example ValidationConstants.patterns.barrier.test(\\"+123.45\\")\\n   */\\n  barrier: /^(?=.{1,20}$)[+-]?[0-9]+\\\\.?[0-9]*$/,\\n  /**\\n   * @regex /^\\\\d*(\\\\.\\\\d+)?$/\\n   * @description This pattern matches any string that contains only numeric values, and may contain a decimal point.\\n   * @example ValidationConstants.patterns.decimal.test(\\"123\\")\\n   * @example ValidationConstants.patterns.decimal.test(\\"123.45\\")\\n   */\\n  decimal: /^\\\\d*(\\\\.\\\\d+)?$/,\\n  /**\\n   * @regex /^\\\\d+$/\\n   * @description This pattern matches any string that contains only numeric values.\\n   * @example ValidationConstants.patterns.integer.test(\\"123\\")\\n   * @example ValidationConstants.patterns.integer.test(\\"12345\\")\\n   */\\n  integer: /^\\\\d+$/,\\n  /**\\n   * @regex /p[.\\\\s]+o[.\\\\s]+box/i\\n   * @description This pattern matches any string that contains the characters \'p.o.box\' or \'p o box\'.\\n   * @example ValidationConstants.patterns.postalOfficeBoxNumber.test(\\"P.O. Box 1234\\")\\n   * @example ValidationConstants.patterns.postalOfficeBoxNumber.test(\\"p.o. box 1234\\")\\n   * @example ValidationConstants.patterns.postalOfficeBoxNumber.test(\\"P O Box 1234\\")\\n   * @example ValidationConstants.patterns.postalOfficeBoxNumber.test(\\"p o box 1234\\")\\n   */\\n  postalOfficeBoxNumber: /p[.\\\\s]+o[.\\\\s]+box/i,\\n  /**\\n   * @regex /^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,63}$/\\n   * @description This pattern matches any string with 2-63 characters, and contains aplhanumeric characters, an \'@\' sign, and may also contain any of these characters \'+,-._\'.\\n   * @example ValidationConstants.patterns.email.test(\\"doe@meme.me\\")\\n   * **/\\n  email: /^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,63}$/,\\n  /**\\n   * @regex /^(?=.*[a-z])(?=.*\\\\d)(?=.*[A-Z])[!-~]{8,25}$/\\n   * @description This pattern matches any string that contains 8-25 characters that include; at least one lowercase letter, at least one digit, at least one uppercase letter, and only printable ASCII characters (from \'!\' to \'~\')\\n   * @example ValidationConstants.patterns.password.test(\\"Password1!\\")\\n   **/\\n  password: /^(?=.*[a-z])(?=.*\\\\d)(?=.*[A-Z])[!-~]{8,25}$/,\\n  /**\\n   * @regex /^(?=.*[a-z])(?=.*[0-9])(?=.*[A-Z])[ -~]{6,50}$/\\n   * @description This pattern matches any string that contains 6-50 characters that include; at least one lowercase letter, at least one digit, at least one uppercase letter, and only printable ASCII characters (from \'!\' to \'~\')\\n   * @example ValidationConstants.patterns.affilliatePassword.test(\\"Password1\\")\\n   **/\\n  affilliatePassword: /^(?=.*[a-z])(?=.*[0-9])(?=.*[A-Z])[ -~]{6,50}$/,\\n  /**\\n   * @regex /^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{1,255}$/\\n   * @description This pattern matches any string with 1-255 characters, and contains aplhanumeric characters, an \'@\' sign, and may also contain any of these characters \'+,-._\'.\\n   * @example ValidationConstants.patterns.paymentAgentEmail.test(\\"doe@meme.us\\")\\n   **/\\n  paymentAgentEmail: /^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{1,255}$/,\\n  /**\\n   * @regex /^([A-Za-z0-9][A-Za-z0-9\\\\s-]{0,20})?$/\\n   * @description This pattern matches any string with no more than 20 characters and may not contain \'+\'.\\n   * @example ValidationConstants.patterns.postalCode.test(\\"123\\")\\n   * @example ValidationConstants.patterns.postalCode.test(\\"123-456\\")\\n   **/\\n  postalCode: /^([A-Za-z0-9][A-Za-z0-9\\\\s-]{0,20})?$/,\\n  /**\\n   * @regex /^(?!^$|\\\\s+)[A-Za-z0-9.\\\\/\\\\s-]{0,25}$/\\n   * @description This pattern matches any string with 0-25 characters, and may contain alphanumeric characters (both uppercase and lowercase), and any of these characters\'./-\', and or sapce characters\\n   * @example ValidationConstants.patterns.taxIdentificationNumber.test(\\"123\\")\\n   **/\\n  taxIdentificationNumber: /^(?!^$|\\\\s+)[A-Za-z0-9.\\\\/\\\\s-]{0,25}$/,\\n  /**\\n   * @regex /^\\\\+((-|\\\\s)*[0-9]){9,20}$/\\n   * @description This pattern matches any string that starts with a \'+\' character, followed by 9-20 digits, allowing hyphens or spaces.\\n   * @example ValidationConstants.patterns.phoneNumber.test(\\"+1234567890\\")\\n   **/\\n  phoneNumber: /^\\\\+((-|\\\\s)*[0-9]){9,20}$/,\\n  /**\\n   * @regex /(image|application)\\\\/(jpe?g|pdf|png)$/\\n   * @description This pattern matches any of the file types jpeg, jpg, pdf, or png.\\n   * @example ValidationConstants.patterns.fileType.test(\\"image/jpeg\\")\\n   * @example ValidationConstants.patterns.fileType.test(\\"application/pdf\\")\\n   * @example ValidationConstants.patterns.fileType.test(\\"image/png\\")\\n   * @example ValidationConstants.patterns.fileType.test(\\"image/jpg\\")\\n   **/\\n  fileType: /(image|application)\\\\/(jpe?g|pdf|png)$/,\\n  /**\\n   * @regex /(^\\\\d{4})\\\\s(\\\\d{2}X{2})\\\\s(X{4})\\\\s(\\\\d{4}$)/\\n   * @description This pattern matches any string that\'s formatted in the following format: 1234 56XX XXXX 1121.\\n   * @example ValidationConstants.patterns.formattedCardNumber.test(\\"1234 56XX XXXX 1121\\")\\n   **/\\n  formattedCardNumber: /(^\\\\d{4})\\\\s(\\\\d{2}X{2})\\\\s(X{4})\\\\s(\\\\d{4}$)/,\\n  /**\\n   * @regex /[^\\\\dX\\\\s]/\\n   * @description The is pattern matches any string that contains characters that aren\'t digits, the uppercase letter \'X\' and spaces.\\n   * @example ValidationConstants.patterns.invalidFormattedCardNumberCharacters.test(\\"9876-5432-1098\\")\\n   * @example ValidationConstants.patterns.invalidFormattedCardNumberCharacters.test(\\"9876 5432 1098\\")\\n   **/\\n  invalidFormattedCardNumberCharacters: /[^\\\\dX\\\\s]/,\\n  /**\\n   * @regex /^(?=.*[a-z])(?=.*[0-9])(?=.*[A-Z])(?=.*[!@#$%^&*()+\\\\-=\\\\[\\\\]{};\':\\\\\\"|,\\\\.<>\\\\?_~])[ -~]{8,16}$/\\n   * @description This pattern matches any string that contains 8-16 characters that include; at least one lowercase letter, at least one digit, at least one uppercase letter, and only printable ASCII characters (from \'!\' to \'~\')\\n   * @example ValidationConstants.patterns.tradingPlatformInvestorPassword.test(\\"Password1!$\\")\\n   **/\\n  tradingPlatformInvestorPassword: /^(?=.*[a-z])(?=.*[0-9])(?=.*[A-Z])(?=.*[!@#$%^&*()+\\\\-=\\\\[\\\\]{};\':\\\\\\"|,\\\\.<>\\\\?_~])[ -~]{8,16}$/,\\n  /**\\n   * @regex /^[A-Za-z]+([a-zA-Z.\' -])*[a-zA-Z.\' -]+$/\\n   * @description This pattern matches any string that starts with one or more letters (uppercase or lowercase), followed by zero or more occurrences of letters, and any of these characters (.\' -) and ends with one or more occurrences of letters, and any of these characters (.\' -).\\n   * @example ValidationConstants.patterns.letterSymbols.test(\\"John Doe\\")\\n   * @example ValidationConstants.patterns.letterSymbols.test(\\"John-Doe\\")\\n   * @example ValidationConstants.patterns.letterSymbols.test(\\"John O\'Doe\\")\\n   */\\n  letterSymbols: /^[A-Za-z]+([a-zA-Z.\' -])*[a-zA-Z.\' -]+$/,\\n  /**\\n   * @regex /^(?!.*\\\\s{2,})(?!\\\\s)[\\\\p{L}\\\\s\'.-]{1,50}$/u\\n   * @description This pattern matches any string that contains 1 to 50 characters, starts and ends with valid characters (letters, whitespace, period, single quote, or hyphen).\\n   * @example ValidationConstants.patterns.name.test(\\"John Doe\\")\\n   * @example ValidationConstants.patterns.name.test(\\"John-Doe\\")\\n   * @example ValidationConstants.patterns.name.test(\\"John O\'Doe\\")\\n   * @example ValidationConstants.patterns.name.test(\\"John O. Doe\\")\\n   */\\n  name: /^(?!.*\\\\s{2,})(?!\\\\s)[\\\\p{L}\\\\s\'.-]{1,50}$/u,\\n  /**\\n   * @regex /[`~!@#$%^&*)(_=+[}{\\\\]\\\\\\\\/\\";:?><|]+/\\n   * @description This pattern matches any string that contains any of these characters: `~!@#$%^&*)(_=+[}{\\\\]\\\\\\\\/\\";:?><|\\n   * @example ValidationConstants.patterns.general.test(\\"Password1!\\")\\n   */\\n  general: /[`~!@#$%^&*)(_=+[}{\\\\]\\\\\\\\/\\";:?><|]+/,\\n  /**\\n   * @regex /[a-z]/\\n   * @description This pattern matches any string that contains lowercase letters.\\n   * @example ValidationConstants.patterns.lowercase.test(\\"abc\\")\\n   */\\n  lowercase: /[a-z]/,\\n  /**\\n   * @regex /\\\\d/\\n   * @description This pattern matches any string that contains digits.\\n   * @example ValidationConstants.patterns.number.test(\\"pets123\\")\\n   */\\n  number: /\\\\d/,\\n  /**\\n   * @regex /\\\\W/\\n   * @description This pattern matches any string that contains special characters.\\n   * @example ValidationConstants.patterns.specialCharacter.test(\\"Password1!\\")\\n   */\\n  specialCharacter: /\\\\W/,\\n  /**\\n   * @regex /[A-Z]/\\n   * @description This pattern matches any string that contains uppercase letters.\\n   * @example ValidationConstants.patterns.uppercase.test(\\"ABC\\")\\n   */\\n  uppercase: /[A-Z]/,\\n  /**\\n   * @regex /^.{8,16}$/\\n   * @description This pattern matches any string that contains 8-16 characters.\\n   * @example ValidationConstants.patterns.between8and16Characters.test(\\"Password1!\\")\\n   */\\n  between8and16Characters: /^.{8,16}$/,\\n  /**\\n   * @regex /^.{8,25}$/\\n   * @description This pattern matches any string that contains 8-25 characters.\\n   * @example ValidationConstants.patterns.between8and25Characters.test(\\"Password1!\\")\\n   */\\n  between8and25Characters: /^.{8,25}$/\\n}, Je = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\\n  __proto__: null,\\n  messagesHints: fe,\\n  patterns: Ae\\n}, Symbol.toStringTag, { value: \\"Module\\" })), E = {\\n  brandName: \\"Deriv\\",\\n  domainName: \\"Deriv.com\\"\\n}, B = {\\n  fx: \\"Deriv (FX) Ltd\\",\\n  maltainvest: \\"Deriv Investments (Europe) Limited\\",\\n  svg: \\"Deriv (SVG) LLC\\",\\n  v: \\"Deriv (V) Ltd\\"\\n}, j = {\\n  trader: \\"Deriv Trader\\",\\n  dBot: \\"Deriv Bot\\",\\n  mt5: \\"Deriv MT5\\",\\n  cTrader: \\"Deriv cTrader\\",\\n  derivX: \\"Deriv X\\",\\n  smartTrader: \\"SmartTrader\\",\\n  bBot: \\"Binary Bot\\",\\n  go: \\"Deriv GO\\"\\n}, ke = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\\n  __proto__: null,\\n  brandConfig: E,\\n  landingCompanies: B,\\n  platforms: j\\n}, Symbol.toStringTag, { value: \\"Module\\" })), F = /(ALP-|AMN-|ANA-|ANE-|ANG-|AQM-|ARS-|ART-|ATU-|BAC-|BLA-|BRQ-|CAG-|CAM-|CAN-|CAZ-|CDL-|CDY-|CLT-|CRO-|CUN-|DIG-|DRA-|DUA-|DUB-|DVC-|ELE-|ELS-|EML-|EVA-|EVR-|FIG-|FLA-|FRL-|GLK-|HMA-|HW-|HWI-|INE-|JAT-|JEF-|JER-|JKM-|JNY-|JSC-|LDN-|LIO-|LON-|LUA-|LYA-|LYO-|MAR-|MED-|MHA-|MLA-|MRD-|MYA-|NCE-|NEO-|NOH-|NOP-|OCE-|PAR-|PIC-|POT-|PPA-|PRA-|RNE-|SEA-|SLA-|SNE-|SPN-|STK-|TAH-|TAS-|TET-|TRT-|VCE-|VIE-|VKY-|VNS-|VOG-|VTR-|WAS-|WKG-|WLZ-|JAD-|MLD-|RTE-|NAM-|NEN-|BAL-|JLN-|YAL-|MGA-|FGD-|XYAO-|BON-|ALN-|ALT-|BRA-|DBY2-|STG-|MAO-|LEM-|GOA-|FOA-|MNA-|LNA-)/, Xe = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\\n  __proto__: null,\\n  huaweiDevicesRegex: F\\n}, Symbol.toStringTag, { value: \\"Module\\" })), De = (e, t) => {\\n  try {\\n    const { locale: r = \\"en-US\\", currency: n, decimalPlaces: o } = t || {}, i = L[n ?? \\"USD\\"], a = o || i;\\n    return new Intl.NumberFormat(r, {\\n      minimumFractionDigits: a,\\n      maximumFractionDigits: a\\n    }).format(e);\\n  } catch {\\n    return e.toString();\\n  }\\n}, he = (e, t) => {\\n  let r;\\n  const {\\n    dateOptions: n = { day: \\"2-digit\\", month: \\"2-digit\\", year: \\"numeric\\" },\\n    format: o = \\"YYYY-MM-DD\\",\\n    unix: i = !1\\n  } = t || {}, a = { ...n };\\n  if (typeof e == \\"number\\" && i)\\n    r = new Date(e * 1e3);\\n  else if (typeof e == \\"string\\" || e instanceof Date) {\\n    if (r = new Date(e), isNaN(r.getTime()))\\n      throw new Error(\\"Invalid date input\\");\\n  } else\\n    throw new Error(\\"Invalid date input\\");\\n  switch (o) {\\n    case \\"DD MMM YYYY\\":\\n      a.day = \\"2-digit\\", a.month = \\"short\\", a.year = \\"numeric\\";\\n      break;\\n    case \\"MMM DD YYYY\\":\\n      return a.day = \\"2-digit\\", a.month = \\"short\\", a.year = \\"numeric\\", r.toLocaleDateString(\\"en-GB\\", a).replace(/(\\\\d{2}) (\\\\w{3}) (\\\\d{4})/, \\"$2 $1 $3\\");\\n    case \\"DD-MM-YYYY\\":\\n      return a.day = \\"2-digit\\", a.month = \\"2-digit\\", a.year = \\"numeric\\", r.toLocaleDateString(\\"en-GB\\", a).replace(/(\\\\d{2})\\\\/(\\\\d{2})\\\\/(\\\\d{4})/, \\"$1-$2-$3\\");\\n    default:\\n      a.year = \\"numeric\\", a.month = \\"2-digit\\", a.day = \\"2-digit\\";\\n      break;\\n  }\\n  const s = r.toLocaleDateString(\\"en-GB\\", a).replace(/(\\\\d{2}) (\\\\w{3,4}) (\\\\d{4})/, (c, l, u, m) => `${l} ${u.slice(0, 3)} ${m}`);\\n  return o === \\"YYYY-MM-DD\\" ? s.replace(/(\\\\d{2})\\\\/(\\\\d{2})\\\\/(\\\\d{4})/, \\"$3-$2-$1\\") : s;\\n}, _e = (e, t = !1) => {\\n  let r;\\n  if (typeof e == \\"number\\" && t)\\n    r = new Date(e * 1e3);\\n  else if (typeof e == \\"string\\" || e instanceof Date) {\\n    if (r = new Date(e), isNaN(r.getTime()))\\n      throw new Error(\\"Invalid date input\\");\\n  } else\\n    throw new Error(\\"Invalid date input\\");\\n  return `${r.getUTCHours().toString().padStart(2, \\"0\\")}:${r.getUTCMinutes().toString().padStart(2, \\"0\\")}:${r.getUTCSeconds().toString().padStart(2, \\"0\\")} GMT`;\\n}, ye = (e, t = \\"days\\", r = \\"add\\") => {\\n  if (e < 0)\\n    throw new Error(\\"Amount must be a positive number.\\");\\n  const n = /* @__PURE__ */ new Date(), o = r === \\"add\\" ? e : -e;\\n  return t === \\"years\\" ? n.setFullYear(n.getFullYear() + o) : t === \\"days\\" && n.setDate(n.getDate() + o), n;\\n}, be = (e) => {\\n  const t = e.split(/,\\\\s/), r = /:\\\\s([0-9a-zA-Z]+.{25,28})/gm.exec(t[0]), n = r == null ? void 0 : r[1], o = /:\\\\s([0-9a-zA-Z]+.{25,34})/gm.exec(t[1]), i = o == null ? void 0 : o[1];\\n  return { addressHash: n, blockchainHash: i, splitLongcode: t };\\n}, Qe = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\\n  __proto__: null,\\n  formatMoney: De,\\n  getAdjustedDate: ye,\\n  getFormattedDateString: he,\\n  getFormattedTimeString: _e,\\n  parseCryptoLongcode: be\\n}, Symbol.toStringTag, { value: \\"Module\\" })), y = 2560, ve = 0.9, we = 4, G = ({ src: e, filename: t, options: r }) => {\\n  const { maxWidth: n = y, quality: o = ve } = r || {};\\n  return new Promise((i, a) => {\\n    const s = new Image();\\n    s.src = e, s.onload = () => {\\n      const c = document.createElement(\\"canvas\\"), l = c.getContext(\\"2d\\");\\n      if (!l || !(l instanceof CanvasRenderingContext2D))\\n        return a(new Error(\\"Failed to get 2D context\\"));\\n      if (s.naturalWidth > n) {\\n        const u = y, m = u / s.naturalWidth;\\n        c.width = u, c.height = s.naturalHeight * m;\\n      } else\\n        c.width = s.naturalWidth, c.height = s.naturalHeight;\\n      l.fillStyle = \\"transparent\\", l.fillRect(0, 0, c.width, c.height), l.save(), l.drawImage(s, 0, 0, c.width, c.height), c.toBlob(\\n        (u) => {\\n          if (!u)\\n            return;\\n          const m = t.replace(/\\\\.[^/.]+$/, \\".jpg\\"), S = new Blob([u], { type: \\"image/jpeg\\" });\\n          S.lastModifiedDate = Date.now(), S.name = m, i(S);\\n        },\\n        \\"image/jpeg\\",\\n        o\\n      );\\n    };\\n  });\\n}, Y = (e) => new Promise((t) => {\\n  const r = new FileReader();\\n  r.readAsDataURL(e), r.onloadend = () => {\\n    var n;\\n    t({\\n      src: ((n = r.result) == null ? void 0 : n.toString()) || \\"\\",\\n      filename: e.name\\n    });\\n  };\\n}), z = (e) => e ? P.some(\\n  (t) => e.toUpperCase().endsWith(t)\\n) : !1, Le = (e) => new Promise((t) => {\\n  z(e.name) ? Y(e).then((r) => {\\n    G(r).then(t);\\n  }) : t(e);\\n});\\nfunction Pe(e, t = we) {\\n  const r = new Uint8Array(t);\\n  return new DataView(r.buffer).setUint32(0, e), r;\\n}\\nconst Te = (e, {\\n  chunkSize: t = 16384\\n  /* 16KB */\\n}) => {\\n  const r = [];\\n  for (let n = 0; n < e.length; n++) {\\n    const o = e[n];\\n    n % t === 0 ? r.push([o]) : r[r.length - 1].push(o);\\n  }\\n  return r.map((n) => new Uint8Array(n)).concat(new Uint8Array([]));\\n}, Oe = (e) => {\\n  const t = new FileReader();\\n  return new Promise((r) => {\\n    t.onload = () => {\\n      const n = {\\n        filename: e.name,\\n        buffer: t.result,\\n        fileSize: e.size\\n      };\\n      r(n);\\n    }, t.onerror = () => {\\n      r({\\n        message: `Unable to read file ${e.name}`\\n      });\\n    }, t.readAsArrayBuffer(e);\\n  });\\n}, qe = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\\n  __proto__: null,\\n  compressImage: G,\\n  compressImageFile: Le,\\n  convertToBase64: Y,\\n  generateChunks: Te,\\n  isSupportedImageFormat: z,\\n  numToUint8Array: Pe,\\n  readFile: Oe\\n}, Symbol.toStringTag, { value: \\"Module\\" })), g = (e) => {\\n  const t = localStorage.getItem(e);\\n  if (t !== \\"undefined\\") {\\n    if (t === null || t === \\"null\\")\\n      return null;\\n    try {\\n      return JSON.parse(t);\\n    } catch {\\n      return null;\\n    }\\n  }\\n}, Me = (e, t) => {\\n  localStorage.setItem(e, JSON.stringify(t));\\n}, et = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\\n  __proto__: null,\\n  getValue: g,\\n  setValue: Me\\n}, Symbol.toStringTag, { value: \\"Module\\" })), I = (e) => Object.keys(e).sort().reduce((t, r) => (t[r] = e[r], t), {}), Re = async (e) => {\\n  const t = new TextEncoder().encode(JSON.stringify(I(e))), r = await crypto.subtle.digest(\\"SHA-256\\", t);\\n  return Array.from(new Uint8Array(r)).map((i) => (\\"00\\" + i.toString(16)).slice(-2)).join(\\"\\");\\n}, Z = (e, t) => Array.isArray(e) && Array.isArray(t) ? t.map((r, n) => Z(e[n], r)) : typeof e == \\"object\\" && e !== null && typeof t == \\"object\\" && t !== null ? K(e, t) : t, K = (e, ...t) => {\\n  for (const r of t)\\n    for (const n in r)\\n      r[n] === null || r[n] === void 0 || (e[n] = Z(e[n], r[n]));\\n  return e;\\n}, tt = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\\n  __proto__: null,\\n  hashObject: Re,\\n  merge: K,\\n  sortObjectByKeys: I\\n}, Symbol.toStringTag, { value: \\"Module\\" }));\\nfunction Ne() {\\n  let e, t;\\n  return {\\n    promise: new Promise((n, o) => {\\n      e = n, t = o;\\n    }),\\n    resolve: e,\\n    reject: t\\n  };\\n}\\nconst rt = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\\n  __proto__: null,\\n  createPromise: Ne\\n}, Symbol.toStringTag, { value: \\"Module\\" })), H = () => {\\n  const t = new URLSearchParams(window.location.search).get(\\"acct1\\");\\n  return g(T) || t;\\n}, W = (e) => e && !/^VR/.test(e) ? \\"real\\" : \\"demo\\", _ = () => {\\n  const e = g(O);\\n  if (e)\\n    return e;\\n  const t = window.location.hostname, r = w[t];\\n  return r || \\"36300\\";\\n}, nt = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\\n  __proto__: null,\\n  getActiveLoginid: H,\\n  getAppId: _,\\n  getEnvironmentFromLoginid: W\\n}, Symbol.toStringTag, { value: \\"Module\\" })), Ce = () => {\\n  const e = [], t = [], r = new URLSearchParams(window.location.search);\\n  for (const [o, i] of r.entries()) {\\n    const a = o.match(/^acct(\\\\d+)/), s = o.match(/^token(\\\\d+)/), c = o.match(/^cur(\\\\d+)/);\\n    a && (e[+a[1] - 1] = {\\n      ...e[+a[1] - 1] || {},\\n      loginid: i\\n    }), s && (e[+s[1] - 1] = {\\n      ...e[+s[1] - 1] || {},\\n      token: i\\n    }), c && (e[+c[1] - 1] = {\\n      ...e[+c[1] - 1] || {},\\n      currency: i\\n    }), (/acct/.test(o) || /token/.test(o) || /cur/.test(o)) && t.push(o);\\n  }\\n  return { loginInfo: e.filter(\\n    (o) => [\\"loginid\\", \\"token\\", \\"currency\\"].every((i) => Object.keys(o).includes(i))\\n  ), paramsToDelete: t };\\n}, Ue = (e) => {\\n  if (e != null && e.length)\\n    return e.find((t) => /^VR/.test(t.loginid)) || e[0];\\n}, $e = (e) => {\\n  const t = new URLSearchParams(window.location.search);\\n  e.forEach((n) => t.delete(n));\\n  const r = `${window.location.pathname}${t.toString() ? `?${t.toString()}` : \\"\\"}`;\\n  window.history.pushState(null, \\"\\", r);\\n}, Ee = () => {\\n  const e = g(p) ?? \\"EN\\";\\n  return `https://oauth.deriv.com/oauth2/authorize?app_id=${_()}&l=${e}&brand=${D}`;\\n}, x = () => {\\n  const e = g(M);\\n  if (e)\\n    return e;\\n  const t = H();\\n  return v[W(t)];\\n}, Be = () => {\\n  const e = x(), t = g(p) ?? \\"EN\\";\\n  return `wss://${e}/websockets/v3?app_id=${_()}&l=${t}&brand=${D}`;\\n}, je = (e) => new URLSearchParams(window.location.search).get(e), A = (e) => e.replace(/(^\\\\/|\\\\/$|[^a-zA-Z0-9-_./()#])/g, \\"\\"), Fe = (e, t) => {\\n  var o;\\n  const r = t != null && t.isEU ? $ : U;\\n  let n = ((o = g(p)) == null ? void 0 : o.toLowerCase()) ?? \\"en\\";\\n  return n = n === \\"en\\" ? \\"\\" : `/${n.replace(\\"_\\", \\"-\\")}`, t != null && t.isDocument ? `${r}/${A(e)}` : `${r}${n}/${A(e)}`;\\n}, Ge = (e) => /^(((.*)\\\\.)?(localhost:8443|pages.dev|binary\\\\.(sx|com)|deriv.(com|me|be|dev)))$/.test(e), ot = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\\n  __proto__: null,\\n  filterSearchParams: $e,\\n  getDefaultActiveAccount: Ue,\\n  getDerivStaticURL: Fe,\\n  getLoginInfoFromURL: Ce,\\n  getOauthURL: Ee,\\n  getQueryParameter: je,\\n  getServerURL: x,\\n  getWebsocketURL: Be,\\n  isDomainAllowed: Ge,\\n  normalizePath: A\\n}, Symbol.toStringTag, { value: \\"Module\\" })), Ye = (e) => B[e], ze = () => E.domainName, Ie = (e) => j[e], at = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\\n  __proto__: null,\\n  getBrandWebsiteName: ze,\\n  getLegalLandingCompany: Ye,\\n  getPlatformName: Ie\\n}, Symbol.toStringTag, { value: \\"Module\\" })), b = (e) => F.test(e), Ze = async () => {\\n  const e = window, t = navigator, r = t.userAgent ?? e.opera ?? \\"\\";\\n  if (/windows phone/i.test(r))\\n    return \\"Windows Phone\\";\\n  if (/android/i.test(r)) {\\n    if (t.userAgentData) {\\n      const n = await t.userAgentData.getHighEntropyValues([\\"model\\"]);\\n      if (b((n == null ? void 0 : n.model) || \\"\\"))\\n        return \\"huawei\\";\\n    } else if (b(r) || /huawei/i.test(r))\\n      return \\"huawei\\";\\n    return \\"Android\\";\\n  }\\n  return /iPad|iPhone|iPod/.test(r) && !e.MSStream ? \\"iOS\\" : \\"unknown\\";\\n}, st = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\\n  __proto__: null,\\n  mobileOSDetectAsync: Ze\\n}, Symbol.toStringTag, { value: \\"Module\\" }));\\n\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///../../node_modules/@deriv-com/utils/dist/deriv-utils.js\\n");\n\n/***/ }),\n\n/***/ "../api/src/remote_config.json":\n/*!*************************************!*\\\n  !*** ../api/src/remote_config.json ***!\n  \\*************************************/\n/***/ ((module) => {\n\nmodule.exports = /*#__PURE__*/JSON.parse(\'{"cs_chat_livechat":true,"cs_chat_whatsapp":true,"marketing_growthbook":true,"passkeys":true,"tracking_GTM":true,"tracking_datadog":true,"tracking_hotjar":true,"tracking_rudderstack":true}\');\n\n/***/ })\n\n/******/ \t});\n/************************************************************************/\n/******/ \t// The module cache\n/******/ \tvar __webpack_module_cache__ = {};\n/******/ \t\n/******/ \t// The require function\n/******/ \tfunction __nested_webpack_require_137063__(moduleId) {\n/******/ \t\t// Check if module is in cache\n/******/ \t\tvar cachedModule = __webpack_module_cache__[moduleId];\n/******/ \t\tif (cachedModule !== undefined) {\n/******/ \t\t\treturn cachedModule.exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = __webpack_module_cache__[moduleId] = {\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/ \t\n/******/ \t\t// Execute the module function\n/******/ \t\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __nested_webpack_require_137063__);\n/******/ \t\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/ \t\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/ \t\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__nested_webpack_require_137063__.m = __webpack_modules__;\n/******/ \t\n/************************************************************************/\n/******/ \t/* webpack/runtime/chunk prefetch function */\n/******/ \t(() => {\n/******/ \t\t__nested_webpack_require_137063__.F = {};\n/******/ \t\t__nested_webpack_require_137063__.E = (chunkId) => {\n/******/ \t\t\tObject.keys(__nested_webpack_require_137063__.F).map((key) => {\n/******/ \t\t\t\t__nested_webpack_require_137063__.F[key](chunkId);\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/compat get default export */\n/******/ \t(() => {\n/******/ \t\t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t\t__nested_webpack_require_137063__.n = (module) => {\n/******/ \t\t\tvar getter = module && module.__esModule ?\n/******/ \t\t\t\t() => (module[\'default\']) :\n/******/ \t\t\t\t() => (module);\n/******/ \t\t\t__nested_webpack_require_137063__.d(getter, { a: getter });\n/******/ \t\t\treturn getter;\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/create fake namespace object */\n/******/ \t(() => {\n/******/ \t\tvar getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);\n/******/ \t\tvar leafPrototypes;\n/******/ \t\t// create a fake namespace object\n/******/ \t\t// mode & 1: value is a module id, require it\n/******/ \t\t// mode & 2: merge all properties of value into the ns\n/******/ \t\t// mode & 4: return value when already ns object\n/******/ \t\t// mode & 16: return value when it\'s Promise-like\n/******/ \t\t// mode & 8|1: behave like require\n/******/ \t\t__nested_webpack_require_137063__.t = function(value, mode) {\n/******/ \t\t\tif(mode & 1) value = this(value);\n/******/ \t\t\tif(mode & 8) return value;\n/******/ \t\t\tif(typeof value === \'object\' && value) {\n/******/ \t\t\t\tif((mode & 4) && value.__esModule) return value;\n/******/ \t\t\t\tif((mode & 16) && typeof value.then === \'function\') return value;\n/******/ \t\t\t}\n/******/ \t\t\tvar ns = Object.create(null);\n/******/ \t\t\t__nested_webpack_require_137063__.r(ns);\n/******/ \t\t\tvar def = {};\n/******/ \t\t\tleafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];\n/******/ \t\t\tfor(var current = mode & 2 && value; typeof current == \'object\' && !~leafPrototypes.indexOf(current); current = getProto(current)) {\n/******/ \t\t\t\tObject.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));\n/******/ \t\t\t}\n/******/ \t\t\tdef[\'default\'] = () => (value);\n/******/ \t\t\t__nested_webpack_require_137063__.d(ns, def);\n/******/ \t\t\treturn ns;\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/define property getters */\n/******/ \t(() => {\n/******/ \t\t// define getter functions for harmony exports\n/******/ \t\t__nested_webpack_require_137063__.d = (exports, definition) => {\n/******/ \t\t\tfor(var key in definition) {\n/******/ \t\t\t\tif(__nested_webpack_require_137063__.o(definition, key) && !__nested_webpack_require_137063__.o(exports, key)) {\n/******/ \t\t\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n/******/ \t\t\t\t}\n/******/ \t\t\t}\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/ensure chunk */\n/******/ \t(() => {\n/******/ \t\t__nested_webpack_require_137063__.f = {};\n/******/ \t\t// This file contains only the entry chunk.\n/******/ \t\t// The chunk loading function for additional chunks\n/******/ \t\t__nested_webpack_require_137063__.e = (chunkId) => {\n/******/ \t\t\treturn Promise.all(Object.keys(__nested_webpack_require_137063__.f).reduce((promises, key) => {\n/******/ \t\t\t\t__nested_webpack_require_137063__.f[key](chunkId, promises);\n/******/ \t\t\t\treturn promises;\n/******/ \t\t\t}, []));\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/get javascript chunk filename */\n/******/ \t(() => {\n/******/ \t\t// This function allow to reference async chunks\n/******/ \t\t__nested_webpack_require_137063__.u = (chunkId) => {\n/******/ \t\t\t// return url for filenames based on template\n/******/ \t\t\treturn "trader/js/trader." + chunkId + "." + {"vendors-node_modules_bowser_es5_js-node_modules_dayjs_dayjs_min_js-node_modules_lodash_deboun-bbb277":"ea039a3968b9755dce7c","vendors-node_modules_react-content-loader_dist_react-content-loader_es_js-node_modules_react--c10131":"bb9b637acb75f2bc0b39","src_sass_app_scss-src_App_Components_Elements_PositionsDrawer_helpers_index_ts-src_App_init-s-ba58f8":"bc50f57923b0d373c417","trader-app":"d6a958b1c1aa72f2c707","vendors-node_modules_cloudflare_stream-react_dist_stream-react_esm_js-node_modules_deriv_quil-145140":"b151140e4392e08e8291","hooks_src_useMFAccountStatus_ts-src_Modules_Trading_Helpers_video-config_ts-src_Stores_Module-77c64e":"c7ef8564d9c12971fd3a","src_Modules_Contract_Containers_replay-chart_tsx-src_Stores_Modules_Trading_Helpers_logic_ts":"e70c7cb8e98168f4f65a","trader-app-v2":"856e5138d6394c4f9ef5","trade-modals":"f810fb7a85dbbde834fc","error-component":"24fe6739097bd2958fce","contract":"d48ba04882fdaf30da0e","market-countdown-timer":"6c7dd69e0868bfaf09e9","vendors-node_modules_deriv_quill-icons_dist_esm_react_LabelPaired_LabelPairedChevronsDownCapt-dee9aa":"a892b030489a07309967","src_Modules_Trading_Components_Form_TradeParams_Accumulator_accumulators-info-display_tsx-src-a7086a":"a21f71a6946e2614ac2c","screen-small":"c858b22c43dc3ed38bca","screen-large":"a60af50b35100745109d","settings-chart":"c7928b5fa127035be512","accumulators-trade-description":"ba5bfc5072200c3ac964","multipliers-trade-description":"d4b029806bdc63056969","vanillas-trade-description":"0725da979f485569e402","turbos-trade-description":"c245100ce303d1e587a7","rise-fall-trade-description":"e324b6c707c7bbcb9667","higher-lower-trade-description":"505ef70265999bf94f01","touch-no-touch-trade-description":"ded06168f5c17efcf1e0","matches-differs-trade-description":"884aae61dfca1eea8ad4","even-odd-trade-description":"aa75f394e290d3abdb6c","over-under-trade-description":"ad377287b70b2811c746"}[chunkId] + ".js";\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/get mini-css chunk filename */\n/******/ \t(() => {\n/******/ \t\t// This function allow to reference all chunks\n/******/ \t\t__nested_webpack_require_137063__.miniCssF = (chunkId) => {\n/******/ \t\t\t// return url for filenames based on template\n/******/ \t\t\treturn "trader/css/trader." + chunkId + "." + {"vendors-node_modules_react-content-loader_dist_react-content-loader_es_js-node_modules_react--c10131":"d630feba8c2e422b9db7","src_sass_app_scss-src_App_Components_Elements_PositionsDrawer_helpers_index_ts-src_App_init-s-ba58f8":"c862b2fd63f51d3d5c9d","trader-app":"5ddbc3241bd08d4c1f45","vendors-node_modules_cloudflare_stream-react_dist_stream-react_esm_js-node_modules_deriv_quil-145140":"312127132a18695376b3","trader-app-v2":"e4732a5f63c30ed02aa6","trade-modals":"f8e55a1649c770a983e3","src_Modules_Trading_Components_Form_TradeParams_Accumulator_accumulators-info-display_tsx-src-a7086a":"49b24caa42dc827eda91","screen-small":"f2135244bbbed6ede430"}[chunkId] + ".css";\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/global */\n/******/ \t(() => {\n/******/ \t\t__nested_webpack_require_137063__.g = (function() {\n/******/ \t\t\tif (typeof globalThis === \'object\') return globalThis;\n/******/ \t\t\ttry {\n/******/ \t\t\t\treturn this || new Function(\'return this\')();\n/******/ \t\t\t} catch (e) {\n/******/ \t\t\t\tif (typeof window === \'object\') return window;\n/******/ \t\t\t}\n/******/ \t\t})();\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/hasOwnProperty shorthand */\n/******/ \t(() => {\n/******/ \t\t__nested_webpack_require_137063__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/load script */\n/******/ \t(() => {\n/******/ \t\tvar inProgress = {};\n/******/ \t\tvar dataWebpackPrefix = "@deriv/trader:";\n/******/ \t\t// loadScript function to load a script via script tag\n/******/ \t\t__nested_webpack_require_137063__.l = (url, done, key, chunkId) => {\n/******/ \t\t\tif(inProgress[url]) { inProgress[url].push(done); return; }\n/******/ \t\t\tvar script, needAttach;\n/******/ \t\t\tif(key !== undefined) {\n/******/ \t\t\t\tvar scripts = document.getElementsByTagName("script");\n/******/ \t\t\t\tfor(var i = 0; i < scripts.length; i++) {\n/******/ \t\t\t\t\tvar s = scripts[i];\n/******/ \t\t\t\t\tif(s.getAttribute("src") == url || s.getAttribute("data-webpack") == dataWebpackPrefix + key) { script = s; break; }\n/******/ \t\t\t\t}\n/******/ \t\t\t}\n/******/ \t\t\tif(!script) {\n/******/ \t\t\t\tneedAttach = true;\n/******/ \t\t\t\tscript = document.createElement(\'script\');\n/******/ \t\t\n/******/ \t\t\t\tscript.charset = \'utf-8\';\n/******/ \t\t\t\tscript.timeout = 120;\n/******/ \t\t\t\tif (__nested_webpack_require_137063__.nc) {\n/******/ \t\t\t\t\tscript.setAttribute("nonce", __nested_webpack_require_137063__.nc);\n/******/ \t\t\t\t}\n/******/ \t\t\t\tscript.setAttribute("data-webpack", dataWebpackPrefix + key);\n/******/ \t\t\n/******/ \t\t\t\tscript.src = url;\n/******/ \t\t\t}\n/******/ \t\t\tinProgress[url] = [done];\n/******/ \t\t\tvar onScriptComplete = (prev, event) => {\n/******/ \t\t\t\t// avoid mem leaks in IE.\n/******/ \t\t\t\tscript.onerror = script.onload = null;\n/******/ \t\t\t\tclearTimeout(timeout);\n/******/ \t\t\t\tvar doneFns = inProgress[url];\n/******/ \t\t\t\tdelete inProgress[url];\n/******/ \t\t\t\tscript.parentNode && script.parentNode.removeChild(script);\n/******/ \t\t\t\tdoneFns && doneFns.forEach((fn) => (fn(event)));\n/******/ \t\t\t\tif(prev) return prev(event);\n/******/ \t\t\t}\n/******/ \t\t\tvar timeout = setTimeout(onScriptComplete.bind(null, undefined, { type: \'timeout\', target: script }), 120000);\n/******/ \t\t\tscript.onerror = onScriptComplete.bind(null, script.onerror);\n/******/ \t\t\tscript.onload = onScriptComplete.bind(null, script.onload);\n/******/ \t\t\tneedAttach && document.head.appendChild(script);\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/make namespace object */\n/******/ \t(() => {\n/******/ \t\t// define __esModule on exports\n/******/ \t\t__nested_webpack_require_137063__.r = (exports) => {\n/******/ \t\t\tif(typeof Symbol !== \'undefined\' && Symbol.toStringTag) {\n/******/ \t\t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: \'Module\' });\n/******/ \t\t\t}\n/******/ \t\t\tObject.defineProperty(exports, \'__esModule\', { value: true });\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/node module decorator */\n/******/ \t(() => {\n/******/ \t\t__nested_webpack_require_137063__.nmd = (module) => {\n/******/ \t\t\tmodule.paths = [];\n/******/ \t\t\tif (!module.children) module.children = [];\n/******/ \t\t\treturn module;\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/publicPath */\n/******/ \t(() => {\n/******/ \t\t__nested_webpack_require_137063__.p = "/";\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/css loading */\n/******/ \t(() => {\n/******/ \t\tvar createStylesheet = (chunkId, fullhref, resolve, reject) => {\n/******/ \t\t\tvar linkTag = document.createElement("link");\n/******/ \t\t\n/******/ \t\t\tlinkTag.rel = "stylesheet";\n/******/ \t\t\tlinkTag.type = "text/css";\n/******/ \t\t\tvar onLinkComplete = (event) => {\n/******/ \t\t\t\t// avoid mem leaks.\n/******/ \t\t\t\tlinkTag.onerror = linkTag.onload = null;\n/******/ \t\t\t\tif (event.type === \'load\') {\n/******/ \t\t\t\t\tresolve();\n/******/ \t\t\t\t} else {\n/******/ \t\t\t\t\tvar errorType = event && (event.type === \'load\' ? \'missing\' : event.type);\n/******/ \t\t\t\t\tvar realHref = event && event.target && event.target.href || fullhref;\n/******/ \t\t\t\t\tvar err = new Error("Loading CSS chunk " + chunkId + " failed.\\n(" + realHref + ")");\n/******/ \t\t\t\t\terr.code = "CSS_CHUNK_LOAD_FAILED";\n/******/ \t\t\t\t\terr.type = errorType;\n/******/ \t\t\t\t\terr.request = realHref;\n/******/ \t\t\t\t\tlinkTag.parentNode.removeChild(linkTag)\n/******/ \t\t\t\t\treject(err);\n/******/ \t\t\t\t}\n/******/ \t\t\t}\n/******/ \t\t\tlinkTag.onerror = linkTag.onload = onLinkComplete;\n/******/ \t\t\tlinkTag.href = fullhref;\n/******/ \t\t\n/******/ \t\t\tdocument.head.appendChild(linkTag);\n/******/ \t\t\treturn linkTag;\n/******/ \t\t};\n/******/ \t\tvar findStylesheet = (href, fullhref) => {\n/******/ \t\t\tvar existingLinkTags = document.getElementsByTagName("link");\n/******/ \t\t\tfor(var i = 0; i < existingLinkTags.length; i++) {\n/******/ \t\t\t\tvar tag = existingLinkTags[i];\n/******/ \t\t\t\tvar dataHref = tag.getAttribute("data-href") || tag.getAttribute("href");\n/******/ \t\t\t\tif(tag.rel === "stylesheet" && (dataHref === href || dataHref === fullhref)) return tag;\n/******/ \t\t\t}\n/******/ \t\t\tvar existingStyleTags = document.getElementsByTagName("style");\n/******/ \t\t\tfor(var i = 0; i < existingStyleTags.length; i++) {\n/******/ \t\t\t\tvar tag = existingStyleTags[i];\n/******/ \t\t\t\tvar dataHref = tag.getAttribute("data-href");\n/******/ \t\t\t\tif(dataHref === href || dataHref === fullhref) return tag;\n/******/ \t\t\t}\n/******/ \t\t};\n/******/ \t\tvar loadStylesheet = (chunkId) => {\n/******/ \t\t\treturn new Promise((resolve, reject) => {\n/******/ \t\t\t\tvar href = __nested_webpack_require_137063__.miniCssF(chunkId);\n/******/ \t\t\t\tvar fullhref = __nested_webpack_require_137063__.p + href;\n/******/ \t\t\t\tif(findStylesheet(href, fullhref)) return resolve();\n/******/ \t\t\t\tcreateStylesheet(chunkId, fullhref, resolve, reject);\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t\t// object to store loaded CSS chunks\n/******/ \t\tvar installedCssChunks = {\n/******/ \t\t\t"trader": 0\n/******/ \t\t};\n/******/ \t\t\n/******/ \t\t__nested_webpack_require_137063__.f.miniCss = (chunkId, promises) => {\n/******/ \t\t\tvar cssChunks = {"vendors-node_modules_react-content-loader_dist_react-content-loader_es_js-node_modules_react--c10131":1,"src_sass_app_scss-src_App_Components_Elements_PositionsDrawer_helpers_index_ts-src_App_init-s-ba58f8":1,"trader-app":1,"vendors-node_modules_cloudflare_stream-react_dist_stream-react_esm_js-node_modules_deriv_quil-145140":1,"trader-app-v2":1,"trade-modals":1,"src_Modules_Trading_Components_Form_TradeParams_Accumulator_accumulators-info-display_tsx-src-a7086a":1,"screen-small":1};\n/******/ \t\t\tif(installedCssChunks[chunkId]) promises.push(installedCssChunks[chunkId]);\n/******/ \t\t\telse if(installedCssChunks[chunkId] !== 0 && cssChunks[chunkId]) {\n/******/ \t\t\t\tpromises.push(installedCssChunks[chunkId] = loadStylesheet(chunkId).then(() => {\n/******/ \t\t\t\t\tinstalledCssChunks[chunkId] = 0;\n/******/ \t\t\t\t}, (e) => {\n/******/ \t\t\t\t\tdelete installedCssChunks[chunkId];\n/******/ \t\t\t\t\tthrow e;\n/******/ \t\t\t\t}));\n/******/ \t\t\t}\n/******/ \t\t};\n/******/ \t\t\n/******/ \t\t// no hmr\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/jsonp chunk loading */\n/******/ \t(() => {\n/******/ \t\t// no baseURI\n/******/ \t\t\n/******/ \t\t// object to store loaded and loading chunks\n/******/ \t\t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n/******/ \t\t// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\n/******/ \t\tvar installedChunks = {\n/******/ \t\t\t"trader": 0\n/******/ \t\t};\n/******/ \t\t\n/******/ \t\t__nested_webpack_require_137063__.f.j = (chunkId, promises) => {\n/******/ \t\t\t\t// JSONP chunk loading for javascript\n/******/ \t\t\t\tvar installedChunkData = __nested_webpack_require_137063__.o(installedChunks, chunkId) ? installedChunks[chunkId] : undefined;\n/******/ \t\t\t\tif(installedChunkData !== 0) { // 0 means "already installed".\n/******/ \t\t\n/******/ \t\t\t\t\t// a Promise means "currently loading".\n/******/ \t\t\t\t\tif(installedChunkData) {\n/******/ \t\t\t\t\t\tpromises.push(installedChunkData[2]);\n/******/ \t\t\t\t\t} else {\n/******/ \t\t\t\t\t\tif(true) { // all chunks have JS\n/******/ \t\t\t\t\t\t\t// setup Promise in chunk cache\n/******/ \t\t\t\t\t\t\tvar promise = new Promise((resolve, reject) => (installedChunkData = installedChunks[chunkId] = [resolve, reject]));\n/******/ \t\t\t\t\t\t\tpromises.push(installedChunkData[2] = promise);\n/******/ \t\t\n/******/ \t\t\t\t\t\t\t// start chunk loading\n/******/ \t\t\t\t\t\t\tvar url = __nested_webpack_require_137063__.p + __nested_webpack_require_137063__.u(chunkId);\n/******/ \t\t\t\t\t\t\t// create error before stack unwound to get useful stacktrace later\n/******/ \t\t\t\t\t\t\tvar error = new Error();\n/******/ \t\t\t\t\t\t\tvar loadingEnded = (event) => {\n/******/ \t\t\t\t\t\t\t\tif(__nested_webpack_require_137063__.o(installedChunks, chunkId)) {\n/******/ \t\t\t\t\t\t\t\t\tinstalledChunkData = installedChunks[chunkId];\n/******/ \t\t\t\t\t\t\t\t\tif(installedChunkData !== 0) installedChunks[chunkId] = undefined;\n/******/ \t\t\t\t\t\t\t\t\tif(installedChunkData) {\n/******/ \t\t\t\t\t\t\t\t\t\tvar errorType = event && (event.type === \'load\' ? \'missing\' : event.type);\n/******/ \t\t\t\t\t\t\t\t\t\tvar realSrc = event && event.target && event.target.src;\n/******/ \t\t\t\t\t\t\t\t\t\terror.message = \'Loading chunk \' + chunkId + \' failed.\\n(\' + errorType + \': \' + realSrc + \')\';\n/******/ \t\t\t\t\t\t\t\t\t\terror.name = \'ChunkLoadError\';\n/******/ \t\t\t\t\t\t\t\t\t\terror.type = errorType;\n/******/ \t\t\t\t\t\t\t\t\t\terror.request = realSrc;\n/******/ \t\t\t\t\t\t\t\t\t\tinstalledChunkData[1](error);\n/******/ \t\t\t\t\t\t\t\t\t}\n/******/ \t\t\t\t\t\t\t\t}\n/******/ \t\t\t\t\t\t\t};\n/******/ \t\t\t\t\t\t\t__nested_webpack_require_137063__.l(url, loadingEnded, "chunk-" + chunkId, chunkId);\n/******/ \t\t\t\t\t\t}\n/******/ \t\t\t\t\t}\n/******/ \t\t\t\t}\n/******/ \t\t};\n/******/ \t\t\n/******/ \t\t__nested_webpack_require_137063__.F.j = (chunkId) => {\n/******/ \t\t\tif((!__nested_webpack_require_137063__.o(installedChunks, chunkId) || installedChunks[chunkId] === undefined) && true) {\n/******/ \t\t\t\tinstalledChunks[chunkId] = null;\n/******/ \t\t\t\tvar link = document.createElement(\'link\');\n/******/ \t\t\n/******/ \t\t\t\tif (__nested_webpack_require_137063__.nc) {\n/******/ \t\t\t\t\tlink.setAttribute("nonce", __nested_webpack_require_137063__.nc);\n/******/ \t\t\t\t}\n/******/ \t\t\t\tlink.rel = "prefetch";\n/******/ \t\t\t\tlink.as = "script";\n/******/ \t\t\t\tlink.href = __nested_webpack_require_137063__.p + __nested_webpack_require_137063__.u(chunkId);\n/******/ \t\t\t\tdocument.head.appendChild(link);\n/******/ \t\t\t}\n/******/ \t\t};\n/******/ \t\t\n/******/ \t\t// no preloaded\n/******/ \t\t\n/******/ \t\t// no HMR\n/******/ \t\t\n/******/ \t\t// no HMR manifest\n/******/ \t\t\n/******/ \t\t// no on chunks loaded\n/******/ \t\t\n/******/ \t\t// install a JSONP callback for chunk loading\n/******/ \t\tvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n/******/ \t\t\tvar [chunkIds, moreModules, runtime] = data;\n/******/ \t\t\t// add "moreModules" to the modules object,\n/******/ \t\t\t// then flag all "chunkIds" as loaded and fire callback\n/******/ \t\t\tvar moduleId, chunkId, i = 0;\n/******/ \t\t\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n/******/ \t\t\t\tfor(moduleId in moreModules) {\n/******/ \t\t\t\t\tif(__nested_webpack_require_137063__.o(moreModules, moduleId)) {\n/******/ \t\t\t\t\t\t__nested_webpack_require_137063__.m[moduleId] = moreModules[moduleId];\n/******/ \t\t\t\t\t}\n/******/ \t\t\t\t}\n/******/ \t\t\t\tif(runtime) var result = runtime(__nested_webpack_require_137063__);\n/******/ \t\t\t}\n/******/ \t\t\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n/******/ \t\t\tfor(;i < chunkIds.length; i++) {\n/******/ \t\t\t\tchunkId = chunkIds[i];\n/******/ \t\t\t\tif(__nested_webpack_require_137063__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n/******/ \t\t\t\t\tinstalledChunks[chunkId][0]();\n/******/ \t\t\t\t}\n/******/ \t\t\t\tinstalledChunks[chunkId] = 0;\n/******/ \t\t\t}\n/******/ \t\t\n/******/ \t\t}\n/******/ \t\t\n/******/ \t\tvar chunkLoadingGlobal = self["webpackChunk_deriv_trader"] = self["webpackChunk_deriv_trader"] || [];\n/******/ \t\tchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\n/******/ \t\tchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/chunk prefetch trigger */\n/******/ \t(() => {\n/******/ \t\tvar chunkToChildrenMap = {\n/******/ \t\t\t"trader-app": [\n/******/ \t\t\t\t"trade-modals",\n/******/ \t\t\t\t"settings-chart"\n/******/ \t\t\t]\n/******/ \t\t};\n/******/ \t\t__nested_webpack_require_137063__.f.prefetch = (chunkId, promises) => (Promise.all(promises).then(() => {\n/******/ \t\t\tvar chunks = chunkToChildrenMap[chunkId];\n/******/ \t\t\tArray.isArray(chunks) && chunks.map(__nested_webpack_require_137063__.E);\n/******/ \t\t}));\n/******/ \t})();\n/******/ \t\n/************************************************************************/\n/******/ \t\n/******/ \t// module factories are used so entry inlining is disabled\n/******/ \t// startup\n/******/ \t// Load entry module and return exports\n/******/ \tvar __nested_webpack_exports__ = __nested_webpack_require_137063__("./src/index.tsx");\n/******/ \t__nested_webpack_exports__ = __nested_webpack_exports__["default"];\n/******/ \t\n/******/ \treturn __nested_webpack_exports__;\n/******/ })()\n;\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vdHJhZGVyL2Rpc3QvdHJhZGVyL2pzL3RyYWRlci5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFNQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4uLy4uL3RyYWRlci9kaXN0L3RyYWRlci9qcy90cmFkZXIuanM/NGU1OSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQVRURU5USU9OOiBBbiBcImV2YWwtc291cmNlLW1hcFwiIGRldnRvb2wgaGFzIGJlZW4gdXNlZC5cbiAqIFRoaXMgZGV2dG9vbCBpcyBuZWl0aGVyIG1hZGUgZm9yIHByb2R1Y3Rpb24gbm9yIGZvciByZWFkYWJsZSBvdXRwdXQgZmlsZXMuXG4gKiBJdCB1c2VzIFwiZXZhbCgpXCIgY2FsbHMgdG8gY3JlYXRlIGEgc2VwYXJhdGUgc291cmNlIGZpbGUgd2l0aCBhdHRhY2hlZCBTb3VyY2VNYXBzIGluIHRoZSBicm93c2VyIGRldnRvb2xzLlxuICogSWYgeW91IGFyZSB0cnlpbmcgdG8gcmVhZCB0aGUgb3V0cHV0IGZpbGUsIHNlbGVjdCBhIGRpZmZlcmVudCBkZXZ0b29sIChodHRwczovL3dlYnBhY2suanMub3JnL2NvbmZpZ3VyYXRpb24vZGV2dG9vbC8pXG4gKiBvciBkaXNhYmxlIHRoZSBkZWZhdWx0IGRldnRvb2wgd2l0aCBcImRldnRvb2w6IGZhbHNlXCIuXG4gKiBJZiB5b3UgYXJlIGxvb2tpbmcgZm9yIHByb2R1Y3Rpb24tcmVhZHkgb3V0cHV0IGZpbGVzLCBzZWUgbW9kZTogXCJwcm9kdWN0aW9uXCIgKGh0dHBzOi8vd2VicGFjay5qcy5vcmcvY29uZmlndXJhdGlvbi9tb2RlLykuXG4gKi9cbihmdW5jdGlvbiB3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbihyb290LCBmYWN0b3J5KSB7XG5cdGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jylcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkocmVxdWlyZShcIkBkZXJpdi1jb20vYW5hbHl0aWNzXCIpLCByZXF1aXJlKFwiQGRlcml2L2NvbXBvbmVudHNcIiksIHJlcXVpcmUoXCJAZGVyaXYvZGVyaXYtY2hhcnRzXCIpLCByZXF1aXJlKFwiQGRlcml2L3NoYXJlZFwiKSwgcmVxdWlyZShcIkBkZXJpdi9zaGFyZWQvc3JjL3V0aWxzL3BsYXRmb3JtL3BsYXRmb3JtXCIpLCByZXF1aXJlKFwiQGRlcml2L3RyYW5zbGF0aW9uc1wiKSwgcmVxdWlyZShcIm1vYnhcIiksIHJlcXVpcmUoXCJtb2J4LXJlYWN0XCIpLCByZXF1aXJlKFwicmVhY3RcIiksIHJlcXVpcmUoXCJyZWFjdC1kb21cIiksIHJlcXVpcmUoXCJyZWFjdC1yb3V0ZXJcIiksIHJlcXVpcmUoXCJyZWFjdC1yb3V0ZXItZG9tXCIpKTtcblx0ZWxzZSBpZih0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpXG5cdFx0ZGVmaW5lKFtcIkBkZXJpdi1jb20vYW5hbHl0aWNzXCIsIFwiQGRlcml2L2NvbXBvbmVudHNcIiwgXCJAZGVyaXYvZGVyaXYtY2hhcnRzXCIsIFwiQGRlcml2L3NoYXJlZFwiLCBcIkBkZXJpdi9zaGFyZWQvc3JjL3V0aWxzL3BsYXRmb3JtL3BsYXRmb3JtXCIsIFwiQGRlcml2L3RyYW5zbGF0aW9uc1wiLCBcIm1vYnhcIiwgXCJtb2J4LXJlYWN0XCIsIFwicmVhY3RcIiwgXCJyZWFjdC1kb21cIiwgXCJyZWFjdC1yb3V0ZXJcIiwgXCJyZWFjdC1yb3V0ZXItZG9tXCJdLCBmYWN0b3J5KTtcblx0ZWxzZSBpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpXG5cdFx0ZXhwb3J0c1tcIkBkZXJpdi90cmFkZXJcIl0gPSBmYWN0b3J5KHJlcXVpcmUoXCJAZGVyaXYtY29tL2FuYWx5dGljc1wiKSwgcmVxdWlyZShcIkBkZXJpdi9jb21wb25lbnRzXCIpLCByZXF1aXJlKFwiQGRlcml2L2Rlcml2LWNoYXJ0c1wiKSwgcmVxdWlyZShcIkBkZXJpdi9zaGFyZWRcIiksIHJlcXVpcmUoXCJAZGVyaXYvc2hhcmVkL3NyYy91dGlscy9wbGF0Zm9ybS9wbGF0Zm9ybVwiKSwgcmVxdWlyZShcIkBkZXJpdi90cmFuc2xhdGlvbnNcIiksIHJlcXVpcmUoXCJtb2J4XCIpLCByZXF1aXJlKFwibW9ieC1yZWFjdFwiKSwgcmVxdWlyZShcInJlYWN0XCIpLCByZXF1aXJlKFwicmVhY3QtZG9tXCIpLCByZXF1aXJlKFwicmVhY3Qtcm91dGVyXCIpLCByZXF1aXJlKFwicmVhY3Qtcm91dGVyLWRvbVwiKSk7XG5cdGVsc2Vcblx0XHRyb290W1wiQGRlcml2L3RyYWRlclwiXSA9IGZhY3Rvcnkocm9vdFtcIkBkZXJpdi1jb20vYW5hbHl0aWNzXCJdLCByb290W1wiQGRlcml2L2NvbXBvbmVudHNcIl0sIHJvb3RbXCJAZGVyaXYvZGVyaXYtY2hhcnRzXCJdLCByb290W1wiQGRlcml2L3NoYXJlZFwiXSwgcm9vdFtcIkBkZXJpdi9zaGFyZWQvc3JjL3V0aWxzL3BsYXRmb3JtL3BsYXRmb3JtXCJdLCByb290W1wiQGRlcml2L3RyYW5zbGF0aW9uc1wiXSwgcm9vdFtcIm1vYnhcIl0sIHJvb3RbXCJtb2J4LXJlYWN0XCJdLCByb290W1wicmVhY3RcIl0sIHJvb3RbXCJyZWFjdC1kb21cIl0sIHJvb3RbXCJyZWFjdC1yb3V0ZXJcIl0sIHJvb3RbXCJyZWFjdC1yb3V0ZXItZG9tXCJdKTtcbn0pKHNlbGYsIChfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX19kZXJpdl9jb21fYW5hbHl0aWNzX18sIF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfX2Rlcml2X2NvbXBvbmVudHNfXywgX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9fZGVyaXZfZGVyaXZfY2hhcnRzX18sIF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfX2Rlcml2X3NoYXJlZF9fLCBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX19kZXJpdl9zaGFyZWRfc3JjX3V0aWxzX3BsYXRmb3JtX3BsYXRmb3JtX18sIF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfX2Rlcml2X3RyYW5zbGF0aW9uc19fLCBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX21vYnhfXywgX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9tb2J4X3JlYWN0X18sIF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfcmVhY3RfXywgX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9yZWFjdF9kb21fXywgX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9yZWFjdF9yb3V0ZXJfXywgX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9yZWFjdF9yb3V0ZXJfZG9tX18pID0+IHtcbnJldHVybiAvKioqKioqLyAoKCkgPT4geyAvLyB3ZWJwYWNrQm9vdHN0cmFwXG4vKioqKioqLyBcdFwidXNlIHN0cmljdFwiO1xuLyoqKioqKi8gXHR2YXIgX193ZWJwYWNrX21vZHVsZXNfXyA9ICh7XG5cbi8qKiovIFwiLi4vYXBpL3NyYy9ob29rcy91c2VSZW1vdGVDb25maWcudHNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi4vYXBpL3NyYy9ob29rcy91c2VSZW1vdGVDb25maWcudHMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cbmV2YWwoXCJfX3dlYnBhY2tfcmVxdWlyZV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyk7XFxuLyogaGFybW9ueSBleHBvcnQgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIHtcXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFxcXCJkZWZhdWx0XFxcIjogKCkgPT4gKF9fV0VCUEFDS19ERUZBVUxUX0VYUE9SVF9fKVxcbi8qIGhhcm1vbnkgZXhwb3J0ICovIH0pO1xcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciByZWFjdF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgcmVhY3QgKi8gXFxcInJlYWN0XFxcIik7XFxuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIHJlYWN0X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdCA9IC8qI19fUFVSRV9fKi9fX3dlYnBhY2tfcmVxdWlyZV9fLm4ocmVhY3RfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyk7XFxuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9kZXJpdl9jb21fdXRpbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIEBkZXJpdi1jb20vdXRpbHMgKi8gXFxcIi4uLy4uL25vZGVfbW9kdWxlcy9AZGVyaXYtY29tL3V0aWxzL2Rpc3QvZGVyaXYtdXRpbHMuanNcXFwiKTtcXG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX3JlbW90ZV9jb25maWdfanNvbl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vcmVtb3RlX2NvbmZpZy5qc29uICovIFxcXCIuLi9hcGkvc3JjL3JlbW90ZV9jb25maWcuanNvblxcXCIpO1xcbmZ1bmN0aW9uIF90eXBlb2YobykgeyBcXFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcXFwiOyByZXR1cm4gX3R5cGVvZiA9IFxcXCJmdW5jdGlvblxcXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBcXFwic3ltYm9sXFxcIiA9PSB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID8gZnVuY3Rpb24gKG8pIHsgcmV0dXJuIHR5cGVvZiBvOyB9IDogZnVuY3Rpb24gKG8pIHsgcmV0dXJuIG8gJiYgXFxcImZ1bmN0aW9uXFxcIiA9PSB0eXBlb2YgU3ltYm9sICYmIG8uY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvICE9PSBTeW1ib2wucHJvdG90eXBlID8gXFxcInN5bWJvbFxcXCIgOiB0eXBlb2YgbzsgfSwgX3R5cGVvZihvKTsgfVxcbmZ1bmN0aW9uIF9zbGljZWRUb0FycmF5KHIsIGUpIHsgcmV0dXJuIF9hcnJheVdpdGhIb2xlcyhyKSB8fCBfaXRlcmFibGVUb0FycmF5TGltaXQociwgZSkgfHwgX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KHIsIGUpIHx8IF9ub25JdGVyYWJsZVJlc3QoKTsgfVxcbmZ1bmN0aW9uIF9ub25JdGVyYWJsZVJlc3QoKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXFxcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxcXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXFxcIik7IH1cXG5mdW5jdGlvbiBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkociwgYSkgeyBpZiAocikgeyBpZiAoXFxcInN0cmluZ1xcXCIgPT0gdHlwZW9mIHIpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShyLCBhKTsgdmFyIHQgPSB7fS50b1N0cmluZy5jYWxsKHIpLnNsaWNlKDgsIC0xKTsgcmV0dXJuIFxcXCJPYmplY3RcXFwiID09PSB0ICYmIHIuY29uc3RydWN0b3IgJiYgKHQgPSByLmNvbnN0cnVjdG9yLm5hbWUpLCBcXFwiTWFwXFxcIiA9PT0gdCB8fCBcXFwiU2V0XFxcIiA9PT0gdCA/IEFycmF5LmZyb20ocikgOiBcXFwiQXJndW1lbnRzXFxcIiA9PT0gdCB8fCAvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdCh0KSA/IF9hcnJheUxpa2VUb0FycmF5KHIsIGEpIDogdm9pZCAwOyB9IH1cXG5mdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShyLCBhKSB7IChudWxsID09IGEgfHwgYSA+IHIubGVuZ3RoKSAmJiAoYSA9IHIubGVuZ3RoKTsgZm9yICh2YXIgZSA9IDAsIG4gPSBBcnJheShhKTsgZSA8IGE7IGUrKykgbltlXSA9IHJbZV07IHJldHVybiBuOyB9XFxuZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheUxpbWl0KHIsIGwpIHsgdmFyIHQgPSBudWxsID09IHIgPyBudWxsIDogXFxcInVuZGVmaW5lZFxcXCIgIT0gdHlwZW9mIFN5bWJvbCAmJiByW1N5bWJvbC5pdGVyYXRvcl0gfHwgcltcXFwiQEBpdGVyYXRvclxcXCJdOyBpZiAobnVsbCAhPSB0KSB7IHZhciBlLCBuLCBpLCB1LCBhID0gW10sIGYgPSAhMCwgbyA9ICExOyB0cnkgeyBpZiAoaSA9ICh0ID0gdC5jYWxsKHIpKS5uZXh0LCAwID09PSBsKSB7IGlmIChPYmplY3QodCkgIT09IHQpIHJldHVybjsgZiA9ICExOyB9IGVsc2UgZm9yICg7ICEoZiA9IChlID0gaS5jYWxsKHQpKS5kb25lKSAmJiAoYS5wdXNoKGUudmFsdWUpLCBhLmxlbmd0aCAhPT0gbCk7IGYgPSAhMCk7IH0gY2F0Y2ggKHIpIHsgbyA9ICEwLCBuID0gcjsgfSBmaW5hbGx5IHsgdHJ5IHsgaWYgKCFmICYmIG51bGwgIT0gdFtcXFwicmV0dXJuXFxcIl0gJiYgKHUgPSB0W1xcXCJyZXR1cm5cXFwiXSgpLCBPYmplY3QodSkgIT09IHUpKSByZXR1cm47IH0gZmluYWxseSB7IGlmIChvKSB0aHJvdyBuOyB9IH0gcmV0dXJuIGE7IH0gfVxcbmZ1bmN0aW9uIF9hcnJheVdpdGhIb2xlcyhyKSB7IGlmIChBcnJheS5pc0FycmF5KHIpKSByZXR1cm4gcjsgfVxcbmZ1bmN0aW9uIF9yZWdlbmVyYXRvclJ1bnRpbWUoKSB7IFxcXCJ1c2Ugc3RyaWN0XFxcIjsgLyohIHJlZ2VuZXJhdG9yLXJ1bnRpbWUgLS0gQ29weXJpZ2h0IChjKSAyMDE0LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuIC0tIGxpY2Vuc2UgKE1JVCk6IGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWdlbmVyYXRvci9ibG9iL21haW4vTElDRU5TRSAqLyBfcmVnZW5lcmF0b3JSdW50aW1lID0gZnVuY3Rpb24gX3JlZ2VuZXJhdG9yUnVudGltZSgpIHsgcmV0dXJuIGU7IH07IHZhciB0LCBlID0ge30sIHIgPSBPYmplY3QucHJvdG90eXBlLCBuID0gci5oYXNPd25Qcm9wZXJ0eSwgbyA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSB8fCBmdW5jdGlvbiAodCwgZSwgcikgeyB0W2VdID0gci52YWx1ZTsgfSwgaSA9IFxcXCJmdW5jdGlvblxcXCIgPT0gdHlwZW9mIFN5bWJvbCA/IFN5bWJvbCA6IHt9LCBhID0gaS5pdGVyYXRvciB8fCBcXFwiQEBpdGVyYXRvclxcXCIsIGMgPSBpLmFzeW5jSXRlcmF0b3IgfHwgXFxcIkBAYXN5bmNJdGVyYXRvclxcXCIsIHUgPSBpLnRvU3RyaW5nVGFnIHx8IFxcXCJAQHRvU3RyaW5nVGFnXFxcIjsgZnVuY3Rpb24gZGVmaW5lKHQsIGUsIHIpIHsgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCBlLCB7IHZhbHVlOiByLCBlbnVtZXJhYmxlOiAhMCwgY29uZmlndXJhYmxlOiAhMCwgd3JpdGFibGU6ICEwIH0pLCB0W2VdOyB9IHRyeSB7IGRlZmluZSh7fSwgXFxcIlxcXCIpOyB9IGNhdGNoICh0KSB7IGRlZmluZSA9IGZ1bmN0aW9uIGRlZmluZSh0LCBlLCByKSB7IHJldHVybiB0W2VdID0gcjsgfTsgfSBmdW5jdGlvbiB3cmFwKHQsIGUsIHIsIG4pIHsgdmFyIGkgPSBlICYmIGUucHJvdG90eXBlIGluc3RhbmNlb2YgR2VuZXJhdG9yID8gZSA6IEdlbmVyYXRvciwgYSA9IE9iamVjdC5jcmVhdGUoaS5wcm90b3R5cGUpLCBjID0gbmV3IENvbnRleHQobiB8fCBbXSk7IHJldHVybiBvKGEsIFxcXCJfaW52b2tlXFxcIiwgeyB2YWx1ZTogbWFrZUludm9rZU1ldGhvZCh0LCByLCBjKSB9KSwgYTsgfSBmdW5jdGlvbiB0cnlDYXRjaCh0LCBlLCByKSB7IHRyeSB7IHJldHVybiB7IHR5cGU6IFxcXCJub3JtYWxcXFwiLCBhcmc6IHQuY2FsbChlLCByKSB9OyB9IGNhdGNoICh0KSB7IHJldHVybiB7IHR5cGU6IFxcXCJ0aHJvd1xcXCIsIGFyZzogdCB9OyB9IH0gZS53cmFwID0gd3JhcDsgdmFyIGggPSBcXFwic3VzcGVuZGVkU3RhcnRcXFwiLCBsID0gXFxcInN1c3BlbmRlZFlpZWxkXFxcIiwgZiA9IFxcXCJleGVjdXRpbmdcXFwiLCBzID0gXFxcImNvbXBsZXRlZFxcXCIsIHkgPSB7fTsgZnVuY3Rpb24gR2VuZXJhdG9yKCkge30gZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb24oKSB7fSBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSgpIHt9IHZhciBwID0ge307IGRlZmluZShwLCBhLCBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9KTsgdmFyIGQgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YsIHYgPSBkICYmIGQoZCh2YWx1ZXMoW10pKSk7IHYgJiYgdiAhPT0gciAmJiBuLmNhbGwodiwgYSkgJiYgKHAgPSB2KTsgdmFyIGcgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5wcm90b3R5cGUgPSBHZW5lcmF0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShwKTsgZnVuY3Rpb24gZGVmaW5lSXRlcmF0b3JNZXRob2RzKHQpIHsgW1xcXCJuZXh0XFxcIiwgXFxcInRocm93XFxcIiwgXFxcInJldHVyblxcXCJdLmZvckVhY2goZnVuY3Rpb24gKGUpIHsgZGVmaW5lKHQsIGUsIGZ1bmN0aW9uICh0KSB7IHJldHVybiB0aGlzLl9pbnZva2UoZSwgdCk7IH0pOyB9KTsgfSBmdW5jdGlvbiBBc3luY0l0ZXJhdG9yKHQsIGUpIHsgZnVuY3Rpb24gaW52b2tlKHIsIG8sIGksIGEpIHsgdmFyIGMgPSB0cnlDYXRjaCh0W3JdLCB0LCBvKTsgaWYgKFxcXCJ0aHJvd1xcXCIgIT09IGMudHlwZSkgeyB2YXIgdSA9IGMuYXJnLCBoID0gdS52YWx1ZTsgcmV0dXJuIGggJiYgXFxcIm9iamVjdFxcXCIgPT0gX3R5cGVvZihoKSAmJiBuLmNhbGwoaCwgXFxcIl9fYXdhaXRcXFwiKSA/IGUucmVzb2x2ZShoLl9fYXdhaXQpLnRoZW4oZnVuY3Rpb24gKHQpIHsgaW52b2tlKFxcXCJuZXh0XFxcIiwgdCwgaSwgYSk7IH0sIGZ1bmN0aW9uICh0KSB7IGludm9rZShcXFwidGhyb3dcXFwiLCB0LCBpLCBhKTsgfSkgOiBlLnJlc29sdmUoaCkudGhlbihmdW5jdGlvbiAodCkgeyB1LnZhbHVlID0gdCwgaSh1KTsgfSwgZnVuY3Rpb24gKHQpIHsgcmV0dXJuIGludm9rZShcXFwidGhyb3dcXFwiLCB0LCBpLCBhKTsgfSk7IH0gYShjLmFyZyk7IH0gdmFyIHI7IG8odGhpcywgXFxcIl9pbnZva2VcXFwiLCB7IHZhbHVlOiBmdW5jdGlvbiB2YWx1ZSh0LCBuKSB7IGZ1bmN0aW9uIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCkgeyByZXR1cm4gbmV3IGUoZnVuY3Rpb24gKGUsIHIpIHsgaW52b2tlKHQsIG4sIGUsIHIpOyB9KTsgfSByZXR1cm4gciA9IHIgPyByLnRoZW4oY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcsIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKSA6IGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCk7IH0gfSk7IH0gZnVuY3Rpb24gbWFrZUludm9rZU1ldGhvZChlLCByLCBuKSB7IHZhciBvID0gaDsgcmV0dXJuIGZ1bmN0aW9uIChpLCBhKSB7IGlmIChvID09PSBmKSB0aHJvdyBFcnJvcihcXFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgcnVubmluZ1xcXCIpOyBpZiAobyA9PT0gcykgeyBpZiAoXFxcInRocm93XFxcIiA9PT0gaSkgdGhyb3cgYTsgcmV0dXJuIHsgdmFsdWU6IHQsIGRvbmU6ICEwIH07IH0gZm9yIChuLm1ldGhvZCA9IGksIG4uYXJnID0gYTs7KSB7IHZhciBjID0gbi5kZWxlZ2F0ZTsgaWYgKGMpIHsgdmFyIHUgPSBtYXliZUludm9rZURlbGVnYXRlKGMsIG4pOyBpZiAodSkgeyBpZiAodSA9PT0geSkgY29udGludWU7IHJldHVybiB1OyB9IH0gaWYgKFxcXCJuZXh0XFxcIiA9PT0gbi5tZXRob2QpIG4uc2VudCA9IG4uX3NlbnQgPSBuLmFyZztlbHNlIGlmIChcXFwidGhyb3dcXFwiID09PSBuLm1ldGhvZCkgeyBpZiAobyA9PT0gaCkgdGhyb3cgbyA9IHMsIG4uYXJnOyBuLmRpc3BhdGNoRXhjZXB0aW9uKG4uYXJnKTsgfSBlbHNlIFxcXCJyZXR1cm5cXFwiID09PSBuLm1ldGhvZCAmJiBuLmFicnVwdChcXFwicmV0dXJuXFxcIiwgbi5hcmcpOyBvID0gZjsgdmFyIHAgPSB0cnlDYXRjaChlLCByLCBuKTsgaWYgKFxcXCJub3JtYWxcXFwiID09PSBwLnR5cGUpIHsgaWYgKG8gPSBuLmRvbmUgPyBzIDogbCwgcC5hcmcgPT09IHkpIGNvbnRpbnVlOyByZXR1cm4geyB2YWx1ZTogcC5hcmcsIGRvbmU6IG4uZG9uZSB9OyB9IFxcXCJ0aHJvd1xcXCIgPT09IHAudHlwZSAmJiAobyA9IHMsIG4ubWV0aG9kID0gXFxcInRocm93XFxcIiwgbi5hcmcgPSBwLmFyZyk7IH0gfTsgfSBmdW5jdGlvbiBtYXliZUludm9rZURlbGVnYXRlKGUsIHIpIHsgdmFyIG4gPSByLm1ldGhvZCwgbyA9IGUuaXRlcmF0b3Jbbl07IGlmIChvID09PSB0KSByZXR1cm4gci5kZWxlZ2F0ZSA9IG51bGwsIFxcXCJ0aHJvd1xcXCIgPT09IG4gJiYgZS5pdGVyYXRvcltcXFwicmV0dXJuXFxcIl0gJiYgKHIubWV0aG9kID0gXFxcInJldHVyblxcXCIsIHIuYXJnID0gdCwgbWF5YmVJbnZva2VEZWxlZ2F0ZShlLCByKSwgXFxcInRocm93XFxcIiA9PT0gci5tZXRob2QpIHx8IFxcXCJyZXR1cm5cXFwiICE9PSBuICYmIChyLm1ldGhvZCA9IFxcXCJ0aHJvd1xcXCIsIHIuYXJnID0gbmV3IFR5cGVFcnJvcihcXFwiVGhlIGl0ZXJhdG9yIGRvZXMgbm90IHByb3ZpZGUgYSAnXFxcIiArIG4gKyBcXFwiJyBtZXRob2RcXFwiKSksIHk7IHZhciBpID0gdHJ5Q2F0Y2gobywgZS5pdGVyYXRvciwgci5hcmcpOyBpZiAoXFxcInRocm93XFxcIiA9PT0gaS50eXBlKSByZXR1cm4gci5tZXRob2QgPSBcXFwidGhyb3dcXFwiLCByLmFyZyA9IGkuYXJnLCByLmRlbGVnYXRlID0gbnVsbCwgeTsgdmFyIGEgPSBpLmFyZzsgcmV0dXJuIGEgPyBhLmRvbmUgPyAocltlLnJlc3VsdE5hbWVdID0gYS52YWx1ZSwgci5uZXh0ID0gZS5uZXh0TG9jLCBcXFwicmV0dXJuXFxcIiAhPT0gci5tZXRob2QgJiYgKHIubWV0aG9kID0gXFxcIm5leHRcXFwiLCByLmFyZyA9IHQpLCByLmRlbGVnYXRlID0gbnVsbCwgeSkgOiBhIDogKHIubWV0aG9kID0gXFxcInRocm93XFxcIiwgci5hcmcgPSBuZXcgVHlwZUVycm9yKFxcXCJpdGVyYXRvciByZXN1bHQgaXMgbm90IGFuIG9iamVjdFxcXCIpLCByLmRlbGVnYXRlID0gbnVsbCwgeSk7IH0gZnVuY3Rpb24gcHVzaFRyeUVudHJ5KHQpIHsgdmFyIGUgPSB7IHRyeUxvYzogdFswXSB9OyAxIGluIHQgJiYgKGUuY2F0Y2hMb2MgPSB0WzFdKSwgMiBpbiB0ICYmIChlLmZpbmFsbHlMb2MgPSB0WzJdLCBlLmFmdGVyTG9jID0gdFszXSksIHRoaXMudHJ5RW50cmllcy5wdXNoKGUpOyB9IGZ1bmN0aW9uIHJlc2V0VHJ5RW50cnkodCkgeyB2YXIgZSA9IHQuY29tcGxldGlvbiB8fCB7fTsgZS50eXBlID0gXFxcIm5vcm1hbFxcXCIsIGRlbGV0ZSBlLmFyZywgdC5jb21wbGV0aW9uID0gZTsgfSBmdW5jdGlvbiBDb250ZXh0KHQpIHsgdGhpcy50cnlFbnRyaWVzID0gW3sgdHJ5TG9jOiBcXFwicm9vdFxcXCIgfV0sIHQuZm9yRWFjaChwdXNoVHJ5RW50cnksIHRoaXMpLCB0aGlzLnJlc2V0KCEwKTsgfSBmdW5jdGlvbiB2YWx1ZXMoZSkgeyBpZiAoZSB8fCBcXFwiXFxcIiA9PT0gZSkgeyB2YXIgciA9IGVbYV07IGlmIChyKSByZXR1cm4gci5jYWxsKGUpOyBpZiAoXFxcImZ1bmN0aW9uXFxcIiA9PSB0eXBlb2YgZS5uZXh0KSByZXR1cm4gZTsgaWYgKCFpc05hTihlLmxlbmd0aCkpIHsgdmFyIG8gPSAtMSwgaSA9IGZ1bmN0aW9uIG5leHQoKSB7IGZvciAoOyArK28gPCBlLmxlbmd0aDspIGlmIChuLmNhbGwoZSwgbykpIHJldHVybiBuZXh0LnZhbHVlID0gZVtvXSwgbmV4dC5kb25lID0gITEsIG5leHQ7IHJldHVybiBuZXh0LnZhbHVlID0gdCwgbmV4dC5kb25lID0gITAsIG5leHQ7IH07IHJldHVybiBpLm5leHQgPSBpOyB9IH0gdGhyb3cgbmV3IFR5cGVFcnJvcihfdHlwZW9mKGUpICsgXFxcIiBpcyBub3QgaXRlcmFibGVcXFwiKTsgfSByZXR1cm4gR2VuZXJhdG9yRnVuY3Rpb24ucHJvdG90eXBlID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUsIG8oZywgXFxcImNvbnN0cnVjdG9yXFxcIiwgeyB2YWx1ZTogR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUsIGNvbmZpZ3VyYWJsZTogITAgfSksIG8oR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUsIFxcXCJjb25zdHJ1Y3RvclxcXCIsIHsgdmFsdWU6IEdlbmVyYXRvckZ1bmN0aW9uLCBjb25maWd1cmFibGU6ICEwIH0pLCBHZW5lcmF0b3JGdW5jdGlvbi5kaXNwbGF5TmFtZSA9IGRlZmluZShHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSwgdSwgXFxcIkdlbmVyYXRvckZ1bmN0aW9uXFxcIiksIGUuaXNHZW5lcmF0b3JGdW5jdGlvbiA9IGZ1bmN0aW9uICh0KSB7IHZhciBlID0gXFxcImZ1bmN0aW9uXFxcIiA9PSB0eXBlb2YgdCAmJiB0LmNvbnN0cnVjdG9yOyByZXR1cm4gISFlICYmIChlID09PSBHZW5lcmF0b3JGdW5jdGlvbiB8fCBcXFwiR2VuZXJhdG9yRnVuY3Rpb25cXFwiID09PSAoZS5kaXNwbGF5TmFtZSB8fCBlLm5hbWUpKTsgfSwgZS5tYXJrID0gZnVuY3Rpb24gKHQpIHsgcmV0dXJuIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZih0LCBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSkgOiAodC5fX3Byb3RvX18gPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSwgZGVmaW5lKHQsIHUsIFxcXCJHZW5lcmF0b3JGdW5jdGlvblxcXCIpKSwgdC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKGcpLCB0OyB9LCBlLmF3cmFwID0gZnVuY3Rpb24gKHQpIHsgcmV0dXJuIHsgX19hd2FpdDogdCB9OyB9LCBkZWZpbmVJdGVyYXRvck1ldGhvZHMoQXN5bmNJdGVyYXRvci5wcm90b3R5cGUpLCBkZWZpbmUoQXN5bmNJdGVyYXRvci5wcm90b3R5cGUsIGMsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0pLCBlLkFzeW5jSXRlcmF0b3IgPSBBc3luY0l0ZXJhdG9yLCBlLmFzeW5jID0gZnVuY3Rpb24gKHQsIHIsIG4sIG8sIGkpIHsgdm9pZCAwID09PSBpICYmIChpID0gUHJvbWlzZSk7IHZhciBhID0gbmV3IEFzeW5jSXRlcmF0b3Iod3JhcCh0LCByLCBuLCBvKSwgaSk7IHJldHVybiBlLmlzR2VuZXJhdG9yRnVuY3Rpb24ocikgPyBhIDogYS5uZXh0KCkudGhlbihmdW5jdGlvbiAodCkgeyByZXR1cm4gdC5kb25lID8gdC52YWx1ZSA6IGEubmV4dCgpOyB9KTsgfSwgZGVmaW5lSXRlcmF0b3JNZXRob2RzKGcpLCBkZWZpbmUoZywgdSwgXFxcIkdlbmVyYXRvclxcXCIpLCBkZWZpbmUoZywgYSwgZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSksIGRlZmluZShnLCBcXFwidG9TdHJpbmdcXFwiLCBmdW5jdGlvbiAoKSB7IHJldHVybiBcXFwiW29iamVjdCBHZW5lcmF0b3JdXFxcIjsgfSksIGUua2V5cyA9IGZ1bmN0aW9uICh0KSB7IHZhciBlID0gT2JqZWN0KHQpLCByID0gW107IGZvciAodmFyIG4gaW4gZSkgci5wdXNoKG4pOyByZXR1cm4gci5yZXZlcnNlKCksIGZ1bmN0aW9uIG5leHQoKSB7IGZvciAoOyByLmxlbmd0aDspIHsgdmFyIHQgPSByLnBvcCgpOyBpZiAodCBpbiBlKSByZXR1cm4gbmV4dC52YWx1ZSA9IHQsIG5leHQuZG9uZSA9ICExLCBuZXh0OyB9IHJldHVybiBuZXh0LmRvbmUgPSAhMCwgbmV4dDsgfTsgfSwgZS52YWx1ZXMgPSB2YWx1ZXMsIENvbnRleHQucHJvdG90eXBlID0geyBjb25zdHJ1Y3RvcjogQ29udGV4dCwgcmVzZXQ6IGZ1bmN0aW9uIHJlc2V0KGUpIHsgaWYgKHRoaXMucHJldiA9IDAsIHRoaXMubmV4dCA9IDAsIHRoaXMuc2VudCA9IHRoaXMuX3NlbnQgPSB0LCB0aGlzLmRvbmUgPSAhMSwgdGhpcy5kZWxlZ2F0ZSA9IG51bGwsIHRoaXMubWV0aG9kID0gXFxcIm5leHRcXFwiLCB0aGlzLmFyZyA9IHQsIHRoaXMudHJ5RW50cmllcy5mb3JFYWNoKHJlc2V0VHJ5RW50cnkpLCAhZSkgZm9yICh2YXIgciBpbiB0aGlzKSBcXFwidFxcXCIgPT09IHIuY2hhckF0KDApICYmIG4uY2FsbCh0aGlzLCByKSAmJiAhaXNOYU4oK3Iuc2xpY2UoMSkpICYmICh0aGlzW3JdID0gdCk7IH0sIHN0b3A6IGZ1bmN0aW9uIHN0b3AoKSB7IHRoaXMuZG9uZSA9ICEwOyB2YXIgdCA9IHRoaXMudHJ5RW50cmllc1swXS5jb21wbGV0aW9uOyBpZiAoXFxcInRocm93XFxcIiA9PT0gdC50eXBlKSB0aHJvdyB0LmFyZzsgcmV0dXJuIHRoaXMucnZhbDsgfSwgZGlzcGF0Y2hFeGNlcHRpb246IGZ1bmN0aW9uIGRpc3BhdGNoRXhjZXB0aW9uKGUpIHsgaWYgKHRoaXMuZG9uZSkgdGhyb3cgZTsgdmFyIHIgPSB0aGlzOyBmdW5jdGlvbiBoYW5kbGUobiwgbykgeyByZXR1cm4gYS50eXBlID0gXFxcInRocm93XFxcIiwgYS5hcmcgPSBlLCByLm5leHQgPSBuLCBvICYmIChyLm1ldGhvZCA9IFxcXCJuZXh0XFxcIiwgci5hcmcgPSB0KSwgISFvOyB9IGZvciAodmFyIG8gPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgbyA+PSAwOyAtLW8pIHsgdmFyIGkgPSB0aGlzLnRyeUVudHJpZXNbb10sIGEgPSBpLmNvbXBsZXRpb247IGlmIChcXFwicm9vdFxcXCIgPT09IGkudHJ5TG9jKSByZXR1cm4gaGFuZGxlKFxcXCJlbmRcXFwiKTsgaWYgKGkudHJ5TG9jIDw9IHRoaXMucHJldikgeyB2YXIgYyA9IG4uY2FsbChpLCBcXFwiY2F0Y2hMb2NcXFwiKSwgdSA9IG4uY2FsbChpLCBcXFwiZmluYWxseUxvY1xcXCIpOyBpZiAoYyAmJiB1KSB7IGlmICh0aGlzLnByZXYgPCBpLmNhdGNoTG9jKSByZXR1cm4gaGFuZGxlKGkuY2F0Y2hMb2MsICEwKTsgaWYgKHRoaXMucHJldiA8IGkuZmluYWxseUxvYykgcmV0dXJuIGhhbmRsZShpLmZpbmFsbHlMb2MpOyB9IGVsc2UgaWYgKGMpIHsgaWYgKHRoaXMucHJldiA8IGkuY2F0Y2hMb2MpIHJldHVybiBoYW5kbGUoaS5jYXRjaExvYywgITApOyB9IGVsc2UgeyBpZiAoIXUpIHRocm93IEVycm9yKFxcXCJ0cnkgc3RhdGVtZW50IHdpdGhvdXQgY2F0Y2ggb3IgZmluYWxseVxcXCIpOyBpZiAodGhpcy5wcmV2IDwgaS5maW5hbGx5TG9jKSByZXR1cm4gaGFuZGxlKGkuZmluYWxseUxvYyk7IH0gfSB9IH0sIGFicnVwdDogZnVuY3Rpb24gYWJydXB0KHQsIGUpIHsgZm9yICh2YXIgciA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyByID49IDA7IC0tcikgeyB2YXIgbyA9IHRoaXMudHJ5RW50cmllc1tyXTsgaWYgKG8udHJ5TG9jIDw9IHRoaXMucHJldiAmJiBuLmNhbGwobywgXFxcImZpbmFsbHlMb2NcXFwiKSAmJiB0aGlzLnByZXYgPCBvLmZpbmFsbHlMb2MpIHsgdmFyIGkgPSBvOyBicmVhazsgfSB9IGkgJiYgKFxcXCJicmVha1xcXCIgPT09IHQgfHwgXFxcImNvbnRpbnVlXFxcIiA9PT0gdCkgJiYgaS50cnlMb2MgPD0gZSAmJiBlIDw9IGkuZmluYWxseUxvYyAmJiAoaSA9IG51bGwpOyB2YXIgYSA9IGkgPyBpLmNvbXBsZXRpb24gOiB7fTsgcmV0dXJuIGEudHlwZSA9IHQsIGEuYXJnID0gZSwgaSA/ICh0aGlzLm1ldGhvZCA9IFxcXCJuZXh0XFxcIiwgdGhpcy5uZXh0ID0gaS5maW5hbGx5TG9jLCB5KSA6IHRoaXMuY29tcGxldGUoYSk7IH0sIGNvbXBsZXRlOiBmdW5jdGlvbiBjb21wbGV0ZSh0LCBlKSB7IGlmIChcXFwidGhyb3dcXFwiID09PSB0LnR5cGUpIHRocm93IHQuYXJnOyByZXR1cm4gXFxcImJyZWFrXFxcIiA9PT0gdC50eXBlIHx8IFxcXCJjb250aW51ZVxcXCIgPT09IHQudHlwZSA/IHRoaXMubmV4dCA9IHQuYXJnIDogXFxcInJldHVyblxcXCIgPT09IHQudHlwZSA/ICh0aGlzLnJ2YWwgPSB0aGlzLmFyZyA9IHQuYXJnLCB0aGlzLm1ldGhvZCA9IFxcXCJyZXR1cm5cXFwiLCB0aGlzLm5leHQgPSBcXFwiZW5kXFxcIikgOiBcXFwibm9ybWFsXFxcIiA9PT0gdC50eXBlICYmIGUgJiYgKHRoaXMubmV4dCA9IGUpLCB5OyB9LCBmaW5pc2g6IGZ1bmN0aW9uIGZpbmlzaCh0KSB7IGZvciAodmFyIGUgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgZSA+PSAwOyAtLWUpIHsgdmFyIHIgPSB0aGlzLnRyeUVudHJpZXNbZV07IGlmIChyLmZpbmFsbHlMb2MgPT09IHQpIHJldHVybiB0aGlzLmNvbXBsZXRlKHIuY29tcGxldGlvbiwgci5hZnRlckxvYyksIHJlc2V0VHJ5RW50cnkociksIHk7IH0gfSwgXFxcImNhdGNoXFxcIjogZnVuY3Rpb24gX2NhdGNoKHQpIHsgZm9yICh2YXIgZSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBlID49IDA7IC0tZSkgeyB2YXIgciA9IHRoaXMudHJ5RW50cmllc1tlXTsgaWYgKHIudHJ5TG9jID09PSB0KSB7IHZhciBuID0gci5jb21wbGV0aW9uOyBpZiAoXFxcInRocm93XFxcIiA9PT0gbi50eXBlKSB7IHZhciBvID0gbi5hcmc7IHJlc2V0VHJ5RW50cnkocik7IH0gcmV0dXJuIG87IH0gfSB0aHJvdyBFcnJvcihcXFwiaWxsZWdhbCBjYXRjaCBhdHRlbXB0XFxcIik7IH0sIGRlbGVnYXRlWWllbGQ6IGZ1bmN0aW9uIGRlbGVnYXRlWWllbGQoZSwgciwgbikgeyByZXR1cm4gdGhpcy5kZWxlZ2F0ZSA9IHsgaXRlcmF0b3I6IHZhbHVlcyhlKSwgcmVzdWx0TmFtZTogciwgbmV4dExvYzogbiB9LCBcXFwibmV4dFxcXCIgPT09IHRoaXMubWV0aG9kICYmICh0aGlzLmFyZyA9IHQpLCB5OyB9IH0sIGU7IH1cXG5mdW5jdGlvbiBhc3luY0dlbmVyYXRvclN0ZXAobiwgdCwgZSwgciwgbywgYSwgYykgeyB0cnkgeyB2YXIgaSA9IG5bYV0oYyksIHUgPSBpLnZhbHVlOyB9IGNhdGNoIChuKSB7IHJldHVybiB2b2lkIGUobik7IH0gaS5kb25lID8gdCh1KSA6IFByb21pc2UucmVzb2x2ZSh1KS50aGVuKHIsIG8pOyB9XFxuZnVuY3Rpb24gX2FzeW5jVG9HZW5lcmF0b3IobikgeyByZXR1cm4gZnVuY3Rpb24gKCkgeyB2YXIgdCA9IHRoaXMsIGUgPSBhcmd1bWVudHM7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAociwgbykgeyB2YXIgYSA9IG4uYXBwbHkodCwgZSk7IGZ1bmN0aW9uIF9uZXh0KG4pIHsgYXN5bmNHZW5lcmF0b3JTdGVwKGEsIHIsIG8sIF9uZXh0LCBfdGhyb3csIFxcXCJuZXh0XFxcIiwgbik7IH0gZnVuY3Rpb24gX3Rocm93KG4pIHsgYXN5bmNHZW5lcmF0b3JTdGVwKGEsIHIsIG8sIF9uZXh0LCBfdGhyb3csIFxcXCJ0aHJvd1xcXCIsIG4pOyB9IF9uZXh0KHZvaWQgMCk7IH0pOyB9OyB9XFxuXFxuXFxuXFxudmFyIHJlbW90ZUNvbmZpZ1F1ZXJ5ID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcXG4gIHZhciBfcmVmID0gX2FzeW5jVG9HZW5lcmF0b3IoLyojX19QVVJFX18qL19yZWdlbmVyYXRvclJ1bnRpbWUoKS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoKSB7XFxuICAgIHZhciBpc1Byb2R1Y3Rpb25PclN0YWdpbmcsIFJFTU9URV9DT05GSUdfVVJMLCByZXNwb25zZTtcXG4gICAgcmV0dXJuIF9yZWdlbmVyYXRvclJ1bnRpbWUoKS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7XFxuICAgICAgd2hpbGUgKDEpIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHtcXG4gICAgICAgIGNhc2UgMDpcXG4gICAgICAgICAgaXNQcm9kdWN0aW9uT3JTdGFnaW5nID0gIGZhbHNlIHx8IFxcXCJkZXZlbG9wbWVudFxcXCIgPT09ICdzdGFnaW5nJztcXG4gICAgICAgICAgUkVNT1RFX0NPTkZJR19VUkwgPSBwcm9jZXNzLmVudi5SRU1PVEVfQ09ORklHX1VSTCB8fCAnJztcXG4gICAgICAgICAgaWYgKCEoaXNQcm9kdWN0aW9uT3JTdGFnaW5nICYmIFJFTU9URV9DT05GSUdfVVJMID09PSAnJykpIHtcXG4gICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNDtcXG4gICAgICAgICAgICBicmVhaztcXG4gICAgICAgICAgfVxcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlbW90ZSBDb25maWcgVVJMIGlzIG5vdCBzZXQhJyk7XFxuICAgICAgICBjYXNlIDQ6XFxuICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA2O1xcbiAgICAgICAgICByZXR1cm4gZmV0Y2goUkVNT1RFX0NPTkZJR19VUkwpO1xcbiAgICAgICAgY2FzZSA2OlxcbiAgICAgICAgICByZXNwb25zZSA9IF9jb250ZXh0LnNlbnQ7XFxuICAgICAgICAgIGlmIChyZXNwb25zZS5vaykge1xcbiAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA5O1xcbiAgICAgICAgICAgIGJyZWFrO1xcbiAgICAgICAgICB9XFxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUmVtb3RlIENvbmZpZyBTZXJ2ZXIgaXMgb3V0IG9mIHJlYWNoIScpO1xcbiAgICAgICAgY2FzZSA5OlxcbiAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KFxcXCJyZXR1cm5cXFwiLCByZXNwb25zZS5qc29uKCkpO1xcbiAgICAgICAgY2FzZSAxMDpcXG4gICAgICAgIGNhc2UgXFxcImVuZFxcXCI6XFxuICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7XFxuICAgICAgfVxcbiAgICB9LCBfY2FsbGVlKTtcXG4gIH0pKTtcXG4gIHJldHVybiBmdW5jdGlvbiByZW1vdGVDb25maWdRdWVyeSgpIHtcXG4gICAgcmV0dXJuIF9yZWYuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcXG4gIH07XFxufSgpO1xcbmZ1bmN0aW9uIHVzZVJlbW90ZUNvbmZpZygpIHtcXG4gIHZhciBlbmFibGVkID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBmYWxzZTtcXG4gIHZhciBfdXNlU3RhdGUgPSAoMCxyZWFjdF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLnVzZVN0YXRlKShfcmVtb3RlX2NvbmZpZ19qc29uX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18pLFxcbiAgICBfdXNlU3RhdGUyID0gX3NsaWNlZFRvQXJyYXkoX3VzZVN0YXRlLCAyKSxcXG4gICAgZGF0YSA9IF91c2VTdGF0ZTJbMF0sXFxuICAgIHNldERhdGEgPSBfdXNlU3RhdGUyWzFdO1xcbiAgdmFyIGlzTW91bnRlZCA9ICgwLHJlYWN0X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18udXNlUmVmKShmYWxzZSk7XFxuICAoMCxyZWFjdF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLnVzZUVmZmVjdCkoZnVuY3Rpb24gKCkge1xcbiAgICBpc01vdW50ZWQuY3VycmVudCA9IHRydWU7XFxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XFxuICAgICAgaXNNb3VudGVkLmN1cnJlbnQgPSBmYWxzZTtcXG4gICAgfTtcXG4gIH0sIFtdKTtcXG4gICgwLHJlYWN0X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18udXNlRWZmZWN0KShmdW5jdGlvbiAoKSB7XFxuICAgIGlmIChlbmFibGVkKSB7XFxuICAgICAgcmVtb3RlQ29uZmlnUXVlcnkoKS50aGVuKC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XFxuICAgICAgICB2YXIgX3JlZjIgPSBfYXN5bmNUb0dlbmVyYXRvcigvKiNfX1BVUkVfXyovX3JlZ2VuZXJhdG9yUnVudGltZSgpLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTIocmVzKSB7XFxuICAgICAgICAgIHZhciByZXNIYXNoLCBkYXRhSGFzaDtcXG4gICAgICAgICAgcmV0dXJuIF9yZWdlbmVyYXRvclJ1bnRpbWUoKS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyJChfY29udGV4dDIpIHtcXG4gICAgICAgICAgICB3aGlsZSAoMSkgc3dpdGNoIChfY29udGV4dDIucHJldiA9IF9jb250ZXh0Mi5uZXh0KSB7XFxuICAgICAgICAgICAgICBjYXNlIDA6XFxuICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gMjtcXG4gICAgICAgICAgICAgICAgcmV0dXJuIF9kZXJpdl9jb21fdXRpbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5PYmplY3RVdGlscy5oYXNoT2JqZWN0KHJlcyk7XFxuICAgICAgICAgICAgICBjYXNlIDI6XFxuICAgICAgICAgICAgICAgIHJlc0hhc2ggPSBfY29udGV4dDIuc2VudDtcXG4gICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSA1O1xcbiAgICAgICAgICAgICAgICByZXR1cm4gX2Rlcml2X2NvbV91dGlsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLk9iamVjdFV0aWxzLmhhc2hPYmplY3QoZGF0YSk7XFxuICAgICAgICAgICAgICBjYXNlIDU6XFxuICAgICAgICAgICAgICAgIGRhdGFIYXNoID0gX2NvbnRleHQyLnNlbnQ7XFxuICAgICAgICAgICAgICAgIGlmIChyZXNIYXNoICE9PSBkYXRhSGFzaCAmJiBpc01vdW50ZWQuY3VycmVudCkge1xcbiAgICAgICAgICAgICAgICAgIHNldERhdGEocmVzKTtcXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgY2FzZSA3OlxcbiAgICAgICAgICAgICAgY2FzZSBcXFwiZW5kXFxcIjpcXG4gICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5zdG9wKCk7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICB9LCBfY2FsbGVlMik7XFxuICAgICAgICB9KSk7XFxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKF94KSB7XFxuICAgICAgICAgIHJldHVybiBfcmVmMi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xcbiAgICAgICAgfTtcXG4gICAgICB9KCkpW1xcXCJjYXRjaFxcXCJdKGZ1bmN0aW9uIChlcnJvcikge1xcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcXG4gICAgICAgIGNvbnNvbGUubG9nKCdSZW1vdGUgQ29uZmlnIGVycm9yOiAnLCBlcnJvcik7XFxuICAgICAgfSk7XFxuICAgIH1cXG4gIH0sIFtlbmFibGVkLCBkYXRhXSk7XFxuICByZXR1cm4ge1xcbiAgICBkYXRhOiBkYXRhXFxuICB9O1xcbn1cXG4vKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovIGNvbnN0IF9fV0VCUEFDS19ERUZBVUxUX0VYUE9SVF9fID0gKHVzZVJlbW90ZUNvbmZpZyk7Ly8jIHNvdXJjZVVSTD1bbW9kdWxlXVxcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pTGk0dllYQnBMM055WXk5b2IyOXJjeTkxYzJWU1pXMXZkR1ZEYjI1bWFXY3VkSE1pTENKdFlYQndhVzVuY3lJNklqczdPenM3T3pzN096czdPenM3TzBGQlEwRTdRVUZCUVR0QlFVRkJPMEZCUkVFN1FVRkRRVHRCUVVOQk8wRkJSVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUTBFN1FVRkRRVHRCUVVGQk8wRkJRMEU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZEUVR0QlFVRkJPMEZCUVVFN1FVRkZRVHRCUVVGQk8wRkJRVUU3UVVGRFFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVTkJPMEZCUVVFN1FVRkZRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZEUVR0QlFWaEJPMEZCUVVFN1FVRkJRVHRCUVdGQk8wRkJRVUU3UVVGRFFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVTkJPMEZCUlVFN1FVRkRRVHRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZEUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVOQk8wRkJRVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGRFFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRlFUdEJRVUZCTzBGQlFVRTdRVUZEUVR0QlFVVkJJaXdpYzI5MWNtTmxjeUk2V3lKM1pXSndZV05yT2k4dlFHUmxjbWwyTDNSeVlXUmxjaTh1TGk5aGNHa3ZjM0pqTDJodmIydHpMM1Z6WlZKbGJXOTBaVU52Ym1acFp5NTBjejltT1RKbUlsMHNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJbWx0Y0c5eWRDQjdJSFZ6WlVWbVptVmpkQ3dnZFhObFVtVm1MQ0IxYzJWVGRHRjBaU0I5SUdaeWIyMGdKM0psWVdOMEp6dGNibWx0Y0c5eWRDQjdJRTlpYW1WamRGVjBhV3h6SUgwZ1puSnZiU0FuUUdSbGNtbDJMV052YlM5MWRHbHNjeWM3WEc1cGJYQnZjblFnYVc1cGRFUmhkR0VnWm5KdmJTQW5MaTR2Y21WdGIzUmxYMk52Ym1acFp5NXFjMjl1Snp0Y2JseHVZMjl1YzNRZ2NtVnRiM1JsUTI5dVptbG5VWFZsY25rZ1BTQmhjM2x1WXlCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ1kyOXVjM1FnYVhOUWNtOWtkV04wYVc5dVQzSlRkR0ZuYVc1bklEMGdjSEp2WTJWemN5NWxibll1VGs5RVJWOUZUbFlnUFQwOUlDZHdjbTlrZFdOMGFXOXVKeUI4ZkNCd2NtOWpaWE56TG1WdWRpNU9UMFJGWDBWT1ZpQTlQVDBnSjNOMFlXZHBibWNuTzF4dUlDQWdJR052Ym5OMElGSkZUVTlVUlY5RFQwNUdTVWRmVlZKTUlEMGdjSEp2WTJWemN5NWxibll1VWtWTlQxUkZYME5QVGtaSlIxOVZVa3dnZkh3Z0p5YzdYRzRnSUNBZ2FXWWdLR2x6VUhKdlpIVmpkR2x2Yms5eVUzUmhaMmx1WnlBbUppQlNSVTFQVkVWZlEwOU9Sa2xIWDFWU1RDQTlQVDBnSnljcElIdGNiaUFnSUNBZ0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtDZFNaVzF2ZEdVZ1EyOXVabWxuSUZWU1RDQnBjeUJ1YjNRZ2MyVjBJU2NwTzF4dUlDQWdJSDFjYmlBZ0lDQmpiMjV6ZENCeVpYTndiMjV6WlNBOUlHRjNZV2wwSUdabGRHTm9LRkpGVFU5VVJWOURUMDVHU1VkZlZWSk1LVHRjYmlBZ0lDQnBaaUFvSVhKbGMzQnZibk5sTG05cktTQjdYRzRnSUNBZ0lDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpZ25VbVZ0YjNSbElFTnZibVpwWnlCVFpYSjJaWElnYVhNZ2IzVjBJRzltSUhKbFlXTm9JU2NwTzF4dUlDQWdJSDFjYmlBZ0lDQnlaWFIxY200Z2NtVnpjRzl1YzJVdWFuTnZiaWdwTzF4dWZUdGNibHh1Wm5WdVkzUnBiMjRnZFhObFVtVnRiM1JsUTI5dVptbG5LR1Z1WVdKc1pXUWdQU0JtWVd4elpTa2dlMXh1SUNBZ0lHTnZibk4wSUZ0a1lYUmhMQ0J6WlhSRVlYUmhYU0E5SUhWelpWTjBZWFJsS0dsdWFYUkVZWFJoS1R0Y2JpQWdJQ0JqYjI1emRDQnBjMDF2ZFc1MFpXUWdQU0IxYzJWU1pXWW9abUZzYzJVcE8xeHVYRzRnSUNBZ2RYTmxSV1ptWldOMEtDZ3BJRDArSUh0Y2JpQWdJQ0FnSUNBZ2FYTk5iM1Z1ZEdWa0xtTjFjbkpsYm5RZ1BTQjBjblZsTzF4dVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlBb0tTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBjMDF2ZFc1MFpXUXVZM1Z5Y21WdWRDQTlJR1poYkhObE8xeHVJQ0FnSUNBZ0lDQjlPMXh1SUNBZ0lIMHNJRnRkS1R0Y2JseHVJQ0FnSUhWelpVVm1abVZqZENnb0tTQTlQaUI3WEc0Z0lDQWdJQ0FnSUdsbUlDaGxibUZpYkdWa0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpXMXZkR1ZEYjI1bWFXZFJkV1Z5ZVNncFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0xuUm9aVzRvWVhONWJtTWdjbVZ6SUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdjbVZ6U0dGemFDQTlJR0YzWVdsMElFOWlhbVZqZEZWMGFXeHpMbWhoYzJoUFltcGxZM1FvY21WektUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdaR0YwWVVoaGMyZ2dQU0JoZDJGcGRDQlBZbXBsWTNSVmRHbHNjeTVvWVhOb1QySnFaV04wS0dSaGRHRXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9jbVZ6U0dGemFDQWhQVDBnWkdGMFlVaGhjMmdnSmlZZ2FYTk5iM1Z1ZEdWa0xtTjFjbkpsYm5RcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITmxkRVJoZEdFb2NtVnpLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMHBYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMbU5oZEdOb0tHVnljbTl5SUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1pYTnNhVzUwTFdScGMyRmliR1V0Ym1WNGRDMXNhVzVsSUc1dkxXTnZibk52YkdWY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl1YzI5c1pTNXNiMmNvSjFKbGJXOTBaU0JEYjI1bWFXY2daWEp5YjNJNklDY3NJR1Z5Y205eUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDBzSUZ0bGJtRmliR1ZrTENCa1lYUmhYU2s3WEc1Y2JpQWdJQ0J5WlhSMWNtNGdleUJrWVhSaElIMDdYRzU5WEc1Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUhWelpWSmxiVzkwWlVOdmJtWnBaenRjYmlKZExDSnVZVzFsY3lJNlcxMHNJbk52ZFhKalpWSnZiM1FpT2lJaWZRPT1cXG4vLyMgc291cmNlVVJMPXdlYnBhY2staW50ZXJuYWw6Ly8vLi4vYXBpL3NyYy9ob29rcy91c2VSZW1vdGVDb25maWcudHNcXG5cIik7XG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4uL2hvb2tzL3NyYy91c2VEdHJhZGVyVjJGbGFnLnRzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4uL2hvb2tzL3NyYy91c2VEdHJhZGVyVjJGbGFnLnRzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5ldmFsKFwiX193ZWJwYWNrX3JlcXVpcmVfXy5yKF9fd2VicGFja19leHBvcnRzX18pO1xcbi8qIGhhcm1vbnkgZXhwb3J0ICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCB7XFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcXFwiZGVmYXVsdFxcXCI6ICgpID0+IChfX1dFQlBBQ0tfREVGQVVMVF9FWFBPUlRfXylcXG4vKiBoYXJtb255IGV4cG9ydCAqLyB9KTtcXG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgcmVhY3RfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIHJlYWN0ICovIFxcXCJyZWFjdFxcXCIpO1xcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciByZWFjdF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQgPSAvKiNfX1BVUkVfXyovX193ZWJwYWNrX3JlcXVpcmVfXy5uKHJlYWN0X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18pO1xcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfdXNlSXNHcm93dGhib29rTG9hZGVkX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL3VzZUlzR3Jvd3RoYm9va0xvYWRlZCAqLyBcXFwiLi4vaG9va3Mvc3JjL3VzZUlzR3Jvd3RoYm9va0xvYWRlZC50c1xcXCIpO1xcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfZGVyaXZfc2hhcmVkX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBAZGVyaXYvc2hhcmVkICovIFxcXCJAZGVyaXYvc2hhcmVkXFxcIik7XFxuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9kZXJpdl9zaGFyZWRfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX19kZWZhdWx0ID0gLyojX19QVVJFX18qL19fd2VicGFja19yZXF1aXJlX18ubihfZGVyaXZfc2hhcmVkX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18pO1xcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfZGVyaXZfY29tX3VpX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBAZGVyaXYtY29tL3VpICovIFxcXCIuLi8uLi9ub2RlX21vZHVsZXMvQGRlcml2LWNvbS91aS9kaXN0L2hvb2tzL3VzZURldmljZS5qc1xcXCIpO1xcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfZGVyaXZfY29tX2FuYWx5dGljc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgQGRlcml2LWNvbS9hbmFseXRpY3MgKi8gXFxcIkBkZXJpdi1jb20vYW5hbHl0aWNzXFxcIik7XFxuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9kZXJpdl9jb21fYW5hbHl0aWNzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19fZGVmYXVsdCA9IC8qI19fUFVSRV9fKi9fX3dlYnBhY2tfcmVxdWlyZV9fLm4oX2Rlcml2X2NvbV9hbmFseXRpY3NfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXyk7XFxuZnVuY3Rpb24gX3NsaWNlZFRvQXJyYXkociwgZSkgeyByZXR1cm4gX2FycmF5V2l0aEhvbGVzKHIpIHx8IF9pdGVyYWJsZVRvQXJyYXlMaW1pdChyLCBlKSB8fCBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkociwgZSkgfHwgX25vbkl0ZXJhYmxlUmVzdCgpOyB9XFxuZnVuY3Rpb24gX25vbkl0ZXJhYmxlUmVzdCgpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcXFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXFxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cXFwiKTsgfVxcbmZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShyLCBhKSB7IGlmIChyKSB7IGlmIChcXFwic3RyaW5nXFxcIiA9PSB0eXBlb2YgcikgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KHIsIGEpOyB2YXIgdCA9IHt9LnRvU3RyaW5nLmNhbGwocikuc2xpY2UoOCwgLTEpOyByZXR1cm4gXFxcIk9iamVjdFxcXCIgPT09IHQgJiYgci5jb25zdHJ1Y3RvciAmJiAodCA9IHIuY29uc3RydWN0b3IubmFtZSksIFxcXCJNYXBcXFwiID09PSB0IHx8IFxcXCJTZXRcXFwiID09PSB0ID8gQXJyYXkuZnJvbShyKSA6IFxcXCJBcmd1bWVudHNcXFwiID09PSB0IHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KHQpID8gX2FycmF5TGlrZVRvQXJyYXkociwgYSkgOiB2b2lkIDA7IH0gfVxcbmZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KHIsIGEpIHsgKG51bGwgPT0gYSB8fCBhID4gci5sZW5ndGgpICYmIChhID0gci5sZW5ndGgpOyBmb3IgKHZhciBlID0gMCwgbiA9IEFycmF5KGEpOyBlIDwgYTsgZSsrKSBuW2VdID0gcltlXTsgcmV0dXJuIG47IH1cXG5mdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5TGltaXQociwgbCkgeyB2YXIgdCA9IG51bGwgPT0gciA/IG51bGwgOiBcXFwidW5kZWZpbmVkXFxcIiAhPSB0eXBlb2YgU3ltYm9sICYmIHJbU3ltYm9sLml0ZXJhdG9yXSB8fCByW1xcXCJAQGl0ZXJhdG9yXFxcIl07IGlmIChudWxsICE9IHQpIHsgdmFyIGUsIG4sIGksIHUsIGEgPSBbXSwgZiA9ICEwLCBvID0gITE7IHRyeSB7IGlmIChpID0gKHQgPSB0LmNhbGwocikpLm5leHQsIDAgPT09IGwpIHsgaWYgKE9iamVjdCh0KSAhPT0gdCkgcmV0dXJuOyBmID0gITE7IH0gZWxzZSBmb3IgKDsgIShmID0gKGUgPSBpLmNhbGwodCkpLmRvbmUpICYmIChhLnB1c2goZS52YWx1ZSksIGEubGVuZ3RoICE9PSBsKTsgZiA9ICEwKTsgfSBjYXRjaCAocikgeyBvID0gITAsIG4gPSByOyB9IGZpbmFsbHkgeyB0cnkgeyBpZiAoIWYgJiYgbnVsbCAhPSB0W1xcXCJyZXR1cm5cXFwiXSAmJiAodSA9IHRbXFxcInJldHVyblxcXCJdKCksIE9iamVjdCh1KSAhPT0gdSkpIHJldHVybjsgfSBmaW5hbGx5IHsgaWYgKG8pIHRocm93IG47IH0gfSByZXR1cm4gYTsgfSB9XFxuZnVuY3Rpb24gX2FycmF5V2l0aEhvbGVzKHIpIHsgaWYgKEFycmF5LmlzQXJyYXkocikpIHJldHVybiByOyB9XFxuXFxuXFxuXFxuXFxuXFxudmFyIHVzZUR0cmFkZXJWMkZsYWcgPSBmdW5jdGlvbiB1c2VEdHJhZGVyVjJGbGFnKCkge1xcbiAgdmFyIF91c2VJc0dyb3d0aGJvb2tJc0xvYSA9ICgwLF91c2VJc0dyb3d0aGJvb2tMb2FkZWRfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX1tcXFwiZGVmYXVsdFxcXCJdKSgpLFxcbiAgICBpc19ncm93dGhib29rX2xvYWRlZCA9IF91c2VJc0dyb3d0aGJvb2tJc0xvYS5pc0dCTG9hZGVkLFxcbiAgICBpc19nYl9hdmFpbGFibGUgPSBfdXNlSXNHcm93dGhib29rSXNMb2EuaXNHQkF2YWlsYWJsZTtcXG4gIHZhciBsb2FkX2R0cmFkZXJfbW9kdWxlID0gaXNfZ3Jvd3RoYm9va19sb2FkZWQgfHwgIWlzX2diX2F2YWlsYWJsZTtcXG4gIHZhciBpc19kdHJhZGVyX3YyID0gKDAsX2Rlcml2X3NoYXJlZF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLmlzRFRyYWRlclYyKSgpO1xcbiAgdmFyIF91c2VEZXZpY2UgPSAoMCxfZGVyaXZfY29tX3VpX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X18udXNlRGV2aWNlKSgpLFxcbiAgICBpc19tb2JpbGUgPSBfdXNlRGV2aWNlLmlzTW9iaWxlO1xcbiAgdmFyIGlzX2ZlYXR1cmVfZmxhZ19hY3RpdmUgPSBCb29sZWFuKF9kZXJpdl9jb21fYW5hbHl0aWNzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18uQW5hbHl0aWNzID09PSBudWxsIHx8IF9kZXJpdl9jb21fYW5hbHl0aWNzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18uQW5hbHl0aWNzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZGVyaXZfY29tX2FuYWx5dGljc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fLkFuYWx5dGljcy5nZXRGZWF0dXJlVmFsdWUoJ2R0cmFkZXJfdjJfZW5hYmxlZCcsIGZhbHNlKSk7XFxuICB2YXIgaXNfdHJhZGVfb3JfY29udHJhY3RfcGF0aCA9IGxvY2F0aW9uLnBhdGhuYW1lLnN0YXJ0c1dpdGgoX2Rlcml2X3NoYXJlZF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLnJvdXRlcy50cmFkZSkgfHwgbG9jYXRpb24ucGF0aG5hbWUuc3RhcnRzV2l0aCgnL2NvbnRyYWN0LycpO1xcbiAgdmFyIF91c2VTdGF0ZSA9ICgwLHJlYWN0X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18udXNlU3RhdGUpKGZhbHNlKSxcXG4gICAgX3VzZVN0YXRlMiA9IF9zbGljZWRUb0FycmF5KF91c2VTdGF0ZSwgMiksXFxuICAgIGR0cmFkZXJfdjJfZW5hYmxlZCA9IF91c2VTdGF0ZTJbMF0sXFxuICAgIHNldERUcmFkZXJWMkVuYWJsZWQgPSBfdXNlU3RhdGUyWzFdO1xcbiAgKDAscmVhY3RfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy51c2VFZmZlY3QpKGZ1bmN0aW9uICgpIHtcXG4gICAgaWYgKGlzX2dyb3d0aGJvb2tfbG9hZGVkIHx8ICgwLF9kZXJpdl9zaGFyZWRfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5pc0RUcmFkZXJWMikoKSkge1xcbiAgICAgIHNldERUcmFkZXJWMkVuYWJsZWQoKGlzX2R0cmFkZXJfdjIgfHwgaXNfZmVhdHVyZV9mbGFnX2FjdGl2ZSkgJiYgaXNfbW9iaWxlICYmIGlzX3RyYWRlX29yX2NvbnRyYWN0X3BhdGgpO1xcbiAgICB9XFxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9leGhhdXN0aXZlLWRlcHNcXG4gIH0sIFtpc19tb2JpbGUsIGlzX2dyb3d0aGJvb2tfbG9hZGVkXSk7XFxuICByZXR1cm4ge1xcbiAgICBkdHJhZGVyX3YyX2VuYWJsZWQ6IGR0cmFkZXJfdjJfZW5hYmxlZCxcXG4gICAgbG9hZF9kdHJhZGVyX21vZHVsZTogbG9hZF9kdHJhZGVyX21vZHVsZVxcbiAgfTtcXG59O1xcbi8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gY29uc3QgX19XRUJQQUNLX0RFRkFVTFRfRVhQT1JUX18gPSAodXNlRHRyYWRlclYyRmxhZyk7Ly8jIHNvdXJjZVVSTD1bbW9kdWxlXVxcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pTGk0dmFHOXZhM012YzNKakwzVnpaVVIwY21Ga1pYSldNa1pzWVdjdWRITWlMQ0p0WVhCd2FXNW5jeUk2SWpzN096czdPenM3T3pzN096czdPenM3TzBGQlFVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVWQk8wRkJRMEU3UVVGQlFUdEJRVUZCTzBGQlEwRTdRVUZGUVR0QlFVTkJPMEZCUVVFN1FVRkRRVHRCUVVOQk8wRkJSMEU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVTkJPMEZCUlVFaUxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTlBWkdWeWFYWXZkSEpoWkdWeUx5NHVMMmh2YjJ0ekwzTnlZeTkxYzJWRWRISmhaR1Z5VmpKR2JHRm5MblJ6UHpBeE1qRWlYU3dpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpYVcxd2IzSjBJSHNnZFhObFUzUmhkR1VzSUhWelpVVm1abVZqZENCOUlHWnliMjBnSjNKbFlXTjBKenRjYm1sdGNHOXlkQ0IxYzJWSmMwZHliM2QwYUdKdmIydEpjMHh2WVdSbFpDQm1jbTl0SUNjdUwzVnpaVWx6UjNKdmQzUm9ZbTl2YTB4dllXUmxaQ2M3WEc1cGJYQnZjblFnZXlCcGMwUlVjbUZrWlhKV01pd2djbTkxZEdWeklIMGdabkp2YlNBblFHUmxjbWwyTDNOb1lYSmxaQ2M3WEc1cGJYQnZjblFnZXlCMWMyVkVaWFpwWTJVZ2ZTQm1jbTl0SUNkQVpHVnlhWFl0WTI5dEwzVnBKenRjYm1sdGNHOXlkQ0I3SUVGdVlXeDVkR2xqY3lCOUlHWnliMjBnSjBCa1pYSnBkaTFqYjIwdllXNWhiSGwwYVdOekp6dGNibHh1WTI5dWMzUWdkWE5sUkhSeVlXUmxjbFl5Um14aFp5QTlJQ2dwSUQwK0lIdGNiaUFnSUNCamIyNXpkQ0I3SUdselIwSk1iMkZrWldRNklHbHpYMmR5YjNkMGFHSnZiMnRmYkc5aFpHVmtMQ0JwYzBkQ1FYWmhhV3hoWW14bE9pQnBjMTluWWw5aGRtRnBiR0ZpYkdVZ2ZTQTlJSFZ6WlVselIzSnZkM1JvWW05dmEwbHpURzloWkdWa0tDazdYRzRnSUNBZ1kyOXVjM1FnYkc5aFpGOWtkSEpoWkdWeVgyMXZaSFZzWlNBOUlHbHpYMmR5YjNkMGFHSnZiMnRmYkc5aFpHVmtJSHg4SUNGcGMxOW5ZbDloZG1GcGJHRmliR1U3WEc1Y2JpQWdJQ0JqYjI1emRDQnBjMTlrZEhKaFpHVnlYM1l5SUQwZ2FYTkVWSEpoWkdWeVZqSW9LVHRjYmlBZ0lDQmpiMjV6ZENCN0lHbHpUVzlpYVd4bE9pQnBjMTl0YjJKcGJHVWdmU0E5SUhWelpVUmxkbWxqWlNncE8xeHVJQ0FnSUdOdmJuTjBJR2x6WDJabFlYUjFjbVZmWm14aFoxOWhZM1JwZG1VZ1BTQkNiMjlzWldGdUtFRnVZV3g1ZEdsamN6OHVaMlYwUm1WaGRIVnlaVlpoYkhWbEtDZGtkSEpoWkdWeVgzWXlYMlZ1WVdKc1pXUW5MQ0JtWVd4elpTa3BPMXh1SUNBZ0lHTnZibk4wSUdselgzUnlZV1JsWDI5eVgyTnZiblJ5WVdOMFgzQmhkR2dnUFZ4dUlDQWdJQ0FnSUNCc2IyTmhkR2x2Ymk1d1lYUm9ibUZ0WlM1emRHRnlkSE5YYVhSb0tISnZkWFJsY3k1MGNtRmtaU2tnZkh3Z2JHOWpZWFJwYjI0dWNHRjBhRzVoYldVdWMzUmhjblJ6VjJsMGFDZ25MMk52Ym5SeVlXTjBMeWNwTzF4dVhHNGdJQ0FnWTI5dWMzUWdXMlIwY21Ga1pYSmZkakpmWlc1aFlteGxaQ3dnYzJWMFJGUnlZV1JsY2xZeVJXNWhZbXhsWkYwZ1BTQjFjMlZUZEdGMFpTaG1ZV3h6WlNrN1hHNGdJQ0FnZFhObFJXWm1aV04wS0NncElEMCtJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tHbHpYMmR5YjNkMGFHSnZiMnRmYkc5aFpHVmtJSHg4SUdselJGUnlZV1JsY2xZeUtDa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lITmxkRVJVY21Ga1pYSldNa1Z1WVdKc1pXUW9LR2x6WDJSMGNtRmtaWEpmZGpJZ2ZId2dhWE5mWm1WaGRIVnlaVjltYkdGblgyRmpkR2wyWlNrZ0ppWWdhWE5mYlc5aWFXeGxJQ1ltSUdselgzUnlZV1JsWDI5eVgyTnZiblJ5WVdOMFgzQmhkR2dwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDOHZJR1Z6YkdsdWRDMWthWE5oWW14bExXNWxlSFF0YkdsdVpTQnlaV0ZqZEMxb2IyOXJjeTlsZUdoaGRYTjBhWFpsTFdSbGNITmNiaUFnSUNCOUxDQmJhWE5mYlc5aWFXeGxMQ0JwYzE5bmNtOTNkR2hpYjI5clgyeHZZV1JsWkYwcE8xeHVYRzRnSUNBZ2NtVjBkWEp1SUhzZ1pIUnlZV1JsY2w5Mk1sOWxibUZpYkdWa0xDQnNiMkZrWDJSMGNtRmtaWEpmYlc5a2RXeGxJSDA3WEc1OU8xeHVYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQjFjMlZFZEhKaFpHVnlWakpHYkdGbk8xeHVJbDBzSW01aGJXVnpJanBiWFN3aWMyOTFjbU5sVW05dmRDSTZJaUo5XFxuLy8jIHNvdXJjZVVSTD13ZWJwYWNrLWludGVybmFsOi8vLy4uL2hvb2tzL3NyYy91c2VEdHJhZGVyVjJGbGFnLnRzXFxuXCIpO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuLi9ob29rcy9zcmMvdXNlSXNHcm93dGhib29rTG9hZGVkLnRzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi4vaG9va3Mvc3JjL3VzZUlzR3Jvd3RoYm9va0xvYWRlZC50cyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5ldmFsKFwiX193ZWJwYWNrX3JlcXVpcmVfXy5yKF9fd2VicGFja19leHBvcnRzX18pO1xcbi8qIGhhcm1vbnkgZXhwb3J0ICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCB7XFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcXFwiZGVmYXVsdFxcXCI6ICgpID0+IChfX1dFQlBBQ0tfREVGQVVMVF9FWFBPUlRfXylcXG4vKiBoYXJtb255IGV4cG9ydCAqLyB9KTtcXG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgcmVhY3RfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIHJlYWN0ICovIFxcXCJyZWFjdFxcXCIpO1xcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciByZWFjdF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQgPSAvKiNfX1BVUkVfXyovX193ZWJwYWNrX3JlcXVpcmVfXy5uKHJlYWN0X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18pO1xcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfZGVyaXZfY29tX2FuYWx5dGljc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgQGRlcml2LWNvbS9hbmFseXRpY3MgKi8gXFxcIkBkZXJpdi1jb20vYW5hbHl0aWNzXFxcIik7XFxuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9kZXJpdl9jb21fYW5hbHl0aWNzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19fZGVmYXVsdCA9IC8qI19fUFVSRV9fKi9fX3dlYnBhY2tfcmVxdWlyZV9fLm4oX2Rlcml2X2NvbV9hbmFseXRpY3NfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyk7XFxuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9kZXJpdl9hcGlfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIEBkZXJpdi9hcGkgKi8gXFxcIi4uL2FwaS9zcmMvaG9va3MvdXNlUmVtb3RlQ29uZmlnLnRzXFxcIik7XFxuZnVuY3Rpb24gX3NsaWNlZFRvQXJyYXkociwgZSkgeyByZXR1cm4gX2FycmF5V2l0aEhvbGVzKHIpIHx8IF9pdGVyYWJsZVRvQXJyYXlMaW1pdChyLCBlKSB8fCBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkociwgZSkgfHwgX25vbkl0ZXJhYmxlUmVzdCgpOyB9XFxuZnVuY3Rpb24gX25vbkl0ZXJhYmxlUmVzdCgpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcXFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXFxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cXFwiKTsgfVxcbmZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShyLCBhKSB7IGlmIChyKSB7IGlmIChcXFwic3RyaW5nXFxcIiA9PSB0eXBlb2YgcikgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KHIsIGEpOyB2YXIgdCA9IHt9LnRvU3RyaW5nLmNhbGwocikuc2xpY2UoOCwgLTEpOyByZXR1cm4gXFxcIk9iamVjdFxcXCIgPT09IHQgJiYgci5jb25zdHJ1Y3RvciAmJiAodCA9IHIuY29uc3RydWN0b3IubmFtZSksIFxcXCJNYXBcXFwiID09PSB0IHx8IFxcXCJTZXRcXFwiID09PSB0ID8gQXJyYXkuZnJvbShyKSA6IFxcXCJBcmd1bWVudHNcXFwiID09PSB0IHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KHQpID8gX2FycmF5TGlrZVRvQXJyYXkociwgYSkgOiB2b2lkIDA7IH0gfVxcbmZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KHIsIGEpIHsgKG51bGwgPT0gYSB8fCBhID4gci5sZW5ndGgpICYmIChhID0gci5sZW5ndGgpOyBmb3IgKHZhciBlID0gMCwgbiA9IEFycmF5KGEpOyBlIDwgYTsgZSsrKSBuW2VdID0gcltlXTsgcmV0dXJuIG47IH1cXG5mdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5TGltaXQociwgbCkgeyB2YXIgdCA9IG51bGwgPT0gciA/IG51bGwgOiBcXFwidW5kZWZpbmVkXFxcIiAhPSB0eXBlb2YgU3ltYm9sICYmIHJbU3ltYm9sLml0ZXJhdG9yXSB8fCByW1xcXCJAQGl0ZXJhdG9yXFxcIl07IGlmIChudWxsICE9IHQpIHsgdmFyIGUsIG4sIGksIHUsIGEgPSBbXSwgZiA9ICEwLCBvID0gITE7IHRyeSB7IGlmIChpID0gKHQgPSB0LmNhbGwocikpLm5leHQsIDAgPT09IGwpIHsgaWYgKE9iamVjdCh0KSAhPT0gdCkgcmV0dXJuOyBmID0gITE7IH0gZWxzZSBmb3IgKDsgIShmID0gKGUgPSBpLmNhbGwodCkpLmRvbmUpICYmIChhLnB1c2goZS52YWx1ZSksIGEubGVuZ3RoICE9PSBsKTsgZiA9ICEwKTsgfSBjYXRjaCAocikgeyBvID0gITAsIG4gPSByOyB9IGZpbmFsbHkgeyB0cnkgeyBpZiAoIWYgJiYgbnVsbCAhPSB0W1xcXCJyZXR1cm5cXFwiXSAmJiAodSA9IHRbXFxcInJldHVyblxcXCJdKCksIE9iamVjdCh1KSAhPT0gdSkpIHJldHVybjsgfSBmaW5hbGx5IHsgaWYgKG8pIHRocm93IG47IH0gfSByZXR1cm4gYTsgfSB9XFxuZnVuY3Rpb24gX2FycmF5V2l0aEhvbGVzKHIpIHsgaWYgKEFycmF5LmlzQXJyYXkocikpIHJldHVybiByOyB9XFxuXFxuXFxuXFxudmFyIHVzZUlzR3Jvd3RoYm9va0lzTG9hZGVkID0gZnVuY3Rpb24gdXNlSXNHcm93dGhib29rSXNMb2FkZWQoKSB7XFxuICB2YXIgX3VzZVN0YXRlID0gKDAscmVhY3RfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy51c2VTdGF0ZSkoZmFsc2UpLFxcbiAgICBfdXNlU3RhdGUyID0gX3NsaWNlZFRvQXJyYXkoX3VzZVN0YXRlLCAyKSxcXG4gICAgaXNHQkxvYWRlZCA9IF91c2VTdGF0ZTJbMF0sXFxuICAgIHNldElzR0JMb2FkZWQgPSBfdXNlU3RhdGUyWzFdO1xcbiAgdmFyIF91c2VSZW1vdGVDb25maWcgPSAoMCxfZGVyaXZfYXBpX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19bXFxcImRlZmF1bHRcXFwiXSkodHJ1ZSksXFxuICAgIGRhdGEgPSBfdXNlUmVtb3RlQ29uZmlnLmRhdGE7XFxuICB2YXIgX3VzZVN0YXRlMyA9ICgwLHJlYWN0X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18udXNlU3RhdGUpKHRydWUpLFxcbiAgICBfdXNlU3RhdGU0ID0gX3NsaWNlZFRvQXJyYXkoX3VzZVN0YXRlMywgMiksXFxuICAgIGlzR0JBdmFpbGFibGUgPSBfdXNlU3RhdGU0WzBdLFxcbiAgICBzZXRpc0dCQXZhaWxhYmxlID0gX3VzZVN0YXRlNFsxXTtcXG4gICgwLHJlYWN0X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18udXNlRWZmZWN0KShmdW5jdGlvbiAoKSB7XFxuICAgIHZhciBhbmFseXRpY3NfaW50ZXJ2YWw7XFxuICAgIGlmIChkYXRhICE9PSBudWxsICYmIGRhdGEgIT09IHZvaWQgMCAmJiBkYXRhLm1hcmtldGluZ19ncm93dGhib29rKSB7XFxuICAgICAgdmFyIGNoZWNrc0NvdW50ZXIgPSAwO1xcbiAgICAgIGFuYWx5dGljc19pbnRlcnZhbCA9IHNldEludGVydmFsKGZ1bmN0aW9uICgpIHtcXG4gICAgICAgIHZhciBfQW5hbHl0aWNzJGdldEluc3RhbmM7XFxuICAgICAgICAvLyBDaGVjayBpZiB0aGUgYW5hbHl0aWNzIGluc3RhbmNlIGlzIGF2YWlsYWJsZSBmb3IgMTAgc2Vjb25kcyBiZWZvcmUgc2V0dGluZyB0aGUgZmVhdHVyZSBmbGFnIHZhbHVlXFxuICAgICAgICBpZiAoY2hlY2tzQ291bnRlciA+IDIwKSB7XFxuICAgICAgICAgIC8vIElmIHRoZSBhbmFseXRpY3MgaW5zdGFuY2UgaXMgbm90IGF2YWlsYWJsZSBhZnRlciAxMCBzZWNvbmRzLCBjbGVhciB0aGUgaW50ZXJ2YWxcXG4gICAgICAgICAgY2xlYXJJbnRlcnZhbChhbmFseXRpY3NfaW50ZXJ2YWwpO1xcbiAgICAgICAgICBzZXRpc0dCQXZhaWxhYmxlKGZhbHNlKTtcXG4gICAgICAgICAgcmV0dXJuO1xcbiAgICAgICAgfVxcbiAgICAgICAgY2hlY2tzQ291bnRlciArPSAxO1xcbiAgICAgICAgaWYgKF9kZXJpdl9jb21fYW5hbHl0aWNzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uQW5hbHl0aWNzICE9PSBudWxsICYmIF9kZXJpdl9jb21fYW5hbHl0aWNzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uQW5hbHl0aWNzICE9PSB2b2lkIDAgJiYgKF9BbmFseXRpY3MkZ2V0SW5zdGFuYyA9IF9kZXJpdl9jb21fYW5hbHl0aWNzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uQW5hbHl0aWNzLmdldEluc3RhbmNlcygpKSAhPT0gbnVsbCAmJiBfQW5hbHl0aWNzJGdldEluc3RhbmMgIT09IHZvaWQgMCAmJiBfQW5hbHl0aWNzJGdldEluc3RhbmMuYWIpIHtcXG4gICAgICAgICAgc2V0SXNHQkxvYWRlZCh0cnVlKTtcXG4gICAgICAgICAgY2xlYXJJbnRlcnZhbChhbmFseXRpY3NfaW50ZXJ2YWwpO1xcbiAgICAgICAgfVxcbiAgICAgIH0sIDUwMCk7XFxuICAgIH0gZWxzZSB7XFxuICAgICAgc2V0aXNHQkF2YWlsYWJsZShmYWxzZSk7XFxuICAgIH1cXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcXG4gICAgICBjbGVhckludGVydmFsKGFuYWx5dGljc19pbnRlcnZhbCk7XFxuICAgIH07XFxuICB9LCBbZGF0YS5tYXJrZXRpbmdfZ3Jvd3RoYm9va10pO1xcbiAgcmV0dXJuIHtcXG4gICAgaXNHQkxvYWRlZDogaXNHQkxvYWRlZCxcXG4gICAgaXNHQkF2YWlsYWJsZTogaXNHQkF2YWlsYWJsZVxcbiAgfTtcXG59O1xcbi8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gY29uc3QgX19XRUJQQUNLX0RFRkFVTFRfRVhQT1JUX18gPSAodXNlSXNHcm93dGhib29rSXNMb2FkZWQpOy8vIyBzb3VyY2VVUkw9W21vZHVsZV1cXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaUxpNHZhRzl2YTNNdmMzSmpMM1Z6WlVselIzSnZkM1JvWW05dmEweHZZV1JsWkM1MGN5SXNJbTFoY0hCcGJtZHpJam9pT3pzN096czdPenM3T3pzN096czdRVUZCUVR0QlFVTkJPMEZCUTBFN1FVRkZRVHRCUVVOQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlEwRTdRVUZCUVR0QlFVTkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJSVUU3UVVGRFFUdEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVRkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVWQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlEwRTdRVUZGUVNJc0luTnZkWEpqWlhNaU9sc2lkMlZpY0dGamF6b3ZMMEJrWlhKcGRpOTBjbUZrWlhJdkxpNHZhRzl2YTNNdmMzSmpMM1Z6WlVselIzSnZkM1JvWW05dmEweHZZV1JsWkM1MGN6ODBZakZrSWwwc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYkltbHRjRzl5ZENCN0lIVnpaVk4wWVhSbExDQjFjMlZGWm1abFkzUWdmU0JtY205dElDZHlaV0ZqZENjN1hHNXBiWEJ2Y25RZ2V5QkJibUZzZVhScFkzTWdmU0JtY205dElDZEFaR1Z5YVhZdFkyOXRMMkZ1WVd4NWRHbGpjeWM3WEc1cGJYQnZjblFnZXlCMWMyVlNaVzF2ZEdWRGIyNW1hV2NnZlNCbWNtOXRJQ2RBWkdWeWFYWXZZWEJwSnp0Y2JseHVZMjl1YzNRZ2RYTmxTWE5IY205M2RHaGliMjlyU1hOTWIyRmtaV1FnUFNBb0tTQTlQaUI3WEc0Z0lDQWdZMjl1YzNRZ1cybHpSMEpNYjJGa1pXUXNJSE5sZEVselIwSk1iMkZrWldSZElEMGdkWE5sVTNSaGRHVW9abUZzYzJVcE8xeHVJQ0FnSUdOdmJuTjBJSHNnWkdGMFlTQjlJRDBnZFhObFVtVnRiM1JsUTI5dVptbG5LSFJ5ZFdVcE8xeHVJQ0FnSUdOdmJuTjBJRnRwYzBkQ1FYWmhhV3hoWW14bExDQnpaWFJwYzBkQ1FYWmhhV3hoWW14bFhTQTlJSFZ6WlZOMFlYUmxQR0p2YjJ4bFlXNCtLSFJ5ZFdVcE8xeHVYRzRnSUNBZ2RYTmxSV1ptWldOMEtDZ3BJRDArSUh0Y2JpQWdJQ0FnSUNBZ2JHVjBJR0Z1WVd4NWRHbGpjMTlwYm5SbGNuWmhiRG9nVG05a1pVcFRMbFJwYldWdmRYUTdYRzVjYmlBZ0lDQWdJQ0FnYVdZZ0tHUmhkR0UvTG0xaGNtdGxkR2x1WjE5bmNtOTNkR2hpYjI5cktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdZMmhsWTJ0elEyOTFiblJsY2lBOUlEQTdYRzRnSUNBZ0lDQWdJQ0FnSUNCaGJtRnNlWFJwWTNOZmFXNTBaWEoyWVd3Z1BTQnpaWFJKYm5SbGNuWmhiQ2dvS1NBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeThnUTJobFkyc2dhV1lnZEdobElHRnVZV3g1ZEdsamN5QnBibk4wWVc1alpTQnBjeUJoZG1GcGJHRmliR1VnWm05eUlERXdJSE5sWTI5dVpITWdZbVZtYjNKbElITmxkSFJwYm1jZ2RHaGxJR1psWVhSMWNtVWdabXhoWnlCMllXeDFaVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoamFHVmphM05EYjNWdWRHVnlJRDRnTWpBcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1NXWWdkR2hsSUdGdVlXeDVkR2xqY3lCcGJuTjBZVzVqWlNCcGN5QnViM1FnWVhaaGFXeGhZbXhsSUdGbWRHVnlJREV3SUhObFkyOXVaSE1zSUdOc1pXRnlJSFJvWlNCcGJuUmxjblpoYkZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiR1ZoY2tsdWRHVnlkbUZzS0dGdVlXeDVkR2xqYzE5cGJuUmxjblpoYkNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE5sZEdselIwSkJkbUZwYkdGaWJHVW9abUZzYzJVcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05vWldOcmMwTnZkVzUwWlhJZ0t6MGdNVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1FXNWhiSGwwYVdOelB5NW5aWFJKYm5OMFlXNWpaWE1vS1Q4dVlXSXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MyVjBTWE5IUWt4dllXUmxaQ2gwY25WbEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJ4bFlYSkpiblJsY25aaGJDaGhibUZzZVhScFkzTmZhVzUwWlhKMllXd3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lIMHNJRFV3TUNrN1hHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J6WlhScGMwZENRWFpoYVd4aFlteGxLR1poYkhObEtUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdLQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWTJ4bFlYSkpiblJsY25aaGJDaGhibUZzZVhScFkzTmZhVzUwWlhKMllXd3BPMXh1SUNBZ0lDQWdJQ0I5TzF4dUlDQWdJSDBzSUZ0a1lYUmhMbTFoY210bGRHbHVaMTluY205M2RHaGliMjlyWFNrN1hHNWNiaUFnSUNCeVpYUjFjbTRnZXlCcGMwZENURzloWkdWa0xDQnBjMGRDUVhaaGFXeGhZbXhsSUgwN1hHNTlPMXh1WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0IxYzJWSmMwZHliM2QwYUdKdmIydEpjMHh2WVdSbFpEdGNiaUpkTENKdVlXMWxjeUk2VzEwc0luTnZkWEpqWlZKdmIzUWlPaUlpZlE9PVxcbi8vIyBzb3VyY2VVUkw9d2VicGFjay1pbnRlcm5hbDovLy8uLi9ob29rcy9zcmMvdXNlSXNHcm93dGhib29rTG9hZGVkLnRzXFxuXCIpO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3NyYy9pbmRleC50c3hcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL2luZGV4LnRzeCAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cbmV2YWwoXCJfX3dlYnBhY2tfcmVxdWlyZV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyk7XFxuLyogaGFybW9ueSBleHBvcnQgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIHtcXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFxcXCJkZWZhdWx0XFxcIjogKCkgPT4gKF9fV0VCUEFDS19ERUZBVUxUX0VYUE9SVF9fKVxcbi8qIGhhcm1vbnkgZXhwb3J0ICovIH0pO1xcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciByZWFjdF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgcmVhY3QgKi8gXFxcInJlYWN0XFxcIik7XFxuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIHJlYWN0X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdCA9IC8qI19fUFVSRV9fKi9fX3dlYnBhY2tfcmVxdWlyZV9fLm4ocmVhY3RfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyk7XFxuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9kZXJpdl9zaGFyZWRfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIEBkZXJpdi9zaGFyZWQgKi8gXFxcIkBkZXJpdi9zaGFyZWRcXFwiKTtcXG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX2Rlcml2X3NoYXJlZF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fX2RlZmF1bHQgPSAvKiNfX1BVUkVfXyovX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9kZXJpdl9zaGFyZWRfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyk7XFxuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9kZXJpdl9jb21wb25lbnRzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBAZGVyaXYvY29tcG9uZW50cyAqLyBcXFwiQGRlcml2L2NvbXBvbmVudHNcXFwiKTtcXG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX2Rlcml2X2NvbXBvbmVudHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX19kZWZhdWx0ID0gLyojX19QVVJFX18qL19fd2VicGFja19yZXF1aXJlX18ubihfZGVyaXZfY29tcG9uZW50c19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fKTtcXG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX2Rlcml2X2hvb2tzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBAZGVyaXYvaG9va3MgKi8gXFxcIi4uL2hvb2tzL3NyYy91c2VEdHJhZGVyVjJGbGFnLnRzXFxcIik7XFxuXFxuXFxuXFxuXFxudmFyIEFwcExvYWRlciA9ICgwLF9kZXJpdl9zaGFyZWRfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5tYWtlTGF6eUxvYWRlcikoZnVuY3Rpb24gKCkge1xcbiAgcmV0dXJuICgwLF9kZXJpdl9zaGFyZWRfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5tb2R1bGVMb2FkZXIpKGZ1bmN0aW9uICgpIHtcXG4gICAgcmV0dXJuIFByb21pc2UuYWxsKC8qISBpbXBvcnQoKSB8IHRyYWRlci1hcHAgKi9bX193ZWJwYWNrX3JlcXVpcmVfXy5lKFxcXCJ2ZW5kb3JzLW5vZGVfbW9kdWxlc19ib3dzZXJfZXM1X2pzLW5vZGVfbW9kdWxlc19kYXlqc19kYXlqc19taW5fanMtbm9kZV9tb2R1bGVzX2xvZGFzaF9kZWJvdW4tYmJiMjc3XFxcIiksIF9fd2VicGFja19yZXF1aXJlX18uZShcXFwidmVuZG9ycy1ub2RlX21vZHVsZXNfcmVhY3QtY29udGVudC1sb2FkZXJfZGlzdF9yZWFjdC1jb250ZW50LWxvYWRlcl9lc19qcy1ub2RlX21vZHVsZXNfcmVhY3QtLWMxMDEzMVxcXCIpLCBfX3dlYnBhY2tfcmVxdWlyZV9fLmUoXFxcInNyY19zYXNzX2FwcF9zY3NzLXNyY19BcHBfQ29tcG9uZW50c19FbGVtZW50c19Qb3NpdGlvbnNEcmF3ZXJfaGVscGVyc19pbmRleF90cy1zcmNfQXBwX2luaXQtcy1iYTU4ZjhcXFwiKSwgX193ZWJwYWNrX3JlcXVpcmVfXy5lKFxcXCJ0cmFkZXItYXBwXFxcIildKS50aGVuKF9fd2VicGFja19yZXF1aXJlX18uYmluZChfX3dlYnBhY2tfcmVxdWlyZV9fLCAvKiEgLi9BcHAvaW5kZXggKi8gXFxcIi4vc3JjL0FwcC9pbmRleC50c3hcXFwiKSk7XFxuICB9KTtcXG59LCBmdW5jdGlvbiAoKSB7XFxuICByZXR1cm4gLyojX19QVVJFX18qL3JlYWN0X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdCgpLmNyZWF0ZUVsZW1lbnQoX2Rlcml2X2NvbXBvbmVudHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXy5Mb2FkaW5nLCBudWxsKTtcXG59KSgpO1xcbnZhciBBcHBWMkxvYWRlciA9ICgwLF9kZXJpdl9zaGFyZWRfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5tYWtlTGF6eUxvYWRlcikoZnVuY3Rpb24gKCkge1xcbiAgcmV0dXJuICgwLF9kZXJpdl9zaGFyZWRfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5tb2R1bGVMb2FkZXIpKGZ1bmN0aW9uICgpIHtcXG4gICAgcmV0dXJuIFByb21pc2UuYWxsKC8qISBpbXBvcnQoKSB8IHRyYWRlci1hcHAtdjIgKi9bX193ZWJwYWNrX3JlcXVpcmVfXy5lKFxcXCJ2ZW5kb3JzLW5vZGVfbW9kdWxlc19ib3dzZXJfZXM1X2pzLW5vZGVfbW9kdWxlc19kYXlqc19kYXlqc19taW5fanMtbm9kZV9tb2R1bGVzX2xvZGFzaF9kZWJvdW4tYmJiMjc3XFxcIiksIF9fd2VicGFja19yZXF1aXJlX18uZShcXFwidmVuZG9ycy1ub2RlX21vZHVsZXNfY2xvdWRmbGFyZV9zdHJlYW0tcmVhY3RfZGlzdF9zdHJlYW0tcmVhY3RfZXNtX2pzLW5vZGVfbW9kdWxlc19kZXJpdl9xdWlsLTE0NTE0MFxcXCIpLCBfX3dlYnBhY2tfcmVxdWlyZV9fLmUoXFxcImhvb2tzX3NyY191c2VNRkFjY291bnRTdGF0dXNfdHMtc3JjX01vZHVsZXNfVHJhZGluZ19IZWxwZXJzX3ZpZGVvLWNvbmZpZ190cy1zcmNfU3RvcmVzX01vZHVsZS03N2M2NGVcXFwiKSwgX193ZWJwYWNrX3JlcXVpcmVfXy5lKFxcXCJzcmNfc2Fzc19hcHBfc2Nzcy1zcmNfQXBwX0NvbXBvbmVudHNfRWxlbWVudHNfUG9zaXRpb25zRHJhd2VyX2hlbHBlcnNfaW5kZXhfdHMtc3JjX0FwcF9pbml0LXMtYmE1OGY4XFxcIiksIF9fd2VicGFja19yZXF1aXJlX18uZShcXFwic3JjX01vZHVsZXNfQ29udHJhY3RfQ29udGFpbmVyc19yZXBsYXktY2hhcnRfdHN4LXNyY19TdG9yZXNfTW9kdWxlc19UcmFkaW5nX0hlbHBlcnNfbG9naWNfdHNcXFwiKSwgX193ZWJwYWNrX3JlcXVpcmVfXy5lKFxcXCJ0cmFkZXItYXBwLXYyXFxcIildKS50aGVuKF9fd2VicGFja19yZXF1aXJlX18uYmluZChfX3dlYnBhY2tfcmVxdWlyZV9fLCAvKiEgLi9BcHBWMi9pbmRleCAqLyBcXFwiLi9zcmMvQXBwVjIvaW5kZXgudHN4XFxcIikpO1xcbiAgfSk7XFxufSwgZnVuY3Rpb24gKCkge1xcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9yZWFjdF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQoKS5jcmVhdGVFbGVtZW50KF9kZXJpdl9jb21wb25lbnRzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18uTG9hZGluZy5EVHJhZGVyVjIsIHtcXG4gICAgaW5pdGlhbF9hcHBfbG9hZGluZzogdHJ1ZSxcXG4gICAgaXNfY29udHJhY3RfZGV0YWlsczogd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lLnN0YXJ0c1dpdGgoJy9jb250cmFjdC8nKSxcXG4gICAgaXNfcG9zaXRpb25zOiB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUgPT09IF9kZXJpdl9zaGFyZWRfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5yb3V0ZXMudHJhZGVyX3Bvc2l0aW9ucyxcXG4gICAgaXNfY2xvc2VkX3RhYjogKDAsX2Rlcml2X3NoYXJlZF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLmdldFBvc2l0aW9uc1YyVGFiSW5kZXhGcm9tVVJMKSgpID09PSAxXFxuICB9KTtcXG59KSgpO1xcbnZhciBBcHAgPSBmdW5jdGlvbiBBcHAoX3JlZikge1xcbiAgdmFyIHBhc3N0aHJvdWdoID0gX3JlZi5wYXNzdGhyb3VnaDtcXG4gIHZhciBfdXNlRHRyYWRlclYyRmxhZyA9ICgwLF9kZXJpdl9ob29rc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fW1xcXCJkZWZhdWx0XFxcIl0pKCksXFxuICAgIGR0cmFkZXJfdjJfZW5hYmxlZCA9IF91c2VEdHJhZGVyVjJGbGFnLmR0cmFkZXJfdjJfZW5hYmxlZCxcXG4gICAgbG9hZF9kdHJhZGVyX21vZHVsZSA9IF91c2VEdHJhZGVyVjJGbGFnLmxvYWRfZHRyYWRlcl9tb2R1bGU7XFxuICBpZiAobG9hZF9kdHJhZGVyX21vZHVsZSkge1xcbiAgICByZXR1cm4gZHRyYWRlcl92Ml9lbmFibGVkID8gLyojX19QVVJFX18qL3JlYWN0X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdCgpLmNyZWF0ZUVsZW1lbnQoQXBwVjJMb2FkZXIsIHtcXG4gICAgICBwYXNzdGhyb3VnaDogcGFzc3Rocm91Z2hcXG4gICAgfSkgOiAvKiNfX1BVUkVfXyovcmVhY3RfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX19kZWZhdWx0KCkuY3JlYXRlRWxlbWVudChBcHBMb2FkZXIsIHtcXG4gICAgICBwYXNzdGhyb3VnaDogcGFzc3Rocm91Z2hcXG4gICAgfSk7XFxuICB9XFxuICByZXR1cm4gLyojX19QVVJFX18qL3JlYWN0X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdCgpLmNyZWF0ZUVsZW1lbnQoX2Rlcml2X2NvbXBvbmVudHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXy5Mb2FkaW5nLCBudWxsKTtcXG59O1xcbi8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gY29uc3QgX19XRUJQQUNLX0RFRkFVTFRfRVhQT1JUX18gPSAoQXBwKTsvLyMgc291cmNlVVJMPVttb2R1bGVdXFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lMaTl6Y21NdmFXNWtaWGd1ZEhONElpd2liV0Z3Y0dsdVozTWlPaUk3T3pzN096czdPenM3TzBGQlFVRTdRVUZEUVR0QlFVTkJPMEZCUjBFN1FVRlRRVHRCUVVOQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlEwRTdRVUZCUVR0QlFVZEJPMEZCUTBFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGRFFUdEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUVVFN1FVRkRRVHRCUVVsQk8wRkJRVUU3UVVGRFFUdEJRVUZCTzBGQlFVRTdRVUZEUVR0QlFVTkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVNJc0luTnZkWEpqWlhNaU9sc2lkMlZpY0dGamF6b3ZMMEJrWlhKcGRpOTBjbUZrWlhJdkxpOXpjbU12YVc1a1pYZ3VkSE40UDJRNU9EWWlYU3dpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpYVcxd2IzSjBJRkpsWVdOMElHWnliMjBnSjNKbFlXTjBKenRjYm1sdGNHOXlkQ0I3SUdkbGRGQnZjMmwwYVc5dWMxWXlWR0ZpU1c1a1pYaEdjbTl0VlZKTUxDQnRZV3RsVEdGNmVVeHZZV1JsY2l3Z2JXOWtkV3hsVEc5aFpHVnlMQ0J5YjNWMFpYTWdmU0JtY205dElDZEFaR1Z5YVhZdmMyaGhjbVZrSnp0Y2JtbHRjRzl5ZENCN0lFeHZZV1JwYm1jZ2ZTQm1jbTl0SUNkQVpHVnlhWFl2WTI5dGNHOXVaVzUwY3ljN1hHNXBiWEJ2Y25RZ2V5QlVRMjl5WlZOMGIzSmxjeUI5SUdaeWIyMGdKMEJrWlhKcGRpOXpkRzl5WlhNdmRIbHdaWE1uTzF4dWFXMXdiM0owSUhzZ1ZGZGxZbE52WTJ0bGRDQjlJR1p5YjIwZ0oxUjVjR1Z6Snp0Y2JtbHRjRzl5ZENCN0lIVnpaVVIwY21Ga1pYSldNa1pzWVdjZ2ZTQm1jbTl0SUNkQVpHVnlhWFl2YUc5dmEzTW5PMXh1WEc1MGVYQmxJRUZ3Y0hSNWNHVnpJRDBnZTF4dUlDQWdJSEJoYzNOMGFISnZkV2RvT2lCN1hHNGdJQ0FnSUNBZ0lISnZiM1JmYzNSdmNtVTZJRlJEYjNKbFUzUnZjbVZ6TzF4dUlDQWdJQ0FnSUNCWFV6b2dWRmRsWWxOdlkydGxkRHRjYmlBZ0lDQjlPMXh1ZlR0Y2JseHVZMjl1YzNRZ1FYQndURzloWkdWeUlEMGdiV0ZyWlV4aGVubE1iMkZrWlhJb1hHNGdJQ0FnS0NrZ1BUNGdiVzlrZFd4bFRHOWhaR1Z5S0NncElEMCtJR2x0Y0c5eWRDZ3ZLaUIzWldKd1lXTnJRMmgxYm10T1lXMWxPaUJjSW5SeVlXUmxjaTFoY0hCY0lpd2dkMlZpY0dGamExQnlaV3h2WVdRNklIUnlkV1VnS2k4Z0p5NHZRWEJ3TDJsdVpHVjRKeWtwTEZ4dUlDQWdJQ2dwSUQwK0lEeE1iMkZrYVc1bklDOCtYRzRwS0NrZ1lYTWdVbVZoWTNRdVEyOXRjRzl1Wlc1MFZIbHdaVHhCY0hCMGVYQmxjejQ3WEc1Y2JtTnZibk4wSUVGd2NGWXlURzloWkdWeUlEMGdiV0ZyWlV4aGVubE1iMkZrWlhJb1hHNGdJQ0FnS0NrZ1BUNGdiVzlrZFd4bFRHOWhaR1Z5S0NncElEMCtJR2x0Y0c5eWRDZ3ZLaUIzWldKd1lXTnJRMmgxYm10T1lXMWxPaUJjSW5SeVlXUmxjaTFoY0hBdGRqSmNJaXdnZDJWaWNHRmphMUJ5Wld4dllXUTZJSFJ5ZFdVZ0tpOGdKeTR2UVhCd1ZqSXZhVzVrWlhnbktTa3NYRzRnSUNBZ0tDa2dQVDRnS0Z4dUlDQWdJQ0FnSUNBOFRHOWhaR2x1Wnk1RVZISmhaR1Z5VmpKY2JpQWdJQ0FnSUNBZ0lDQWdJR2x1YVhScFlXeGZZWEJ3WDJ4dllXUnBibWRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbHpYMk52Ym5SeVlXTjBYMlJsZEdGcGJITTllM2RwYm1SdmR5NXNiMk5oZEdsdmJpNXdZWFJvYm1GdFpTNXpkR0Z5ZEhOWGFYUm9LQ2N2WTI5dWRISmhZM1F2SnlsOVhHNGdJQ0FnSUNBZ0lDQWdJQ0JwYzE5d2IzTnBkR2x2Ym5NOWUzZHBibVJ2ZHk1c2IyTmhkR2x2Ymk1d1lYUm9ibUZ0WlNBOVBUMGdjbTkxZEdWekxuUnlZV1JsY2w5d2IzTnBkR2x2Ym5OOVhHNGdJQ0FnSUNBZ0lDQWdJQ0JwYzE5amJHOXpaV1JmZEdGaVBYdG5aWFJRYjNOcGRHbHZibk5XTWxSaFlrbHVaR1Y0Um5KdmJWVlNUQ2dwSUQwOVBTQXhmVnh1SUNBZ0lDQWdJQ0F2UGx4dUlDQWdJQ2xjYmlrb0tTQmhjeUJTWldGamRDNURiMjF3YjI1bGJuUlVlWEJsUEVGd2NIUjVjR1Z6UGp0Y2JseHVZMjl1YzNRZ1FYQndJRDBnS0hzZ2NHRnpjM1JvY205MVoyZ2dmVG9nUVhCd2RIbHdaWE1wSUQwK0lIdGNiaUFnSUNCamIyNXpkQ0I3SUdSMGNtRmtaWEpmZGpKZlpXNWhZbXhsWkN3Z2JHOWhaRjlrZEhKaFpHVnlYMjF2WkhWc1pTQjlJRDBnZFhObFJIUnlZV1JsY2xZeVJteGhaeWdwTzF4dUlDQWdJR2xtSUNoc2IyRmtYMlIwY21Ga1pYSmZiVzlrZFd4bEtTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQmtkSEpoWkdWeVgzWXlYMlZ1WVdKc1pXUWdQeUE4UVhCd1ZqSk1iMkZrWlhJZ2NHRnpjM1JvY205MVoyZzllM0JoYzNOMGFISnZkV2RvZlNBdlBpQTZJRHhCY0hCTWIyRmtaWElnY0dGemMzUm9jbTkxWjJnOWUzQmhjM04wYUhKdmRXZG9mU0F2UGp0Y2JpQWdJQ0I5WEc0Z0lDQWdjbVYwZFhKdUlEeE1iMkZrYVc1bklDOCtPMXh1ZlR0Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUVGd2NEdGNiaUpkTENKdVlXMWxjeUk2VzEwc0luTnZkWEpqWlZKdmIzUWlPaUlpZlE9PVxcbi8vIyBzb3VyY2VVUkw9d2VicGFjay1pbnRlcm5hbDovLy8uL3NyYy9pbmRleC50c3hcXG5cIik7XG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIkBkZXJpdi1jb20vYW5hbHl0aWNzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogZXh0ZXJuYWwgXCJAZGVyaXYtY29tL2FuYWx5dGljc1wiICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoKG1vZHVsZSkgPT4ge1xuXG5tb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfX2Rlcml2X2NvbV9hbmFseXRpY3NfXztcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiQGRlcml2L2NvbXBvbmVudHNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiBleHRlcm5hbCBcIkBkZXJpdi9jb21wb25lbnRzXCIgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovICgobW9kdWxlKSA9PiB7XG5cbm1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9fZGVyaXZfY29tcG9uZW50c19fO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gXCJAZGVyaXYvZGVyaXYtY2hhcnRzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiBleHRlcm5hbCBcIkBkZXJpdi9kZXJpdi1jaGFydHNcIiAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoKG1vZHVsZSkgPT4ge1xuXG5tb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfX2Rlcml2X2Rlcml2X2NoYXJ0c19fO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gXCJAZGVyaXYvc2hhcmVkXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiBleHRlcm5hbCBcIkBkZXJpdi9zaGFyZWRcIiAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoKG1vZHVsZSkgPT4ge1xuXG5tb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfX2Rlcml2X3NoYXJlZF9fO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gXCJAZGVyaXYvc2hhcmVkL3NyYy91dGlscy9wbGF0Zm9ybS9wbGF0Zm9ybVwiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIGV4dGVybmFsIFwiQGRlcml2L3NoYXJlZC9zcmMvdXRpbHMvcGxhdGZvcm0vcGxhdGZvcm1cIiAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKChtb2R1bGUpID0+IHtcblxubW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX19kZXJpdl9zaGFyZWRfc3JjX3V0aWxzX3BsYXRmb3JtX3BsYXRmb3JtX187XG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIkBkZXJpdi90cmFuc2xhdGlvbnNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIGV4dGVybmFsIFwiQGRlcml2L3RyYW5zbGF0aW9uc1wiICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovICgobW9kdWxlKSA9PiB7XG5cbm1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9fZGVyaXZfdHJhbnNsYXRpb25zX187XG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIm1vYnhcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIGV4dGVybmFsIFwibW9ieFwiICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovICgobW9kdWxlKSA9PiB7XG5cbm1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9tb2J4X187XG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIm1vYngtcmVhY3RcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIGV4dGVybmFsIFwibW9ieC1yZWFjdFwiICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovICgobW9kdWxlKSA9PiB7XG5cbm1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9tb2J4X3JlYWN0X187XG5cbi8qKiovIH0pLFxuXG4vKioqLyBcInJlYWN0XCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogZXh0ZXJuYWwgXCJyZWFjdFwiICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoKG1vZHVsZSkgPT4ge1xuXG5tb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfcmVhY3RfXztcblxuLyoqKi8gfSksXG5cbi8qKiovIFwicmVhY3QtZG9tXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIGV4dGVybmFsIFwicmVhY3QtZG9tXCIgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoKG1vZHVsZSkgPT4ge1xuXG5tb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfcmVhY3RfZG9tX187XG5cbi8qKiovIH0pLFxuXG4vKioqLyBcInJlYWN0LXJvdXRlclwiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiBleHRlcm5hbCBcInJlYWN0LXJvdXRlclwiICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKChtb2R1bGUpID0+IHtcblxubW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX3JlYWN0X3JvdXRlcl9fO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gXCJyZWFjdC1yb3V0ZXItZG9tXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiBleHRlcm5hbCBcInJlYWN0LXJvdXRlci1kb21cIiAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoKG1vZHVsZSkgPT4ge1xuXG5tb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfcmVhY3Rfcm91dGVyX2RvbV9fO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuLi8uLi9ub2RlX21vZHVsZXMvQGRlcml2LWNvbS91aS9kaXN0L19jb21tb25qc0hlbHBlcnMtQmtmZVVVSy0uanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4uLy4uL25vZGVfbW9kdWxlcy9AZGVyaXYtY29tL3VpL2Rpc3QvX2NvbW1vbmpzSGVscGVycy1Ca2ZlVVVLLS5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfX193ZWJwYWNrX21vZHVsZV9fLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cbmV2YWwoXCJfX3dlYnBhY2tfcmVxdWlyZV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyk7XFxuLyogaGFybW9ueSBleHBvcnQgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIHtcXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIGE6ICgpID0+ICgvKiBiaW5kaW5nICovIGwpLFxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgYzogKCkgPT4gKC8qIGJpbmRpbmcgKi8gdSksXFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBnOiAoKSA9PiAoLyogYmluZGluZyAqLyBmKVxcbi8qIGhhcm1vbnkgZXhwb3J0ICovIH0pO1xcbnZhciB1ID0gdHlwZW9mIGdsb2JhbFRoaXMgPCBcXFwidVxcXCIgPyBnbG9iYWxUaGlzIDogdHlwZW9mIHdpbmRvdyA8IFxcXCJ1XFxcIiA/IHdpbmRvdyA6IHR5cGVvZiBnbG9iYWwgPCBcXFwidVxcXCIgPyBnbG9iYWwgOiB0eXBlb2Ygc2VsZiA8IFxcXCJ1XFxcIiA/IHNlbGYgOiB7fTtcXG5mdW5jdGlvbiBmKGUpIHtcXG4gIHJldHVybiBlICYmIGUuX19lc01vZHVsZSAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSwgXFxcImRlZmF1bHRcXFwiKSA/IGUuZGVmYXVsdCA6IGU7XFxufVxcbmZ1bmN0aW9uIGwoZSkge1xcbiAgaWYgKGUuX19lc01vZHVsZSkgcmV0dXJuIGU7XFxuICB2YXIgciA9IGUuZGVmYXVsdDtcXG4gIGlmICh0eXBlb2YgciA9PSBcXFwiZnVuY3Rpb25cXFwiKSB7XFxuICAgIHZhciB0ID0gZnVuY3Rpb24gbygpIHtcXG4gICAgICByZXR1cm4gdGhpcyBpbnN0YW5jZW9mIG8gPyBSZWZsZWN0LmNvbnN0cnVjdChyLCBhcmd1bWVudHMsIHRoaXMuY29uc3RydWN0b3IpIDogci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xcbiAgICB9O1xcbiAgICB0LnByb3RvdHlwZSA9IHIucHJvdG90eXBlO1xcbiAgfSBlbHNlIHQgPSB7fTtcXG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkodCwgXFxcIl9fZXNNb2R1bGVcXFwiLCB7IHZhbHVlOiAhMCB9KSwgT2JqZWN0LmtleXMoZSkuZm9yRWFjaChmdW5jdGlvbihvKSB7XFxuICAgIHZhciBuID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihlLCBvKTtcXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIG8sIG4uZ2V0ID8gbiA6IHtcXG4gICAgICBlbnVtZXJhYmxlOiAhMCxcXG4gICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xcbiAgICAgICAgcmV0dXJuIGVbb107XFxuICAgICAgfVxcbiAgICB9KTtcXG4gIH0pLCB0O1xcbn1cXG5cXG4vLyMgc291cmNlVVJMPVttb2R1bGVdXFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lMaTR2TGk0dmJtOWtaVjl0YjJSMWJHVnpMMEJrWlhKcGRpMWpiMjB2ZFdrdlpHbHpkQzlmWTI5dGJXOXVhbk5JWld4d1pYSnpMVUpyWm1WVlZVc3RMbXB6SWl3aWJXRndjR2x1WjNNaU9pSTdPenM3T3p0QlFVRkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGTFFTSXNJbk52ZFhKalpYTWlPbHNpZDJWaWNHRmphem92TDBCa1pYSnBkaTkwY21Ga1pYSXZMaTR2TGk0dmJtOWtaVjl0YjJSMWJHVnpMMEJrWlhKcGRpMWpiMjB2ZFdrdlpHbHpkQzlmWTI5dGJXOXVhbk5JWld4d1pYSnpMVUpyWm1WVlZVc3RMbXB6UDJSak1EY2lYU3dpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpZG1GeUlIVWdQU0IwZVhCbGIyWWdaMnh2WW1Gc1ZHaHBjeUE4SUZ3aWRWd2lJRDhnWjJ4dlltRnNWR2hwY3lBNklIUjVjR1Z2WmlCM2FXNWtiM2NnUENCY0luVmNJaUEvSUhkcGJtUnZkeUE2SUhSNWNHVnZaaUJuYkc5aVlXd2dQQ0JjSW5WY0lpQS9JR2RzYjJKaGJDQTZJSFI1Y0dWdlppQnpaV3htSUR3Z1hDSjFYQ0lnUHlCelpXeG1JRG9nZTMwN1hHNW1kVzVqZEdsdmJpQm1LR1VwSUh0Y2JpQWdjbVYwZFhKdUlHVWdKaVlnWlM1ZlgyVnpUVzlrZFd4bElDWW1JRTlpYW1WamRDNXdjbTkwYjNSNWNHVXVhR0Z6VDNkdVVISnZjR1Z5ZEhrdVkyRnNiQ2hsTENCY0ltUmxabUYxYkhSY0lpa2dQeUJsTG1SbFptRjFiSFFnT2lCbE8xeHVmVnh1Wm5WdVkzUnBiMjRnYkNobEtTQjdYRzRnSUdsbUlDaGxMbDlmWlhOTmIyUjFiR1VwSUhKbGRIVnliaUJsTzF4dUlDQjJZWElnY2lBOUlHVXVaR1ZtWVhWc2REdGNiaUFnYVdZZ0tIUjVjR1Z2WmlCeUlEMDlJRndpWm5WdVkzUnBiMjVjSWlrZ2UxeHVJQ0FnSUhaaGNpQjBJRDBnWm5WdVkzUnBiMjRnYnlncElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCMGFHbHpJR2x1YzNSaGJtTmxiMllnYnlBL0lGSmxabXhsWTNRdVkyOXVjM1J5ZFdOMEtISXNJR0Z5WjNWdFpXNTBjeXdnZEdocGN5NWpiMjV6ZEhKMVkzUnZjaWtnT2lCeUxtRndjR3g1S0hSb2FYTXNJR0Z5WjNWdFpXNTBjeWs3WEc0Z0lDQWdmVHRjYmlBZ0lDQjBMbkJ5YjNSdmRIbHdaU0E5SUhJdWNISnZkRzkwZVhCbE8xeHVJQ0I5SUdWc2MyVWdkQ0E5SUh0OU8xeHVJQ0J5WlhSMWNtNGdUMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblI1S0hRc0lGd2lYMTlsYzAxdlpIVnNaVndpTENCN0lIWmhiSFZsT2lBaE1DQjlLU3dnVDJKcVpXTjBMbXRsZVhNb1pTa3VabTl5UldGamFDaG1kVzVqZEdsdmJpaHZLU0I3WEc0Z0lDQWdkbUZ5SUc0Z1BTQlBZbXBsWTNRdVoyVjBUM2R1VUhKdmNHVnlkSGxFWlhOamNtbHdkRzl5S0dVc0lHOHBPMXh1SUNBZ0lFOWlhbVZqZEM1a1pXWnBibVZRY205d1pYSjBlU2gwTENCdkxDQnVMbWRsZENBL0lHNGdPaUI3WEc0Z0lDQWdJQ0JsYm5WdFpYSmhZbXhsT2lBaE1DeGNiaUFnSUNBZ0lHZGxkRG9nWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCbFcyOWRPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMHBPMXh1SUNCOUtTd2dkRHRjYm4xY2JtVjRjRzl5ZENCN1hHNGdJR3dnWVhNZ1lTeGNiaUFnZFNCaGN5QmpMRnh1SUNCbUlHRnpJR2RjYm4wN1hHNGlYU3dpYm1GdFpYTWlPbHRkTENKemIzVnlZMlZTYjI5MElqb2lJbjA9XFxuLy8jIHNvdXJjZVVSTD13ZWJwYWNrLWludGVybmFsOi8vLy4uLy4uL25vZGVfbW9kdWxlcy9AZGVyaXYtY29tL3VpL2Rpc3QvX2NvbW1vbmpzSGVscGVycy1Ca2ZlVVVLLS5qc1xcblwiKTtcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi4vLi4vbm9kZV9tb2R1bGVzL0BkZXJpdi1jb20vdWkvZGlzdC9ob29rcy91c2VEZXZpY2UuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi4vLi4vbm9kZV9tb2R1bGVzL0BkZXJpdi1jb20vdWkvZGlzdC9ob29rcy91c2VEZXZpY2UuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfX193ZWJwYWNrX21vZHVsZV9fLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cbmV2YWwoXCJfX3dlYnBhY2tfcmVxdWlyZV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyk7XFxuLyogaGFybW9ueSBleHBvcnQgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIHtcXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIHVzZURldmljZTogKCkgPT4gKC8qIGJpbmRpbmcgKi8gZClcXG4vKiBoYXJtb255IGV4cG9ydCAqLyB9KTtcXG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX2luZGV4X0VZMWd3bDVPX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbmRleC1FWTFnd2w1Ty5qcyAqLyBcXFwiLi4vLi4vbm9kZV9tb2R1bGVzL0BkZXJpdi1jb20vdWkvZGlzdC9pbmRleC1FWTFnd2w1Ty5qc1xcXCIpO1xcblxcbmNvbnN0IGQgPSAoKSA9PiB7XFxuICBjb25zdCBpID0gKDAsX2luZGV4X0VZMWd3bDVPX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18udSkoXFxcIihtaW4td2lkdGg6IDEyODBweClcXFwiKSwgYSA9ICgwLF9pbmRleF9FWTFnd2w1T19qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLnUpKFxcXCIobWF4LXdpZHRoOiA2MDBweClcXFwiKSwgbiA9ICgwLF9pbmRleF9FWTFnd2w1T19qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLnUpKFxcbiAgICBcXFwiKG1pbi13aWR0aDogNjAxcHgpIGFuZCAobWF4LXdpZHRoOiAxMjc5cHgpXFxcIlxcbiAgKSwgZSA9ICgwLF9pbmRleF9FWTFnd2w1T19qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLnUpKFxcbiAgICBcXFwiKG1pbi13aWR0aDogNjAxcHgpIGFuZCAobWF4LXdpZHRoOiAxMjc5cHgpIGFuZCAob3JpZW50YXRpb246IHBvcnRyYWl0KVxcXCJcXG4gICksIG8gPSAoMCxfaW5kZXhfRVkxZ3dsNU9fanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy51KShcXG4gICAgXFxcIihtYXgtd2lkdGg6IDEyNzlweCkgYW5kIChvcmllbnRhdGlvbjogbGFuZHNjYXBlKVxcXCJcXG4gICk7XFxuICByZXR1cm4ge1xcbiAgICAvKiogcmV0dXJucyBMYXJnZXIgc2NyZWVuIHRhYmxldHMgW21pbi13aWR0aDogMTI4MHB4XSAqL1xcbiAgICBpc0Rlc2t0b3A6IGksXFxuICAgIC8qKiAgcmV0dXJucyBTbWFsbGVyIHNjcmVlbiB0YWJsZXRzIFttYXgtd2lkdGg6IDYwMHB4XSAqL1xcbiAgICBpc01vYmlsZTogYSxcXG4gICAgLyoqIHJldHVybnMgTGFyZ2VyIHNjcmVlbiBwaG9uZXMgYW5kIHNtYWxsZXIgc2NyZWVuIGRlc2t0b3AgW21pbi13aWR0aDogNjAxcHggYW5kIG1heC13aWR0aDogMTI3OXB4XSAqL1xcbiAgICBpc1RhYmxldDogbixcXG4gICAgLyoqIHJldHVybnMgdGFibGV0IHNjcmVlbiB3aXRoIHBvcnRyYWl0IG9yaWVudGF0aW9uIFttaW4td2lkdGg6IDYwMXB4IGFuZCBtYXgtd2lkdGg6IDEyNzlweCBhbmQgb3JpZW50YXRpb246IHBvcnRyYWl0XSAqL1xcbiAgICBpc1RhYmxldFBvcnRyYWl0OiBlLFxcbiAgICAvKiogcmV0dXJucyBtb2JpbGUgb3IgbWVkaXVtIHNjcmVlbnMgaW4gbGFuZHNjYXBlIG9yaWVudGF0aW9uIFttYXgtd2lkdGg6IDEyNzlweCBhbmQgb3JpZW50YXRpb246IGxhbmRzY2FwZV0gKi9cXG4gICAgaXNNb2JpbGVPclRhYmxldExhbmRzY2FwZTogb1xcbiAgfTtcXG59O1xcblxcbi8vIyBzb3VyY2VVUkw9W21vZHVsZV1cXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaUxpNHZMaTR2Ym05a1pWOXRiMlIxYkdWekwwQmtaWEpwZGkxamIyMHZkV2t2WkdsemRDOW9iMjlyY3k5MWMyVkVaWFpwWTJVdWFuTWlMQ0p0WVhCd2FXNW5jeUk2SWpzN096czdRVUZCUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVkQklpd2ljMjkxY21ObGN5STZXeUozWldKd1lXTnJPaTh2UUdSbGNtbDJMM1J5WVdSbGNpOHVMaTh1TGk5dWIyUmxYMjF2WkhWc1pYTXZRR1JsY21sMkxXTnZiUzkxYVM5a2FYTjBMMmh2YjJ0ekwzVnpaVVJsZG1salpTNXFjejh5TnpBNElsMHNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJbWx0Y0c5eWRDQjdJSFVnWVhNZ2RDQjlJR1p5YjIwZ1hDSXVMaTlwYm1SbGVDMUZXVEZuZDJ3MVR5NXFjMXdpTzF4dVkyOXVjM1FnWkNBOUlDZ3BJRDArSUh0Y2JpQWdZMjl1YzNRZ2FTQTlJSFFvWENJb2JXbHVMWGRwWkhSb09pQXhNamd3Y0hncFhDSXBMQ0JoSUQwZ2RDaGNJaWh0WVhndGQybGtkR2c2SURZd01IQjRLVndpS1N3Z2JpQTlJSFFvWEc0Z0lDQWdYQ0lvYldsdUxYZHBaSFJvT2lBMk1ERndlQ2tnWVc1a0lDaHRZWGd0ZDJsa2RHZzZJREV5Tnpsd2VDbGNJbHh1SUNBcExDQmxJRDBnZENoY2JpQWdJQ0JjSWlodGFXNHRkMmxrZEdnNklEWXdNWEI0S1NCaGJtUWdLRzFoZUMxM2FXUjBhRG9nTVRJM09YQjRLU0JoYm1RZ0tHOXlhV1Z1ZEdGMGFXOXVPaUJ3YjNKMGNtRnBkQ2xjSWx4dUlDQXBMQ0J2SUQwZ2RDaGNiaUFnSUNCY0lpaHRZWGd0ZDJsa2RHZzZJREV5Tnpsd2VDa2dZVzVrSUNodmNtbGxiblJoZEdsdmJqb2diR0Z1WkhOallYQmxLVndpWEc0Z0lDazdYRzRnSUhKbGRIVnliaUI3WEc0Z0lDQWdMeW9xSUhKbGRIVnlibk1nVEdGeVoyVnlJSE5qY21WbGJpQjBZV0pzWlhSeklGdHRhVzR0ZDJsa2RHZzZJREV5T0RCd2VGMGdLaTljYmlBZ0lDQnBjMFJsYzJ0MGIzQTZJR2tzWEc0Z0lDQWdMeW9xSUNCeVpYUjFjbTV6SUZOdFlXeHNaWElnYzJOeVpXVnVJSFJoWW14bGRITWdXMjFoZUMxM2FXUjBhRG9nTmpBd2NIaGRJQ292WEc0Z0lDQWdhWE5OYjJKcGJHVTZJR0VzWEc0Z0lDQWdMeW9xSUhKbGRIVnlibk1nVEdGeVoyVnlJSE5qY21WbGJpQndhRzl1WlhNZ1lXNWtJSE50WVd4c1pYSWdjMk55WldWdUlHUmxjMnQwYjNBZ1cyMXBiaTEzYVdSMGFEb2dOakF4Y0hnZ1lXNWtJRzFoZUMxM2FXUjBhRG9nTVRJM09YQjRYU0FxTDF4dUlDQWdJR2x6VkdGaWJHVjBPaUJ1TEZ4dUlDQWdJQzhxS2lCeVpYUjFjbTV6SUhSaFlteGxkQ0J6WTNKbFpXNGdkMmwwYUNCd2IzSjBjbUZwZENCdmNtbGxiblJoZEdsdmJpQmJiV2x1TFhkcFpIUm9PaUEyTURGd2VDQmhibVFnYldGNExYZHBaSFJvT2lBeE1qYzVjSGdnWVc1a0lHOXlhV1Z1ZEdGMGFXOXVPaUJ3YjNKMGNtRnBkRjBnS2k5Y2JpQWdJQ0JwYzFSaFlteGxkRkJ2Y25SeVlXbDBPaUJsTEZ4dUlDQWdJQzhxS2lCeVpYUjFjbTV6SUcxdlltbHNaU0J2Y2lCdFpXUnBkVzBnYzJOeVpXVnVjeUJwYmlCc1lXNWtjMk5oY0dVZ2IzSnBaVzUwWVhScGIyNGdXMjFoZUMxM2FXUjBhRG9nTVRJM09YQjRJR0Z1WkNCdmNtbGxiblJoZEdsdmJqb2diR0Z1WkhOallYQmxYU0FxTDF4dUlDQWdJR2x6VFc5aWFXeGxUM0pVWVdKc1pYUk1ZVzVrYzJOaGNHVTZJRzljYmlBZ2ZUdGNibjA3WEc1bGVIQnZjblFnZTF4dUlDQmtJR0Z6SUhWelpVUmxkbWxqWlZ4dWZUdGNiaUpkTENKdVlXMWxjeUk2VzEwc0luTnZkWEpqWlZKdmIzUWlPaUlpZlE9PVxcbi8vIyBzb3VyY2VVUkw9d2VicGFjay1pbnRlcm5hbDovLy8uLi8uLi9ub2RlX21vZHVsZXMvQGRlcml2LWNvbS91aS9kaXN0L2hvb2tzL3VzZURldmljZS5qc1xcblwiKTtcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi4vLi4vbm9kZV9tb2R1bGVzL0BkZXJpdi1jb20vdWkvZGlzdC9pbmRleC1FWTFnd2w1Ty5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4uLy4uL25vZGVfbW9kdWxlcy9AZGVyaXYtY29tL3VpL2Rpc3QvaW5kZXgtRVkxZ3dsNU8uanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovICgoX191bnVzZWRfd2VicGFja19fX3dlYnBhY2tfbW9kdWxlX18sIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuZXZhbChcIl9fd2VicGFja19yZXF1aXJlX18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTtcXG4vKiBoYXJtb255IGV4cG9ydCAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywge1xcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgYTogKCkgPT4gKC8qIGJpbmRpbmcgKi8gZyksXFxuLyogaGFybW9ueSBleHBvcnQgKi8gICB1OiAoKSA9PiAoLyogYmluZGluZyAqLyBPKVxcbi8qIGhhcm1vbnkgZXhwb3J0ICovIH0pO1xcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciByZWFjdF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgcmVhY3QgKi8gXFxcInJlYWN0XFxcIik7XFxuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9jb21tb25qc0hlbHBlcnNfQmtmZVVVS19qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9fY29tbW9uanNIZWxwZXJzLUJrZmVVVUstLmpzICovIFxcXCIuLi8uLi9ub2RlX21vZHVsZXMvQGRlcml2LWNvbS91aS9kaXN0L19jb21tb25qc0hlbHBlcnMtQmtmZVVVSy0uanNcXFwiKTtcXG5cXG5cXG52YXIgdiA9IHR5cGVvZiBfY29tbW9uanNIZWxwZXJzX0JrZmVVVUtfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5jID09IFxcXCJvYmplY3RcXFwiICYmIF9jb21tb25qc0hlbHBlcnNfQmtmZVVVS19qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLmMgJiYgX2NvbW1vbmpzSGVscGVyc19Ca2ZlVVVLX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uYy5PYmplY3QgPT09IE9iamVjdCAmJiBfY29tbW9uanNIZWxwZXJzX0JrZmVVVUtfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5jLCBFID0gdHlwZW9mIHNlbGYgPT0gXFxcIm9iamVjdFxcXCIgJiYgc2VsZiAmJiBzZWxmLk9iamVjdCA9PT0gT2JqZWN0ICYmIHNlbGY7XFxudiB8fCBFIHx8IEZ1bmN0aW9uKFxcXCJyZXR1cm4gdGhpc1xcXCIpKCk7XFxudmFyIGYgPSB0eXBlb2Ygd2luZG93IDwgXFxcInVcXFwiID8gcmVhY3RfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy51c2VMYXlvdXRFZmZlY3QgOiByZWFjdF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLnVzZUVmZmVjdDtcXG5mdW5jdGlvbiBMKHQsIHMsIG8sIGkpIHtcXG4gIGNvbnN0IGMgPSAoMCxyZWFjdF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLnVzZVJlZikocyk7XFxuICBmKCgpID0+IHtcXG4gICAgYy5jdXJyZW50ID0gcztcXG4gIH0sIFtzXSksICgwLHJlYWN0X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18udXNlRWZmZWN0KSgoKSA9PiB7XFxuICAgIGNvbnN0IG4gPSB3aW5kb3c7XFxuICAgIGlmICghKG4gJiYgbi5hZGRFdmVudExpc3RlbmVyKSlcXG4gICAgICByZXR1cm47XFxuICAgIGNvbnN0IHIgPSAoZSkgPT4ge1xcbiAgICAgIGMuY3VycmVudChlKTtcXG4gICAgfTtcXG4gICAgcmV0dXJuIG4uYWRkRXZlbnRMaXN0ZW5lcih0LCByLCBpKSwgKCkgPT4ge1xcbiAgICAgIG4ucmVtb3ZlRXZlbnRMaXN0ZW5lcih0LCByLCBpKTtcXG4gICAgfTtcXG4gIH0sIFt0LCBvLCBpXSk7XFxufVxcbnZhciBoID0gdHlwZW9mIHdpbmRvdyA+IFxcXCJ1XFxcIjtcXG5mdW5jdGlvbiBPKHQsIHtcXG4gIGRlZmF1bHRWYWx1ZTogcyA9ICExLFxcbiAgaW5pdGlhbGl6ZVdpdGhWYWx1ZTogbyA9ICEwXFxufSA9IHt9KSB7XFxuICBjb25zdCBpID0gKGUpID0+IGggPyBzIDogd2luZG93Lm1hdGNoTWVkaWEoZSkubWF0Y2hlcywgW2MsIG5dID0gKDAscmVhY3RfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy51c2VTdGF0ZSkoKCkgPT4gbyA/IGkodCkgOiBzKTtcXG4gIGZ1bmN0aW9uIHIoKSB7XFxuICAgIG4oaSh0KSk7XFxuICB9XFxuICByZXR1cm4gZigoKSA9PiB7XFxuICAgIGNvbnN0IGUgPSB3aW5kb3cubWF0Y2hNZWRpYSh0KTtcXG4gICAgcmV0dXJuIHIoKSwgZS5hZGRMaXN0ZW5lciA/IGUuYWRkTGlzdGVuZXIocikgOiBlLmFkZEV2ZW50TGlzdGVuZXIoXFxcImNoYW5nZVxcXCIsIHIpLCAoKSA9PiB7XFxuICAgICAgZS5yZW1vdmVMaXN0ZW5lciA/IGUucmVtb3ZlTGlzdGVuZXIocikgOiBlLnJlbW92ZUV2ZW50TGlzdGVuZXIoXFxcImNoYW5nZVxcXCIsIHIpO1xcbiAgICB9O1xcbiAgfSwgW3RdKSwgYztcXG59XFxuZnVuY3Rpb24gZyh0LCBzLCBvID0gXFxcIm1vdXNlZG93blxcXCIsIGkgPSB7fSkge1xcbiAgTChcXG4gICAgbyxcXG4gICAgKGMpID0+IHtcXG4gICAgICBjb25zdCBuID0gYy50YXJnZXQ7XFxuICAgICAgaWYgKCFuIHx8ICFuLmlzQ29ubmVjdGVkKVxcbiAgICAgICAgcmV0dXJuO1xcbiAgICAgIChBcnJheS5pc0FycmF5KHQpID8gdC5maWx0ZXIoKGUpID0+ICEhZS5jdXJyZW50KS5ldmVyeSgoZSkgPT4gZS5jdXJyZW50ICYmICFlLmN1cnJlbnQuY29udGFpbnMobikpIDogdC5jdXJyZW50ICYmICF0LmN1cnJlbnQuY29udGFpbnMobikpICYmIHMoYyk7XFxuICAgIH0sXFxuICAgIHZvaWQgMCxcXG4gICAgaVxcbiAgKTtcXG59XFxuXFxuLy8jIHNvdXJjZVVSTD1bbW9kdWxlXVxcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pTGk0dkxpNHZibTlrWlY5dGIyUjFiR1Z6TDBCa1pYSnBkaTFqYjIwdmRXa3ZaR2x6ZEM5cGJtUmxlQzFGV1RGbmQydzFUeTVxY3lJc0ltMWhjSEJwYm1keklqb2lPenM3T3pzN08wRkJRVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVbEJJaXdpYzI5MWNtTmxjeUk2V3lKM1pXSndZV05yT2k4dlFHUmxjbWwyTDNSeVlXUmxjaTh1TGk4dUxpOXViMlJsWDIxdlpIVnNaWE12UUdSbGNtbDJMV052YlM5MWFTOWthWE4wTDJsdVpHVjRMVVZaTVdkM2JEVlBMbXB6UDJJNE16TWlYU3dpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpYVcxd2IzSjBJSHNnZFhObFUzUmhkR1VnWVhNZ1pDd2dkWE5sVEdGNWIzVjBSV1ptWldOMElHRnpJRzBzSUhWelpVVm1abVZqZENCaGN5QjFMQ0IxYzJWU1pXWWdZWE1nYkNCOUlHWnliMjBnWENKeVpXRmpkRndpTzF4dWFXMXdiM0owSUhzZ1l5QmhjeUJoSUgwZ1puSnZiU0JjSWk0dlgyTnZiVzF2Ym1welNHVnNjR1Z5Y3kxQ2EyWmxWVlZMTFM1cWMxd2lPMXh1ZG1GeUlIWWdQU0IwZVhCbGIyWWdZU0E5UFNCY0ltOWlhbVZqZEZ3aUlDWW1JR0VnSmlZZ1lTNVBZbXBsWTNRZ1BUMDlJRTlpYW1WamRDQW1KaUJoTENCRklEMGdkSGx3Wlc5bUlITmxiR1lnUFQwZ1hDSnZZbXBsWTNSY0lpQW1KaUJ6Wld4bUlDWW1JSE5sYkdZdVQySnFaV04wSUQwOVBTQlBZbXBsWTNRZ0ppWWdjMlZzWmp0Y2JuWWdmSHdnUlNCOGZDQkdkVzVqZEdsdmJpaGNJbkpsZEhWeWJpQjBhR2x6WENJcEtDazdYRzUyWVhJZ1ppQTlJSFI1Y0dWdlppQjNhVzVrYjNjZ1BDQmNJblZjSWlBL0lHMGdPaUIxTzF4dVpuVnVZM1JwYjI0Z1RDaDBMQ0J6TENCdkxDQnBLU0I3WEc0Z0lHTnZibk4wSUdNZ1BTQnNLSE1wTzF4dUlDQm1LQ2dwSUQwK0lIdGNiaUFnSUNCakxtTjFjbkpsYm5RZ1BTQnpPMXh1SUNCOUxDQmJjMTBwTENCMUtDZ3BJRDArSUh0Y2JpQWdJQ0JqYjI1emRDQnVJRDBnZDJsdVpHOTNPMXh1SUNBZ0lHbG1JQ2doS0c0Z0ppWWdiaTVoWkdSRmRtVnVkRXhwYzNSbGJtVnlLU2xjYmlBZ0lDQWdJSEpsZEhWeWJqdGNiaUFnSUNCamIyNXpkQ0J5SUQwZ0tHVXBJRDArSUh0Y2JpQWdJQ0FnSUdNdVkzVnljbVZ1ZENobEtUdGNiaUFnSUNCOU8xeHVJQ0FnSUhKbGRIVnliaUJ1TG1Ga1pFVjJaVzUwVEdsemRHVnVaWElvZEN3Z2Npd2dhU2tzSUNncElEMCtJSHRjYmlBZ0lDQWdJRzR1Y21WdGIzWmxSWFpsYm5STWFYTjBaVzVsY2loMExDQnlMQ0JwS1R0Y2JpQWdJQ0I5TzF4dUlDQjlMQ0JiZEN3Z2J5d2dhVjBwTzF4dWZWeHVkbUZ5SUdnZ1BTQjBlWEJsYjJZZ2QybHVaRzkzSUQ0Z1hDSjFYQ0k3WEc1bWRXNWpkR2x2YmlCUEtIUXNJSHRjYmlBZ1pHVm1ZWFZzZEZaaGJIVmxPaUJ6SUQwZ0lURXNYRzRnSUdsdWFYUnBZV3hwZW1WWGFYUm9WbUZzZFdVNklHOGdQU0FoTUZ4dWZTQTlJSHQ5S1NCN1hHNGdJR052Ym5OMElHa2dQU0FvWlNrZ1BUNGdhQ0EvSUhNZ09pQjNhVzVrYjNjdWJXRjBZMmhOWldScFlTaGxLUzV0WVhSamFHVnpMQ0JiWXl3Z2JsMGdQU0JrS0NncElEMCtJRzhnUHlCcEtIUXBJRG9nY3lrN1hHNGdJR1oxYm1OMGFXOXVJSElvS1NCN1hHNGdJQ0FnYmlocEtIUXBLVHRjYmlBZ2ZWeHVJQ0J5WlhSMWNtNGdaaWdvS1NBOVBpQjdYRzRnSUNBZ1kyOXVjM1FnWlNBOUlIZHBibVJ2ZHk1dFlYUmphRTFsWkdsaEtIUXBPMXh1SUNBZ0lISmxkSFZ5YmlCeUtDa3NJR1V1WVdSa1RHbHpkR1Z1WlhJZ1B5QmxMbUZrWkV4cGMzUmxibVZ5S0hJcElEb2daUzVoWkdSRmRtVnVkRXhwYzNSbGJtVnlLRndpWTJoaGJtZGxYQ0lzSUhJcExDQW9LU0E5UGlCN1hHNGdJQ0FnSUNCbExuSmxiVzkyWlV4cGMzUmxibVZ5SUQ4Z1pTNXlaVzF2ZG1WTWFYTjBaVzVsY2loeUtTQTZJR1V1Y21WdGIzWmxSWFpsYm5STWFYTjBaVzVsY2loY0ltTm9ZVzVuWlZ3aUxDQnlLVHRjYmlBZ0lDQjlPMXh1SUNCOUxDQmJkRjBwTENCak8xeHVmVnh1Wm5WdVkzUnBiMjRnWnloMExDQnpMQ0J2SUQwZ1hDSnRiM1Z6WldSdmQyNWNJaXdnYVNBOUlIdDlLU0I3WEc0Z0lFd29YRzRnSUNBZ2J5eGNiaUFnSUNBb1l5a2dQVDRnZTF4dUlDQWdJQ0FnWTI5dWMzUWdiaUE5SUdNdWRHRnlaMlYwTzF4dUlDQWdJQ0FnYVdZZ0tDRnVJSHg4SUNGdUxtbHpRMjl1Ym1WamRHVmtLVnh1SUNBZ0lDQWdJQ0J5WlhSMWNtNDdYRzRnSUNBZ0lDQW9RWEp5WVhrdWFYTkJjbkpoZVNoMEtTQS9JSFF1Wm1sc2RHVnlLQ2hsS1NBOVBpQWhJV1V1WTNWeWNtVnVkQ2t1WlhabGNua29LR1VwSUQwK0lHVXVZM1Z5Y21WdWRDQW1KaUFoWlM1amRYSnlaVzUwTG1OdmJuUmhhVzV6S0c0cEtTQTZJSFF1WTNWeWNtVnVkQ0FtSmlBaGRDNWpkWEp5Wlc1MExtTnZiblJoYVc1ektHNHBLU0FtSmlCektHTXBPMXh1SUNBZ0lIMHNYRzRnSUNBZ2RtOXBaQ0F3TEZ4dUlDQWdJR2xjYmlBZ0tUdGNibjFjYm1WNGNHOXlkQ0I3WEc0Z0lHY2dZWE1nWVN4Y2JpQWdUeUJoY3lCMVhHNTlPMXh1SWwwc0ltNWhiV1Z6SWpwYlhTd2ljMjkxY21ObFVtOXZkQ0k2SWlKOVxcbi8vIyBzb3VyY2VVUkw9d2VicGFjay1pbnRlcm5hbDovLy8uLi8uLi9ub2RlX21vZHVsZXMvQGRlcml2LWNvbS91aS9kaXN0L2luZGV4LUVZMWd3bDVPLmpzXFxuXCIpO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuLi8uLi9ub2RlX21vZHVsZXMvQGRlcml2LWNvbS91dGlscy9kaXN0L2Rlcml2LXV0aWxzLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi4vLi4vbm9kZV9tb2R1bGVzL0BkZXJpdi1jb20vdXRpbHMvZGlzdC9kZXJpdi11dGlscy5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX19fd2VicGFja19tb2R1bGVfXywgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5ldmFsKFwiX193ZWJwYWNrX3JlcXVpcmVfXy5yKF9fd2VicGFja19leHBvcnRzX18pO1xcbi8qIGhhcm1vbnkgZXhwb3J0ICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCB7XFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBBcHBJRENvbnN0YW50czogKCkgPT4gKC8qIGJpbmRpbmcgKi8gS2UpLFxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgQnJhbmRDb25zdGFudHM6ICgpID0+ICgvKiBiaW5kaW5nICovIGtlKSxcXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIEJyYW5kVXRpbHM6ICgpID0+ICgvKiBiaW5kaW5nICovIGF0KSxcXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIEN1cnJlbmN5Q29uc3RhbnRzOiAoKSA9PiAoLyogYmluZGluZyAqLyBIZSksXFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBEb2N1bWVudENvbnN0YW50czogKCkgPT4gKC8qIGJpbmRpbmcgKi8gV2UpLFxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgRm9ybWF0VXRpbHM6ICgpID0+ICgvKiBiaW5kaW5nICovIFFlKSxcXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIEltYWdlVXRpbHM6ICgpID0+ICgvKiBiaW5kaW5nICovIHFlKSxcXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIExvY2FsU3RvcmFnZUNvbnN0YW50czogKCkgPT4gKC8qIGJpbmRpbmcgKi8geGUpLFxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgTG9jYWxTdG9yYWdlVXRpbHM6ICgpID0+ICgvKiBiaW5kaW5nICovIGV0KSxcXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIE1vYmlsZURldmljZXNDb25zdGFudHM6ICgpID0+ICgvKiBiaW5kaW5nICovIFhlKSxcXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIE9TRGV0ZWN0aW9uVXRpbHM6ICgpID0+ICgvKiBiaW5kaW5nICovIHN0KSxcXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIE9iamVjdFV0aWxzOiAoKSA9PiAoLyogYmluZGluZyAqLyB0dCksXFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBQcm9taXNlVXRpbHM6ICgpID0+ICgvKiBiaW5kaW5nICovIHJ0KSxcXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFVSTENvbnN0YW50czogKCkgPT4gKC8qIGJpbmRpbmcgKi8gVmUpLFxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgVVJMVXRpbHM6ICgpID0+ICgvKiBiaW5kaW5nICovIG90KSxcXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFZhbGlkYXRpb25Db25zdGFudHM6ICgpID0+ICgvKiBiaW5kaW5nICovIEplKSxcXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFdlYlNvY2tldFV0aWxzOiAoKSA9PiAoLyogYmluZGluZyAqLyBudClcXG4vKiBoYXJtb255IGV4cG9ydCAqLyB9KTtcXG5jb25zdCB2ID0ge1xcbiAgcmVhbDogXFxcImdyZWVuLmRlcml2d3MuY29tXFxcIixcXG4gIGRlbW86IFxcXCJibHVlLmRlcml2d3MuY29tXFxcIlxcbn0sIHcgPSB7XFxuICBcXFwiZGVyaXYuYXBwXFxcIjogXFxcIjE2OTI5XFxcIixcXG4gIFxcXCJhcHAuZGVyaXYuY29tXFxcIjogXFxcIjE2OTI5XFxcIixcXG4gIFxcXCJzdGFnaW5nLWFwcC5kZXJpdi5jb21cXFwiOiBcXFwiMTYzMDNcXFwiLFxcbiAgXFxcImFwcC5kZXJpdi5tZVxcXCI6IFxcXCIxNDExXFxcIixcXG4gIFxcXCJzdGFnaW5nLWFwcC5kZXJpdi5tZVxcXCI6IFxcXCIxNDExXFxcIixcXG4gIFxcXCJhcHAuZGVyaXYuYmVcXFwiOiBcXFwiMzA3NjdcXFwiLFxcbiAgXFxcInN0YWdpbmctYXBwLmRlcml2LmJlXFxcIjogXFxcIjMxMTg2XFxcIixcXG4gIFxcXCJiaW5hcnkuY29tXFxcIjogXFxcIjFcXFwiLFxcbiAgXFxcInRlc3QtYXBwLmRlcml2LmNvbVxcXCI6IFxcXCI1MTA3MlxcXCIsXFxuICBcXFwicDJwLmRlcml2LmNvbVxcXCI6IFxcXCI2MTg1OVxcXCIsXFxuICBcXFwic3RhZ2luZy1wMnAuZGVyaXYuY29tXFxcIjogXFxcIjYyMDE5XFxcIlxcbn0sIEQgPSBcXFwiZGVyaXZcXFwiLCBLZSA9IC8qIEBfX1BVUkVfXyAqLyBPYmplY3QuZnJlZXplKC8qIEBfX1BVUkVfXyAqLyBPYmplY3QuZGVmaW5lUHJvcGVydHkoe1xcbiAgX19wcm90b19fOiBudWxsLFxcbiAgYXBwQnJhbmQ6IEQsXFxuICBkb21haW5BcHBJZDogdyxcXG4gIGVudmlyb25tZW50czogdlxcbn0sIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogXFxcIk1vZHVsZVxcXCIgfSkpLCBMID0ge1xcbiAgQUFEOiAyLFxcbiAgQUVEOiAyLFxcbiAgQUZOOiAyLFxcbiAgQUxMOiAyLFxcbiAgQU1EOiAyLFxcbiAgQU5HOiAyLFxcbiAgQU9BOiAyLFxcbiAgQVJTOiAyLFxcbiAgQVVEOiAyLFxcbiAgQVdHOiAyLFxcbiAgQVpOOiAyLFxcbiAgQkFNOiAyLFxcbiAgQkJEOiAyLFxcbiAgQkNIOiA4LFxcbiAgQkRUOiAyLFxcbiAgQkdOOiAyLFxcbiAgQkhEOiAzLFxcbiAgQklGOiAwLFxcbiAgQk1EOiAyLFxcbiAgQk5EOiAyLFxcbiAgQk9COiAyLFxcbiAgQk9WOiAyLFxcbiAgQlJMOiAyLFxcbiAgQlNEOiAyLFxcbiAgQlRDOiA4LFxcbiAgQlROOiAyLFxcbiAgQlVTRDogMixcXG4gIEJXUDogMixcXG4gIEJZTjogMixcXG4gIEJaRDogMixcXG4gIENBRDogMixcXG4gIENERjogMixcXG4gIENIRTogMixcXG4gIENIRjogMixcXG4gIENIVzogMixcXG4gIENMRjogNCxcXG4gIENMUDogMCxcXG4gIENOWTogMixcXG4gIENPUDogMixcXG4gIENPVTogMixcXG4gIENSQzogMixcXG4gIENVQzogMixcXG4gIENVUDogMixcXG4gIENWRTogMixcXG4gIENaSzogMixcXG4gIERBSTogMixcXG4gIERKRjogMCxcXG4gIERLSzogMixcXG4gIERPUDogMixcXG4gIERaRDogMixcXG4gIEVHUDogMixcXG4gIEVSTjogMixcXG4gIEVUQjogMixcXG4gIEVUQzogOCxcXG4gIEVUSDogOCxcXG4gIEVVUjogMixcXG4gIEVVUlM6IDIsXFxuICBlVVNEVDogMixcXG4gIEZKRDogMixcXG4gIEZLUDogMixcXG4gIEdCUDogMixcXG4gIEdFTDogMixcXG4gIEdIUzogMixcXG4gIEdJUDogMixcXG4gIEdNRDogMixcXG4gIEdORjogMCxcXG4gIEdUUTogMixcXG4gIEdZRDogMixcXG4gIEhLRDogMixcXG4gIEhOTDogMixcXG4gIEhSSzogMixcXG4gIEhURzogMixcXG4gIEhVRjogMixcXG4gIElESzogMCxcXG4gIElEUjogMixcXG4gIElMUzogMixcXG4gIElOUjogMixcXG4gIElRRDogMyxcXG4gIElSUjogMixcXG4gIElTSzogMCxcXG4gIEpNRDogMixcXG4gIEpPRDogMyxcXG4gIEpQWTogMCxcXG4gIEtFUzogMixcXG4gIEtHUzogMixcXG4gIEtIUjogMixcXG4gIEtNRjogMCxcXG4gIEtQVzogMixcXG4gIEtSVzogMCxcXG4gIEtXRDogMyxcXG4gIEtZRDogMixcXG4gIEtaVDogMixcXG4gIExBSzogMixcXG4gIExCUDogMixcXG4gIExLUjogMixcXG4gIExSRDogMixcXG4gIExTTDogMixcXG4gIExUQzogOCxcXG4gIExZRDogMyxcXG4gIE1BRDogMixcXG4gIE1ETDogMixcXG4gIE1HQTogMixcXG4gIE1LRDogMixcXG4gIE1NSzogMixcXG4gIE1OVDogMixcXG4gIE1PUDogMixcXG4gIE1SVTogMixcXG4gIE1VUjogMixcXG4gIE1WUjogMixcXG4gIE1XSzogMixcXG4gIE1YTjogMixcXG4gIE1YVjogMixcXG4gIE1ZUjogMixcXG4gIE1aTjogMixcXG4gIE5BRDogMixcXG4gIE5HTjogMixcXG4gIE5JTzogMixcXG4gIE5PSzogMixcXG4gIE5QUjogMixcXG4gIE5aRDogMixcXG4gIE9NUjogMyxcXG4gIFBBQjogMixcXG4gIFBBWDogMixcXG4gIFBFTjogMixcXG4gIFBHSzogMixcXG4gIFBIUDogMixcXG4gIFBLUjogMixcXG4gIFBMTjogMixcXG4gIFBZRzogMCxcXG4gIFFBUjogMixcXG4gIFJPTjogMixcXG4gIFJTRDogMixcXG4gIFJVQjogMixcXG4gIFJXRjogMCxcXG4gIFNBUjogMixcXG4gIFNCRDogMixcXG4gIFNDUjogMixcXG4gIFNERzogMixcXG4gIFNFSzogMixcXG4gIFNHRDogMixcXG4gIFNIUDogMixcXG4gIFNMTDogMixcXG4gIFNPUzogMixcXG4gIFNSRDogMixcXG4gIFNTUDogMixcXG4gIFNUTjogMixcXG4gIFNWQzogMixcXG4gIFNZUDogMixcXG4gIFNaTDogMixcXG4gIFRIQjogMixcXG4gIFRKUzogMixcXG4gIFRNVDogMixcXG4gIFRORDogMyxcXG4gIFRPUDogMixcXG4gIFRSWTogMixcXG4gIFRURDogMixcXG4gIFRVU0Q6IDIsXFxuICB0VVNEVDogMixcXG4gIFRXRDogMixcXG4gIFRaUzogMixcXG4gIFVBSDogMixcXG4gIFVHWDogMCxcXG4gIFVTQjogMixcXG4gIFVTRDogMixcXG4gIFVTREM6IDIsXFxuICBVU0RLOiAyLFxcbiAgVVNUOiAyLFxcbiAgVVNOOiAyLFxcbiAgVVlJOiAwLFxcbiAgVVlVOiAyLFxcbiAgVVlXOiA0LFxcbiAgVVpTOiAyLFxcbiAgVkVTOiAyLFxcbiAgVk5EOiAwLFxcbiAgVlVWOiAwLFxcbiAgV1NUOiAyLFxcbiAgWEFGOiAwLFxcbiAgWENEOiAyLFxcbiAgWE9GOiAwLFxcbiAgWFBGOiAwLFxcbiAgWUVSOiAyLFxcbiAgWkFSOiAyLFxcbiAgWk1XOiAyLFxcbiAgWldMOiAyXFxufSwgSGUgPSAvKiBAX19QVVJFX18gKi8gT2JqZWN0LmZyZWV6ZSgvKiBAX19QVVJFX18gKi8gT2JqZWN0LmRlZmluZVByb3BlcnR5KHtcXG4gIF9fcHJvdG9fXzogbnVsbCxcXG4gIHByZWNpc2lvbjogTFxcbn0sIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogXFxcIk1vZHVsZVxcXCIgfSkpLCBQID0gW1xcXCJQTkdcXFwiLCBcXFwiSlBHXFxcIiwgXFxcIkpQRUdcXFwiLCBcXFwiR0lGXFxcIiwgXFxcIlBERlxcXCJdLCBXZSA9IC8qIEBfX1BVUkVfXyAqLyBPYmplY3QuZnJlZXplKC8qIEBfX1BVUkVfXyAqLyBPYmplY3QuZGVmaW5lUHJvcGVydHkoe1xcbiAgX19wcm90b19fOiBudWxsLFxcbiAgc3VwcG9ydGVkRG9jdW1lbnRGb3JtYXRzOiBQXFxufSwgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiBcXFwiTW9kdWxlXFxcIiB9KSksIFQgPSBcXFwiY2xpZW50LmFjdGl2ZV9sb2dpbmlkXFxcIiwgViA9IFxcXCJjbGllbnQuYWNjb3VudF9saXN0XFxcIiwgSiA9IFxcXCJjbGllbnQudmVyaWZ5X2VtYWlsXFxcIiwgTyA9IFxcXCJjb25maWcuYXBwX2lkXFxcIiwgTSA9IFxcXCJjb25maWcuc2VydmVyX3VybFxcXCIsIHAgPSBcXFwiaTE4bl9sYW5ndWFnZVxcXCIsIGsgPSBcXFwidWkudGhlbWVcXFwiLCBYID0gXFxcInVpLnNob3dfcmVwb3J0X2RyYXdlclxcXCIsIFEgPSBcXFwidWkuZXhwYW5kX2FjY291bnRfc3dpdGNoZXJcXFwiLCBxID0gXFxcInRyYWRlci5sYXlvdXRcXFwiLCBlZSA9IFxcXCJzaG91bGRfbm90X3Nob3dfYXV0b19hcmNoaXZlX21lc3NhZ2VfYWdhaW5cXFwiLCB0ZSA9IFxcXCJvcmRlcl9pZHNcXFwiLCByZSA9IFxcXCJzaG91bGRfc2hvd19wMnBfZ3VpZGVcXFwiLCBuZSA9IFxcXCJzaG91bGRfc2hvd19wMnBfZm9sbG93X3VzZXJfZ3VpZGVcXFwiLCB4ZSA9IC8qIEBfX1BVUkVfXyAqLyBPYmplY3QuZnJlZXplKC8qIEBfX1BVUkVfXyAqLyBPYmplY3QuZGVmaW5lUHJvcGVydHkoe1xcbiAgX19wcm90b19fOiBudWxsLFxcbiAgYWNjb3VudExpc3Q6IFYsXFxuICBhY3RpdmVMb2dpbmlkOiBULFxcbiAgY29uZmlnQXBwSWQ6IE8sXFxuICBjb25maWdTZXJ2ZXJVUkw6IE0sXFxuICBpMThuTGFuZ3VhZ2U6IHAsXFxuICBsYXN0VmVyaWZ5RW1haWw6IEosXFxuICBwMnBBcmNoaXZlTWVzc2FnZTogZWUsXFxuICBwMnBPcmRlcklkczogdGUsXFxuICBwMnBTaG93Rm9sbG93VXNlckd1aWRlOiBuZSxcXG4gIHAycFNob3dHdWlkZTogcmUsXFxuICB0cmFkZXJMYXlvdXQ6IHEsXFxuICB1aUV4cGFuZEFjY291bnRTd2l0Y2hlcjogUSxcXG4gIHVpU2hvd1JlcG9ydHNEcmF3ZXI6IFgsXFxuICB1aVRoZW1lOiBrXFxufSwgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiBcXFwiTW9kdWxlXFxcIiB9KSksIGggPSBcXFwiZGVyaXYuY29tXFxcIiwgUiA9IFxcXCJkZXJpdi5tZVxcXCIsIE4gPSBcXFwiZGVyaXYuYmVcXFwiLCBDID0gW2gsIE4sIFJdLCBmID0gdHlwZW9mIHdpbmRvdyA8IFxcXCJ1XFxcIiAmJiB3aW5kb3cubG9jYXRpb24uaG9zdG5hbWUuc3BsaXQoXFxcImFwcC5cXFwiKVsxXSwgZCA9IEMuaW5jbHVkZXMoZikgPyBmIDogaCwgb2UgPSBgaHR0cHM6Ly9ib3QuJHtkfWAsIGFlID0gYGh0dHBzOi8vc3RhZ2luZy1ib3QuJHtkfWAsIHNlID0gYGh0dHBzOi8vYXBwLiR7ZH1gLCBpZSA9IGBodHRwczovL3N0YWdpbmctYXBwLiR7ZH1gLCBVID0gYGh0dHBzOi8vJHtkfWAsICQgPSBgaHR0cHM6Ly9ldS4ke2R9YCwgY2UgPSBgaHR0cHM6Ly9zdGFnaW5nLiR7ZH1gLCBkZSA9IGQsIGxlID0gYGh0dHBzOi8vc21hcnR0cmFkZXIuJHtkfWAsIHVlID0gYGh0dHBzOi8vc3RhZ2luZy1zbWFydHRyYWRlci4ke2R9YCwgZ2UgPSBgaHR0cHM6Ly9wMnAuJHtkfWAsIG1lID0gYGh0dHBzOi8vc3RhZ2luZy1wMnAuJHtkfWAsIHBlID0gXFxcImh0dHBzOi8vd2EubWUvMzU2OTk1NzgzNDFcXFwiLCBTZSA9IHtcXG4gIGxhbmc6IFxcXCJsYW5nXFxcIixcXG4gIGFjdGlvbjogXFxcImFjdGlvblxcXCJcXG59LCBWZSA9IC8qIEBfX1BVUkVfXyAqLyBPYmplY3QuZnJlZXplKC8qIEBfX1BVUkVfXyAqLyBPYmplY3QuZGVmaW5lUHJvcGVydHkoe1xcbiAgX19wcm90b19fOiBudWxsLFxcbiAgYmFzZURvbWFpbjogZixcXG4gIGJpbmFyeUJvdFByb2R1Y3Rpb246IG9lLFxcbiAgYmluYXJ5Qm90U3RhZ2luZzogYWUsXFxuICBkZXJpdjogaCxcXG4gIGRlcml2QXBwUHJvZHVjdGlvbjogc2UsXFxuICBkZXJpdkFwcFN0YWdpbmc6IGllLFxcbiAgZGVyaXZCZTogTixcXG4gIGRlcml2Q29tUHJvZHVjdGlvbjogVSxcXG4gIGRlcml2Q29tUHJvZHVjdGlvbkVVOiAkLFxcbiAgZGVyaXZDb21TdGFnaW5nOiBjZSxcXG4gIGRlcml2SG9zdDogZGUsXFxuICBkZXJpdk1lOiBSLFxcbiAgZGVyaXZQMnBQcm9kdWN0aW9uOiBnZSxcXG4gIGRlcml2UDJwU3RhZ2luZzogbWUsXFxuICBkb21haW46IGQsXFxuICBxdWVyeVBhcmFtZXRlcnM6IFNlLFxcbiAgc21hcnRUcmFkZXJQcm9kdWN0aW9uOiBsZSxcXG4gIHNtYXJ0VHJhZGVyU3RhZ2luZzogdWUsXFxuICBzdXBwb3J0ZWREb21haW5zOiBDLFxcbiAgd2hhdHNBcHA6IHBlXFxufSwgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiBcXFwiTW9kdWxlXFxcIiB9KSksIGZlID0ge1xcbiAgLyoqXFxuICAgKiBSZXByZXNlbnRzIHRoZSBzcGVjaWFsIGNoYXJhY3RlcnMgcGVybWl0dGVkIGluIGFuIGFkZHJlc3MuXFxuICAgKiBAcmVtYXJrcyBUaGlzIGlzIHRvIGJlIHVzZWQgaW4gdGhlIG1lc3NhZ2Ugb2YgdGhlIHZhbGlkYXRpb24gZXJyb3IsIHRvIGxldCB0aGUgdXNlciBrbm93IHdoaWNoIGNoYXJhY3RlcnMgYXJlIHBlcm1pdHRlZC5cXG4gICAqIEBleGFtcGxlIGBTcGVjaWFsIGNoYXJhY3RlcnMgcGVybWl0dGVkOiAke1ZhbGlkYXRpb25Db25zdGFudHMubWVzc2FnZXNIaW50cy5hZGRyZXNzUGVybWl0dGVkU3BlY2lhbENoYXJhY3RlcnN9YFxcbiAgICovXFxuICBhZGRyZXNzUGVybWl0dGVkU3BlY2lhbENoYXJhY3RlcnM6IFxcXCIuICwgJyA6IDsgKCApIMKwIEAgIyAvIC1cXFwiXFxufSwgQWUgPSB7XFxuICAvKipcXG4gICAqIEByZWdleCAvXltcXFxccHtMfVxcXFxwe05kfVxcXFxzJ+KAmS4sOjsoKVxcXFxcXFxceHtiMH1AIy8tXXswLDcwfSQvdVxcbiAgICogQGRlc2NyaXB0aW9uXFxuICAgKiBUaGlzIHBhdHRlcm4gbWF0Y2hlcyBhbnkgc3RyaW5nIHdpdGggbm8gbW9yZSB0aGFuIDcwIGNoYXJhY3RlcnMsIGNhbiBjb250YWluIGxldHRlcnMsIG51bWJlcnMsIHNwYWNlcywgYW5kIGFueSBvZiB0aGUgZm9sbG93aW5nIHNwZWNpYWwgY2hhcmFjdGVyczogJ+KAmS4sOjsoKUAjLy0uXFxuICAgKiBAZXhhbXBsZSBWYWxpZGF0aW9uQ29uc3RhbnRzLnBhdHRlcm5zLmFkZHJlc3MudGVzdChcXFwiMTIzIE1haW4gU3QuXFxcIilcXG4gICAqIEBleGFtcGxlIFZhbGlkYXRpb25Db25zdGFudHMucGF0dGVybnMuYWRkcmVzcy50ZXN0KFxcXCJBcHQuIDEyM1xcXCIpXFxuICAgKiBAZXhhbXBsZSBWYWxpZGF0aW9uQ29uc3RhbnRzLnBhdHRlcm5zLmFkZHJlc3MudGVzdChcXFwiMTIzIE1haW4gU3QuIEFwdC4gMTIzXFxcIilcXG4gICAqKi9cXG4gIGFkZHJlc3M6IC9eW1xcXFxwe0x9XFxcXHB7TmR9XFxcXHMn4oCZLiw6OygpXFxcXFxcXFx4e2IwfUAjLy1dezAsNzB9JC91LFxcbiAgLyoqXFxuICAgKiBAcmVnZXggL15cXFxccHtMfVtcXFxccHtMfVxcXFxzJy4tXXswLDQ5fSQvdVxcbiAgICogQGRlc2NyaXB0aW9uIFRoaXMgcGF0dGVybiBtYXRjaGVzIGFueSBzdHJpbmcgd2l0aCBubyBtb3JlIHRoYW4gNTAgY2hhcmFjdGVycy5cXG4gICAqIEBleGFtcGxlIFZhbGlkYXRpb25Db25zdGFudHMucGF0dGVybnMuYWRkcmVzc0NpdHkudGVzdChcXFwiTWFpbiBTdC5cXFwiKVxcbiAgICogQGV4YW1wbGUgVmFsaWRhdGlvbkNvbnN0YW50cy5wYXR0ZXJucy5hZGRyZXNzQ2l0eS50ZXN0KFxcXCJBcHQuXFxcIilcXG4gICAqIEBleGFtcGxlIFZhbGlkYXRpb25Db25zdGFudHMucGF0dGVybnMuYWRkcmVzc0NpdHkudGVzdChcXFwiTWFpbiBTdC4gQXB0LlxcXCIpXFxuICAgKiovXFxuICBhZGRyZXNzQ2l0eTogbmV3IFJlZ0V4cChcXFwiXlxcXFxcXFxccHtMfVtcXFxcXFxcXHB7TH1cXFxcXFxcXHMnLi1dezAsNDl9JFxcXCIsIFxcXCJ1XFxcIiksXFxuICAvKipcXG4gICAqIEByZWdleCAvXltcXFxccHtMfVxcXFxwe05kfVxcXFxzJy4sLTtdezAsMTAwfSQvdVxcbiAgICogQGRlc2NyaXB0aW9uIFRoaXMgcGF0dGVybiBtYXRjaGVzIGFueSBzdHJpbmcgdGhhdCBjb250YWlucyB1cCB0byAxMDAgY2hhcmFjdGVycyBjb21wb3NlZCBvZiBVbmljb2RlIGxldHRlcnMsIFVuaWNvZGUgZGlnaXRzLCB3aGl0ZXNwYWNlIGNoYXJhY3RlcnMsIGFwb3N0cm9waGVzLCBwZXJpb2RzLCBjb21tYXMsIGh5cGhlbnMsIGFuZCBzZW1pY29sb25zICggJy4sLTspLlxcbiAgICogQGV4YW1wbGUgVmFsaWRhdGlvbkNvbnN0YW50cy5wYXR0ZXJucy5hZGRyZXNzU3RhdGUudGVzdChcXFwiTmV3IFlvcmtcXFwiKVxcbiAgICogQGV4YW1wbGUgVmFsaWRhdGlvbkNvbnN0YW50cy5wYXR0ZXJucy5hZGRyZXNzU3RhdGUudGVzdChcXFwiUXXDqWJlY1xcXCIpXFxuICAgKiovXFxuICBhZGRyZXNzU3RhdGU6IC9eW1xcXFxwe0x9XFxcXHB7TmR9XFxcXHMnLiwtO117MCwxMDB9JC91LFxcbiAgLyoqXFxuICAgKiBAcmVnZXggL14oPz0uezEsMjB9JClbKy1dP1swLTldK1xcXFwuP1swLTldKiQvXFxuICAgKiBAZGVzY3JpcHRpb24gVGhpcyBwYXR0ZXJuIG1hdGNoZXMgYW55IHN0cmluZyB3aXRoIDAtOSBjaGFyYWN0ZXJzIChudW1lcmljIHZhbHVlcy4gaS5lLiBib3RoIGludGVnZXJzIGFuZCBmbG9hdHMpLCBhbmQgbWF5IGNvbnRhaW4gYSAnKycgb3IgJy0nIHNpZ24uXFxuICAgKiBAZXhhbXBsZSBWYWxpZGF0aW9uQ29uc3RhbnRzLnBhdHRlcm5zLmJhcnJpZXIudGVzdChcXFwiMTIzXFxcIilcXG4gICAqIEBleGFtcGxlIFZhbGlkYXRpb25Db25zdGFudHMucGF0dGVybnMuYmFycmllci50ZXN0KFxcXCIxMjMuNDVcXFwiKVxcbiAgICogQGV4YW1wbGUgVmFsaWRhdGlvbkNvbnN0YW50cy5wYXR0ZXJucy5iYXJyaWVyLnRlc3QoXFxcIi0xMjNcXFwiKVxcbiAgICogQGV4YW1wbGUgVmFsaWRhdGlvbkNvbnN0YW50cy5wYXR0ZXJucy5iYXJyaWVyLnRlc3QoXFxcIi0xMjMuNDVcXFwiKVxcbiAgICogQGV4YW1wbGUgVmFsaWRhdGlvbkNvbnN0YW50cy5wYXR0ZXJucy5iYXJyaWVyLnRlc3QoXFxcIisxMjNcXFwiKVxcbiAgICogQGV4YW1wbGUgVmFsaWRhdGlvbkNvbnN0YW50cy5wYXR0ZXJucy5iYXJyaWVyLnRlc3QoXFxcIisxMjMuNDVcXFwiKVxcbiAgICovXFxuICBiYXJyaWVyOiAvXig/PS57MSwyMH0kKVsrLV0/WzAtOV0rXFxcXC4/WzAtOV0qJC8sXFxuICAvKipcXG4gICAqIEByZWdleCAvXlxcXFxkKihcXFxcLlxcXFxkKyk/JC9cXG4gICAqIEBkZXNjcmlwdGlvbiBUaGlzIHBhdHRlcm4gbWF0Y2hlcyBhbnkgc3RyaW5nIHRoYXQgY29udGFpbnMgb25seSBudW1lcmljIHZhbHVlcywgYW5kIG1heSBjb250YWluIGEgZGVjaW1hbCBwb2ludC5cXG4gICAqIEBleGFtcGxlIFZhbGlkYXRpb25Db25zdGFudHMucGF0dGVybnMuZGVjaW1hbC50ZXN0KFxcXCIxMjNcXFwiKVxcbiAgICogQGV4YW1wbGUgVmFsaWRhdGlvbkNvbnN0YW50cy5wYXR0ZXJucy5kZWNpbWFsLnRlc3QoXFxcIjEyMy40NVxcXCIpXFxuICAgKi9cXG4gIGRlY2ltYWw6IC9eXFxcXGQqKFxcXFwuXFxcXGQrKT8kLyxcXG4gIC8qKlxcbiAgICogQHJlZ2V4IC9eXFxcXGQrJC9cXG4gICAqIEBkZXNjcmlwdGlvbiBUaGlzIHBhdHRlcm4gbWF0Y2hlcyBhbnkgc3RyaW5nIHRoYXQgY29udGFpbnMgb25seSBudW1lcmljIHZhbHVlcy5cXG4gICAqIEBleGFtcGxlIFZhbGlkYXRpb25Db25zdGFudHMucGF0dGVybnMuaW50ZWdlci50ZXN0KFxcXCIxMjNcXFwiKVxcbiAgICogQGV4YW1wbGUgVmFsaWRhdGlvbkNvbnN0YW50cy5wYXR0ZXJucy5pbnRlZ2VyLnRlc3QoXFxcIjEyMzQ1XFxcIilcXG4gICAqL1xcbiAgaW50ZWdlcjogL15cXFxcZCskLyxcXG4gIC8qKlxcbiAgICogQHJlZ2V4IC9wWy5cXFxcc10rb1suXFxcXHNdK2JveC9pXFxuICAgKiBAZGVzY3JpcHRpb24gVGhpcyBwYXR0ZXJuIG1hdGNoZXMgYW55IHN0cmluZyB0aGF0IGNvbnRhaW5zIHRoZSBjaGFyYWN0ZXJzICdwLm8uYm94JyBvciAncCBvIGJveCcuXFxuICAgKiBAZXhhbXBsZSBWYWxpZGF0aW9uQ29uc3RhbnRzLnBhdHRlcm5zLnBvc3RhbE9mZmljZUJveE51bWJlci50ZXN0KFxcXCJQLk8uIEJveCAxMjM0XFxcIilcXG4gICAqIEBleGFtcGxlIFZhbGlkYXRpb25Db25zdGFudHMucGF0dGVybnMucG9zdGFsT2ZmaWNlQm94TnVtYmVyLnRlc3QoXFxcInAuby4gYm94IDEyMzRcXFwiKVxcbiAgICogQGV4YW1wbGUgVmFsaWRhdGlvbkNvbnN0YW50cy5wYXR0ZXJucy5wb3N0YWxPZmZpY2VCb3hOdW1iZXIudGVzdChcXFwiUCBPIEJveCAxMjM0XFxcIilcXG4gICAqIEBleGFtcGxlIFZhbGlkYXRpb25Db25zdGFudHMucGF0dGVybnMucG9zdGFsT2ZmaWNlQm94TnVtYmVyLnRlc3QoXFxcInAgbyBib3ggMTIzNFxcXCIpXFxuICAgKi9cXG4gIHBvc3RhbE9mZmljZUJveE51bWJlcjogL3BbLlxcXFxzXStvWy5cXFxcc10rYm94L2ksXFxuICAvKipcXG4gICAqIEByZWdleCAvXlthLXpBLVowLTlfListXStAW2EtekEtWjAtOS4tXStcXFxcLlthLXpBLVpdezIsNjN9JC9cXG4gICAqIEBkZXNjcmlwdGlvbiBUaGlzIHBhdHRlcm4gbWF0Y2hlcyBhbnkgc3RyaW5nIHdpdGggMi02MyBjaGFyYWN0ZXJzLCBhbmQgY29udGFpbnMgYXBsaGFudW1lcmljIGNoYXJhY3RlcnMsIGFuICdAJyBzaWduLCBhbmQgbWF5IGFsc28gY29udGFpbiBhbnkgb2YgdGhlc2UgY2hhcmFjdGVycyAnKywtLl8nLlxcbiAgICogQGV4YW1wbGUgVmFsaWRhdGlvbkNvbnN0YW50cy5wYXR0ZXJucy5lbWFpbC50ZXN0KFxcXCJkb2VAbWVtZS5tZVxcXCIpXFxuICAgKiAqKi9cXG4gIGVtYWlsOiAvXlthLXpBLVowLTlfListXStAW2EtekEtWjAtOS4tXStcXFxcLlthLXpBLVpdezIsNjN9JC8sXFxuICAvKipcXG4gICAqIEByZWdleCAvXig/PS4qW2Etel0pKD89LipcXFxcZCkoPz0uKltBLVpdKVshLX5dezgsMjV9JC9cXG4gICAqIEBkZXNjcmlwdGlvbiBUaGlzIHBhdHRlcm4gbWF0Y2hlcyBhbnkgc3RyaW5nIHRoYXQgY29udGFpbnMgOC0yNSBjaGFyYWN0ZXJzIHRoYXQgaW5jbHVkZTsgYXQgbGVhc3Qgb25lIGxvd2VyY2FzZSBsZXR0ZXIsIGF0IGxlYXN0IG9uZSBkaWdpdCwgYXQgbGVhc3Qgb25lIHVwcGVyY2FzZSBsZXR0ZXIsIGFuZCBvbmx5IHByaW50YWJsZSBBU0NJSSBjaGFyYWN0ZXJzIChmcm9tICchJyB0byAnficpXFxuICAgKiBAZXhhbXBsZSBWYWxpZGF0aW9uQ29uc3RhbnRzLnBhdHRlcm5zLnBhc3N3b3JkLnRlc3QoXFxcIlBhc3N3b3JkMSFcXFwiKVxcbiAgICoqL1xcbiAgcGFzc3dvcmQ6IC9eKD89LipbYS16XSkoPz0uKlxcXFxkKSg/PS4qW0EtWl0pWyEtfl17OCwyNX0kLyxcXG4gIC8qKlxcbiAgICogQHJlZ2V4IC9eKD89LipbYS16XSkoPz0uKlswLTldKSg/PS4qW0EtWl0pWyAtfl17Niw1MH0kL1xcbiAgICogQGRlc2NyaXB0aW9uIFRoaXMgcGF0dGVybiBtYXRjaGVzIGFueSBzdHJpbmcgdGhhdCBjb250YWlucyA2LTUwIGNoYXJhY3RlcnMgdGhhdCBpbmNsdWRlOyBhdCBsZWFzdCBvbmUgbG93ZXJjYXNlIGxldHRlciwgYXQgbGVhc3Qgb25lIGRpZ2l0LCBhdCBsZWFzdCBvbmUgdXBwZXJjYXNlIGxldHRlciwgYW5kIG9ubHkgcHJpbnRhYmxlIEFTQ0lJIGNoYXJhY3RlcnMgKGZyb20gJyEnIHRvICd+JylcXG4gICAqIEBleGFtcGxlIFZhbGlkYXRpb25Db25zdGFudHMucGF0dGVybnMuYWZmaWxsaWF0ZVBhc3N3b3JkLnRlc3QoXFxcIlBhc3N3b3JkMVxcXCIpXFxuICAgKiovXFxuICBhZmZpbGxpYXRlUGFzc3dvcmQ6IC9eKD89LipbYS16XSkoPz0uKlswLTldKSg/PS4qW0EtWl0pWyAtfl17Niw1MH0kLyxcXG4gIC8qKlxcbiAgICogQHJlZ2V4IC9eW2EtekEtWjAtOV8uKy1dK0BbYS16QS1aMC05Li1dK1xcXFwuW2EtekEtWl17MSwyNTV9JC9cXG4gICAqIEBkZXNjcmlwdGlvbiBUaGlzIHBhdHRlcm4gbWF0Y2hlcyBhbnkgc3RyaW5nIHdpdGggMS0yNTUgY2hhcmFjdGVycywgYW5kIGNvbnRhaW5zIGFwbGhhbnVtZXJpYyBjaGFyYWN0ZXJzLCBhbiAnQCcgc2lnbiwgYW5kIG1heSBhbHNvIGNvbnRhaW4gYW55IG9mIHRoZXNlIGNoYXJhY3RlcnMgJyssLS5fJy5cXG4gICAqIEBleGFtcGxlIFZhbGlkYXRpb25Db25zdGFudHMucGF0dGVybnMucGF5bWVudEFnZW50RW1haWwudGVzdChcXFwiZG9lQG1lbWUudXNcXFwiKVxcbiAgICoqL1xcbiAgcGF5bWVudEFnZW50RW1haWw6IC9eW2EtekEtWjAtOV8uKy1dK0BbYS16QS1aMC05Li1dK1xcXFwuW2EtekEtWl17MSwyNTV9JC8sXFxuICAvKipcXG4gICAqIEByZWdleCAvXihbQS1aYS16MC05XVtBLVphLXowLTlcXFxccy1dezAsMjB9KT8kL1xcbiAgICogQGRlc2NyaXB0aW9uIFRoaXMgcGF0dGVybiBtYXRjaGVzIGFueSBzdHJpbmcgd2l0aCBubyBtb3JlIHRoYW4gMjAgY2hhcmFjdGVycyBhbmQgbWF5IG5vdCBjb250YWluICcrJy5cXG4gICAqIEBleGFtcGxlIFZhbGlkYXRpb25Db25zdGFudHMucGF0dGVybnMucG9zdGFsQ29kZS50ZXN0KFxcXCIxMjNcXFwiKVxcbiAgICogQGV4YW1wbGUgVmFsaWRhdGlvbkNvbnN0YW50cy5wYXR0ZXJucy5wb3N0YWxDb2RlLnRlc3QoXFxcIjEyMy00NTZcXFwiKVxcbiAgICoqL1xcbiAgcG9zdGFsQ29kZTogL14oW0EtWmEtejAtOV1bQS1aYS16MC05XFxcXHMtXXswLDIwfSk/JC8sXFxuICAvKipcXG4gICAqIEByZWdleCAvXig/IV4kfFxcXFxzKylbQS1aYS16MC05LlxcXFwvXFxcXHMtXXswLDI1fSQvXFxuICAgKiBAZGVzY3JpcHRpb24gVGhpcyBwYXR0ZXJuIG1hdGNoZXMgYW55IHN0cmluZyB3aXRoIDAtMjUgY2hhcmFjdGVycywgYW5kIG1heSBjb250YWluIGFscGhhbnVtZXJpYyBjaGFyYWN0ZXJzIChib3RoIHVwcGVyY2FzZSBhbmQgbG93ZXJjYXNlKSwgYW5kIGFueSBvZiB0aGVzZSBjaGFyYWN0ZXJzJy4vLScsIGFuZCBvciBzYXBjZSBjaGFyYWN0ZXJzXFxuICAgKiBAZXhhbXBsZSBWYWxpZGF0aW9uQ29uc3RhbnRzLnBhdHRlcm5zLnRheElkZW50aWZpY2F0aW9uTnVtYmVyLnRlc3QoXFxcIjEyM1xcXCIpXFxuICAgKiovXFxuICB0YXhJZGVudGlmaWNhdGlvbk51bWJlcjogL14oPyFeJHxcXFxccyspW0EtWmEtejAtOS5cXFxcL1xcXFxzLV17MCwyNX0kLyxcXG4gIC8qKlxcbiAgICogQHJlZ2V4IC9eXFxcXCsoKC18XFxcXHMpKlswLTldKXs5LDIwfSQvXFxuICAgKiBAZGVzY3JpcHRpb24gVGhpcyBwYXR0ZXJuIG1hdGNoZXMgYW55IHN0cmluZyB0aGF0IHN0YXJ0cyB3aXRoIGEgJysnIGNoYXJhY3RlciwgZm9sbG93ZWQgYnkgOS0yMCBkaWdpdHMsIGFsbG93aW5nIGh5cGhlbnMgb3Igc3BhY2VzLlxcbiAgICogQGV4YW1wbGUgVmFsaWRhdGlvbkNvbnN0YW50cy5wYXR0ZXJucy5waG9uZU51bWJlci50ZXN0KFxcXCIrMTIzNDU2Nzg5MFxcXCIpXFxuICAgKiovXFxuICBwaG9uZU51bWJlcjogL15cXFxcKygoLXxcXFxccykqWzAtOV0pezksMjB9JC8sXFxuICAvKipcXG4gICAqIEByZWdleCAvKGltYWdlfGFwcGxpY2F0aW9uKVxcXFwvKGpwZT9nfHBkZnxwbmcpJC9cXG4gICAqIEBkZXNjcmlwdGlvbiBUaGlzIHBhdHRlcm4gbWF0Y2hlcyBhbnkgb2YgdGhlIGZpbGUgdHlwZXMganBlZywganBnLCBwZGYsIG9yIHBuZy5cXG4gICAqIEBleGFtcGxlIFZhbGlkYXRpb25Db25zdGFudHMucGF0dGVybnMuZmlsZVR5cGUudGVzdChcXFwiaW1hZ2UvanBlZ1xcXCIpXFxuICAgKiBAZXhhbXBsZSBWYWxpZGF0aW9uQ29uc3RhbnRzLnBhdHRlcm5zLmZpbGVUeXBlLnRlc3QoXFxcImFwcGxpY2F0aW9uL3BkZlxcXCIpXFxuICAgKiBAZXhhbXBsZSBWYWxpZGF0aW9uQ29uc3RhbnRzLnBhdHRlcm5zLmZpbGVUeXBlLnRlc3QoXFxcImltYWdlL3BuZ1xcXCIpXFxuICAgKiBAZXhhbXBsZSBWYWxpZGF0aW9uQ29uc3RhbnRzLnBhdHRlcm5zLmZpbGVUeXBlLnRlc3QoXFxcImltYWdlL2pwZ1xcXCIpXFxuICAgKiovXFxuICBmaWxlVHlwZTogLyhpbWFnZXxhcHBsaWNhdGlvbilcXFxcLyhqcGU/Z3xwZGZ8cG5nKSQvLFxcbiAgLyoqXFxuICAgKiBAcmVnZXggLyheXFxcXGR7NH0pXFxcXHMoXFxcXGR7Mn1YezJ9KVxcXFxzKFh7NH0pXFxcXHMoXFxcXGR7NH0kKS9cXG4gICAqIEBkZXNjcmlwdGlvbiBUaGlzIHBhdHRlcm4gbWF0Y2hlcyBhbnkgc3RyaW5nIHRoYXQncyBmb3JtYXR0ZWQgaW4gdGhlIGZvbGxvd2luZyBmb3JtYXQ6IDEyMzQgNTZYWCBYWFhYIDExMjEuXFxuICAgKiBAZXhhbXBsZSBWYWxpZGF0aW9uQ29uc3RhbnRzLnBhdHRlcm5zLmZvcm1hdHRlZENhcmROdW1iZXIudGVzdChcXFwiMTIzNCA1NlhYIFhYWFggMTEyMVxcXCIpXFxuICAgKiovXFxuICBmb3JtYXR0ZWRDYXJkTnVtYmVyOiAvKF5cXFxcZHs0fSlcXFxccyhcXFxcZHsyfVh7Mn0pXFxcXHMoWHs0fSlcXFxccyhcXFxcZHs0fSQpLyxcXG4gIC8qKlxcbiAgICogQHJlZ2V4IC9bXlxcXFxkWFxcXFxzXS9cXG4gICAqIEBkZXNjcmlwdGlvbiBUaGUgaXMgcGF0dGVybiBtYXRjaGVzIGFueSBzdHJpbmcgdGhhdCBjb250YWlucyBjaGFyYWN0ZXJzIHRoYXQgYXJlbid0IGRpZ2l0cywgdGhlIHVwcGVyY2FzZSBsZXR0ZXIgJ1gnIGFuZCBzcGFjZXMuXFxuICAgKiBAZXhhbXBsZSBWYWxpZGF0aW9uQ29uc3RhbnRzLnBhdHRlcm5zLmludmFsaWRGb3JtYXR0ZWRDYXJkTnVtYmVyQ2hhcmFjdGVycy50ZXN0KFxcXCI5ODc2LTU0MzItMTA5OFxcXCIpXFxuICAgKiBAZXhhbXBsZSBWYWxpZGF0aW9uQ29uc3RhbnRzLnBhdHRlcm5zLmludmFsaWRGb3JtYXR0ZWRDYXJkTnVtYmVyQ2hhcmFjdGVycy50ZXN0KFxcXCI5ODc2IDU0MzIgMTA5OFxcXCIpXFxuICAgKiovXFxuICBpbnZhbGlkRm9ybWF0dGVkQ2FyZE51bWJlckNoYXJhY3RlcnM6IC9bXlxcXFxkWFxcXFxzXS8sXFxuICAvKipcXG4gICAqIEByZWdleCAvXig/PS4qW2Etel0pKD89LipbMC05XSkoPz0uKltBLVpdKSg/PS4qWyFAIyQlXiYqKCkrXFxcXC09XFxcXFtcXFxcXXt9Oyc6XFxcXFxcXCJ8LFxcXFwuPD5cXFxcP19+XSlbIC1+XXs4LDE2fSQvXFxuICAgKiBAZGVzY3JpcHRpb24gVGhpcyBwYXR0ZXJuIG1hdGNoZXMgYW55IHN0cmluZyB0aGF0IGNvbnRhaW5zIDgtMTYgY2hhcmFjdGVycyB0aGF0IGluY2x1ZGU7IGF0IGxlYXN0IG9uZSBsb3dlcmNhc2UgbGV0dGVyLCBhdCBsZWFzdCBvbmUgZGlnaXQsIGF0IGxlYXN0IG9uZSB1cHBlcmNhc2UgbGV0dGVyLCBhbmQgb25seSBwcmludGFibGUgQVNDSUkgY2hhcmFjdGVycyAoZnJvbSAnIScgdG8gJ34nKVxcbiAgICogQGV4YW1wbGUgVmFsaWRhdGlvbkNvbnN0YW50cy5wYXR0ZXJucy50cmFkaW5nUGxhdGZvcm1JbnZlc3RvclBhc3N3b3JkLnRlc3QoXFxcIlBhc3N3b3JkMSEkXFxcIilcXG4gICAqKi9cXG4gIHRyYWRpbmdQbGF0Zm9ybUludmVzdG9yUGFzc3dvcmQ6IC9eKD89LipbYS16XSkoPz0uKlswLTldKSg/PS4qW0EtWl0pKD89LipbIUAjJCVeJiooKStcXFxcLT1cXFxcW1xcXFxde307JzpcXFxcXFxcInwsXFxcXC48PlxcXFw/X35dKVsgLX5dezgsMTZ9JC8sXFxuICAvKipcXG4gICAqIEByZWdleCAvXltBLVphLXpdKyhbYS16QS1aLicgLV0pKlthLXpBLVouJyAtXSskL1xcbiAgICogQGRlc2NyaXB0aW9uIFRoaXMgcGF0dGVybiBtYXRjaGVzIGFueSBzdHJpbmcgdGhhdCBzdGFydHMgd2l0aCBvbmUgb3IgbW9yZSBsZXR0ZXJzICh1cHBlcmNhc2Ugb3IgbG93ZXJjYXNlKSwgZm9sbG93ZWQgYnkgemVybyBvciBtb3JlIG9jY3VycmVuY2VzIG9mIGxldHRlcnMsIGFuZCBhbnkgb2YgdGhlc2UgY2hhcmFjdGVycyAoLicgLSkgYW5kIGVuZHMgd2l0aCBvbmUgb3IgbW9yZSBvY2N1cnJlbmNlcyBvZiBsZXR0ZXJzLCBhbmQgYW55IG9mIHRoZXNlIGNoYXJhY3RlcnMgKC4nIC0pLlxcbiAgICogQGV4YW1wbGUgVmFsaWRhdGlvbkNvbnN0YW50cy5wYXR0ZXJucy5sZXR0ZXJTeW1ib2xzLnRlc3QoXFxcIkpvaG4gRG9lXFxcIilcXG4gICAqIEBleGFtcGxlIFZhbGlkYXRpb25Db25zdGFudHMucGF0dGVybnMubGV0dGVyU3ltYm9scy50ZXN0KFxcXCJKb2huLURvZVxcXCIpXFxuICAgKiBAZXhhbXBsZSBWYWxpZGF0aW9uQ29uc3RhbnRzLnBhdHRlcm5zLmxldHRlclN5bWJvbHMudGVzdChcXFwiSm9obiBPJ0RvZVxcXCIpXFxuICAgKi9cXG4gIGxldHRlclN5bWJvbHM6IC9eW0EtWmEtel0rKFthLXpBLVouJyAtXSkqW2EtekEtWi4nIC1dKyQvLFxcbiAgLyoqXFxuICAgKiBAcmVnZXggL14oPyEuKlxcXFxzezIsfSkoPyFcXFxccylbXFxcXHB7TH1cXFxccycuLV17MSw1MH0kL3VcXG4gICAqIEBkZXNjcmlwdGlvbiBUaGlzIHBhdHRlcm4gbWF0Y2hlcyBhbnkgc3RyaW5nIHRoYXQgY29udGFpbnMgMSB0byA1MCBjaGFyYWN0ZXJzLCBzdGFydHMgYW5kIGVuZHMgd2l0aCB2YWxpZCBjaGFyYWN0ZXJzIChsZXR0ZXJzLCB3aGl0ZXNwYWNlLCBwZXJpb2QsIHNpbmdsZSBxdW90ZSwgb3IgaHlwaGVuKS5cXG4gICAqIEBleGFtcGxlIFZhbGlkYXRpb25Db25zdGFudHMucGF0dGVybnMubmFtZS50ZXN0KFxcXCJKb2huIERvZVxcXCIpXFxuICAgKiBAZXhhbXBsZSBWYWxpZGF0aW9uQ29uc3RhbnRzLnBhdHRlcm5zLm5hbWUudGVzdChcXFwiSm9obi1Eb2VcXFwiKVxcbiAgICogQGV4YW1wbGUgVmFsaWRhdGlvbkNvbnN0YW50cy5wYXR0ZXJucy5uYW1lLnRlc3QoXFxcIkpvaG4gTydEb2VcXFwiKVxcbiAgICogQGV4YW1wbGUgVmFsaWRhdGlvbkNvbnN0YW50cy5wYXR0ZXJucy5uYW1lLnRlc3QoXFxcIkpvaG4gTy4gRG9lXFxcIilcXG4gICAqL1xcbiAgbmFtZTogL14oPyEuKlxcXFxzezIsfSkoPyFcXFxccylbXFxcXHB7TH1cXFxccycuLV17MSw1MH0kL3UsXFxuICAvKipcXG4gICAqIEByZWdleCAvW2B+IUAjJCVeJiopKF89K1t9e1xcXFxdXFxcXFxcXFwvXFxcIjs6Pz48fF0rL1xcbiAgICogQGRlc2NyaXB0aW9uIFRoaXMgcGF0dGVybiBtYXRjaGVzIGFueSBzdHJpbmcgdGhhdCBjb250YWlucyBhbnkgb2YgdGhlc2UgY2hhcmFjdGVyczogYH4hQCMkJV4mKikoXz0rW317XFxcXF1cXFxcXFxcXC9cXFwiOzo/Pjx8XFxuICAgKiBAZXhhbXBsZSBWYWxpZGF0aW9uQ29uc3RhbnRzLnBhdHRlcm5zLmdlbmVyYWwudGVzdChcXFwiUGFzc3dvcmQxIVxcXCIpXFxuICAgKi9cXG4gIGdlbmVyYWw6IC9bYH4hQCMkJV4mKikoXz0rW317XFxcXF1cXFxcXFxcXC9cXFwiOzo/Pjx8XSsvLFxcbiAgLyoqXFxuICAgKiBAcmVnZXggL1thLXpdL1xcbiAgICogQGRlc2NyaXB0aW9uIFRoaXMgcGF0dGVybiBtYXRjaGVzIGFueSBzdHJpbmcgdGhhdCBjb250YWlucyBsb3dlcmNhc2UgbGV0dGVycy5cXG4gICAqIEBleGFtcGxlIFZhbGlkYXRpb25Db25zdGFudHMucGF0dGVybnMubG93ZXJjYXNlLnRlc3QoXFxcImFiY1xcXCIpXFxuICAgKi9cXG4gIGxvd2VyY2FzZTogL1thLXpdLyxcXG4gIC8qKlxcbiAgICogQHJlZ2V4IC9cXFxcZC9cXG4gICAqIEBkZXNjcmlwdGlvbiBUaGlzIHBhdHRlcm4gbWF0Y2hlcyBhbnkgc3RyaW5nIHRoYXQgY29udGFpbnMgZGlnaXRzLlxcbiAgICogQGV4YW1wbGUgVmFsaWRhdGlvbkNvbnN0YW50cy5wYXR0ZXJucy5udW1iZXIudGVzdChcXFwicGV0czEyM1xcXCIpXFxuICAgKi9cXG4gIG51bWJlcjogL1xcXFxkLyxcXG4gIC8qKlxcbiAgICogQHJlZ2V4IC9cXFxcVy9cXG4gICAqIEBkZXNjcmlwdGlvbiBUaGlzIHBhdHRlcm4gbWF0Y2hlcyBhbnkgc3RyaW5nIHRoYXQgY29udGFpbnMgc3BlY2lhbCBjaGFyYWN0ZXJzLlxcbiAgICogQGV4YW1wbGUgVmFsaWRhdGlvbkNvbnN0YW50cy5wYXR0ZXJucy5zcGVjaWFsQ2hhcmFjdGVyLnRlc3QoXFxcIlBhc3N3b3JkMSFcXFwiKVxcbiAgICovXFxuICBzcGVjaWFsQ2hhcmFjdGVyOiAvXFxcXFcvLFxcbiAgLyoqXFxuICAgKiBAcmVnZXggL1tBLVpdL1xcbiAgICogQGRlc2NyaXB0aW9uIFRoaXMgcGF0dGVybiBtYXRjaGVzIGFueSBzdHJpbmcgdGhhdCBjb250YWlucyB1cHBlcmNhc2UgbGV0dGVycy5cXG4gICAqIEBleGFtcGxlIFZhbGlkYXRpb25Db25zdGFudHMucGF0dGVybnMudXBwZXJjYXNlLnRlc3QoXFxcIkFCQ1xcXCIpXFxuICAgKi9cXG4gIHVwcGVyY2FzZTogL1tBLVpdLyxcXG4gIC8qKlxcbiAgICogQHJlZ2V4IC9eLns4LDE2fSQvXFxuICAgKiBAZGVzY3JpcHRpb24gVGhpcyBwYXR0ZXJuIG1hdGNoZXMgYW55IHN0cmluZyB0aGF0IGNvbnRhaW5zIDgtMTYgY2hhcmFjdGVycy5cXG4gICAqIEBleGFtcGxlIFZhbGlkYXRpb25Db25zdGFudHMucGF0dGVybnMuYmV0d2VlbjhhbmQxNkNoYXJhY3RlcnMudGVzdChcXFwiUGFzc3dvcmQxIVxcXCIpXFxuICAgKi9cXG4gIGJldHdlZW44YW5kMTZDaGFyYWN0ZXJzOiAvXi57OCwxNn0kLyxcXG4gIC8qKlxcbiAgICogQHJlZ2V4IC9eLns4LDI1fSQvXFxuICAgKiBAZGVzY3JpcHRpb24gVGhpcyBwYXR0ZXJuIG1hdGNoZXMgYW55IHN0cmluZyB0aGF0IGNvbnRhaW5zIDgtMjUgY2hhcmFjdGVycy5cXG4gICAqIEBleGFtcGxlIFZhbGlkYXRpb25Db25zdGFudHMucGF0dGVybnMuYmV0d2VlbjhhbmQyNUNoYXJhY3RlcnMudGVzdChcXFwiUGFzc3dvcmQxIVxcXCIpXFxuICAgKi9cXG4gIGJldHdlZW44YW5kMjVDaGFyYWN0ZXJzOiAvXi57OCwyNX0kL1xcbn0sIEplID0gLyogQF9fUFVSRV9fICovIE9iamVjdC5mcmVlemUoLyogQF9fUFVSRV9fICovIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7XFxuICBfX3Byb3RvX186IG51bGwsXFxuICBtZXNzYWdlc0hpbnRzOiBmZSxcXG4gIHBhdHRlcm5zOiBBZVxcbn0sIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogXFxcIk1vZHVsZVxcXCIgfSkpLCBFID0ge1xcbiAgYnJhbmROYW1lOiBcXFwiRGVyaXZcXFwiLFxcbiAgZG9tYWluTmFtZTogXFxcIkRlcml2LmNvbVxcXCJcXG59LCBCID0ge1xcbiAgZng6IFxcXCJEZXJpdiAoRlgpIEx0ZFxcXCIsXFxuICBtYWx0YWludmVzdDogXFxcIkRlcml2IEludmVzdG1lbnRzIChFdXJvcGUpIExpbWl0ZWRcXFwiLFxcbiAgc3ZnOiBcXFwiRGVyaXYgKFNWRykgTExDXFxcIixcXG4gIHY6IFxcXCJEZXJpdiAoVikgTHRkXFxcIlxcbn0sIGogPSB7XFxuICB0cmFkZXI6IFxcXCJEZXJpdiBUcmFkZXJcXFwiLFxcbiAgZEJvdDogXFxcIkRlcml2IEJvdFxcXCIsXFxuICBtdDU6IFxcXCJEZXJpdiBNVDVcXFwiLFxcbiAgY1RyYWRlcjogXFxcIkRlcml2IGNUcmFkZXJcXFwiLFxcbiAgZGVyaXZYOiBcXFwiRGVyaXYgWFxcXCIsXFxuICBzbWFydFRyYWRlcjogXFxcIlNtYXJ0VHJhZGVyXFxcIixcXG4gIGJCb3Q6IFxcXCJCaW5hcnkgQm90XFxcIixcXG4gIGdvOiBcXFwiRGVyaXYgR09cXFwiXFxufSwga2UgPSAvKiBAX19QVVJFX18gKi8gT2JqZWN0LmZyZWV6ZSgvKiBAX19QVVJFX18gKi8gT2JqZWN0LmRlZmluZVByb3BlcnR5KHtcXG4gIF9fcHJvdG9fXzogbnVsbCxcXG4gIGJyYW5kQ29uZmlnOiBFLFxcbiAgbGFuZGluZ0NvbXBhbmllczogQixcXG4gIHBsYXRmb3Jtczogalxcbn0sIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogXFxcIk1vZHVsZVxcXCIgfSkpLCBGID0gLyhBTFAtfEFNTi18QU5BLXxBTkUtfEFORy18QVFNLXxBUlMtfEFSVC18QVRVLXxCQUMtfEJMQS18QlJRLXxDQUctfENBTS18Q0FOLXxDQVotfENETC18Q0RZLXxDTFQtfENSTy18Q1VOLXxESUctfERSQS18RFVBLXxEVUItfERWQy18RUxFLXxFTFMtfEVNTC18RVZBLXxFVlItfEZJRy18RkxBLXxGUkwtfEdMSy18SE1BLXxIVy18SFdJLXxJTkUtfEpBVC18SkVGLXxKRVItfEpLTS18Sk5ZLXxKU0MtfExETi18TElPLXxMT04tfExVQS18TFlBLXxMWU8tfE1BUi18TUVELXxNSEEtfE1MQS18TVJELXxNWUEtfE5DRS18TkVPLXxOT0gtfE5PUC18T0NFLXxQQVItfFBJQy18UE9ULXxQUEEtfFBSQS18Uk5FLXxTRUEtfFNMQS18U05FLXxTUE4tfFNUSy18VEFILXxUQVMtfFRFVC18VFJULXxWQ0UtfFZJRS18VktZLXxWTlMtfFZPRy18VlRSLXxXQVMtfFdLRy18V0xaLXxKQUQtfE1MRC18UlRFLXxOQU0tfE5FTi18QkFMLXxKTE4tfFlBTC18TUdBLXxGR0QtfFhZQU8tfEJPTi18QUxOLXxBTFQtfEJSQS18REJZMi18U1RHLXxNQU8tfExFTS18R09BLXxGT0EtfE1OQS18TE5BLSkvLCBYZSA9IC8qIEBfX1BVUkVfXyAqLyBPYmplY3QuZnJlZXplKC8qIEBfX1BVUkVfXyAqLyBPYmplY3QuZGVmaW5lUHJvcGVydHkoe1xcbiAgX19wcm90b19fOiBudWxsLFxcbiAgaHVhd2VpRGV2aWNlc1JlZ2V4OiBGXFxufSwgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiBcXFwiTW9kdWxlXFxcIiB9KSksIERlID0gKGUsIHQpID0+IHtcXG4gIHRyeSB7XFxuICAgIGNvbnN0IHsgbG9jYWxlOiByID0gXFxcImVuLVVTXFxcIiwgY3VycmVuY3k6IG4sIGRlY2ltYWxQbGFjZXM6IG8gfSA9IHQgfHwge30sIGkgPSBMW24gPz8gXFxcIlVTRFxcXCJdLCBhID0gbyB8fCBpO1xcbiAgICByZXR1cm4gbmV3IEludGwuTnVtYmVyRm9ybWF0KHIsIHtcXG4gICAgICBtaW5pbXVtRnJhY3Rpb25EaWdpdHM6IGEsXFxuICAgICAgbWF4aW11bUZyYWN0aW9uRGlnaXRzOiBhXFxuICAgIH0pLmZvcm1hdChlKTtcXG4gIH0gY2F0Y2gge1xcbiAgICByZXR1cm4gZS50b1N0cmluZygpO1xcbiAgfVxcbn0sIGhlID0gKGUsIHQpID0+IHtcXG4gIGxldCByO1xcbiAgY29uc3Qge1xcbiAgICBkYXRlT3B0aW9uczogbiA9IHsgZGF5OiBcXFwiMi1kaWdpdFxcXCIsIG1vbnRoOiBcXFwiMi1kaWdpdFxcXCIsIHllYXI6IFxcXCJudW1lcmljXFxcIiB9LFxcbiAgICBmb3JtYXQ6IG8gPSBcXFwiWVlZWS1NTS1ERFxcXCIsXFxuICAgIHVuaXg6IGkgPSAhMVxcbiAgfSA9IHQgfHwge30sIGEgPSB7IC4uLm4gfTtcXG4gIGlmICh0eXBlb2YgZSA9PSBcXFwibnVtYmVyXFxcIiAmJiBpKVxcbiAgICByID0gbmV3IERhdGUoZSAqIDFlMyk7XFxuICBlbHNlIGlmICh0eXBlb2YgZSA9PSBcXFwic3RyaW5nXFxcIiB8fCBlIGluc3RhbmNlb2YgRGF0ZSkge1xcbiAgICBpZiAociA9IG5ldyBEYXRlKGUpLCBpc05hTihyLmdldFRpbWUoKSkpXFxuICAgICAgdGhyb3cgbmV3IEVycm9yKFxcXCJJbnZhbGlkIGRhdGUgaW5wdXRcXFwiKTtcXG4gIH0gZWxzZVxcbiAgICB0aHJvdyBuZXcgRXJyb3IoXFxcIkludmFsaWQgZGF0ZSBpbnB1dFxcXCIpO1xcbiAgc3dpdGNoIChvKSB7XFxuICAgIGNhc2UgXFxcIkREIE1NTSBZWVlZXFxcIjpcXG4gICAgICBhLmRheSA9IFxcXCIyLWRpZ2l0XFxcIiwgYS5tb250aCA9IFxcXCJzaG9ydFxcXCIsIGEueWVhciA9IFxcXCJudW1lcmljXFxcIjtcXG4gICAgICBicmVhaztcXG4gICAgY2FzZSBcXFwiTU1NIEREIFlZWVlcXFwiOlxcbiAgICAgIHJldHVybiBhLmRheSA9IFxcXCIyLWRpZ2l0XFxcIiwgYS5tb250aCA9IFxcXCJzaG9ydFxcXCIsIGEueWVhciA9IFxcXCJudW1lcmljXFxcIiwgci50b0xvY2FsZURhdGVTdHJpbmcoXFxcImVuLUdCXFxcIiwgYSkucmVwbGFjZSgvKFxcXFxkezJ9KSAoXFxcXHd7M30pIChcXFxcZHs0fSkvLCBcXFwiJDIgJDEgJDNcXFwiKTtcXG4gICAgY2FzZSBcXFwiREQtTU0tWVlZWVxcXCI6XFxuICAgICAgcmV0dXJuIGEuZGF5ID0gXFxcIjItZGlnaXRcXFwiLCBhLm1vbnRoID0gXFxcIjItZGlnaXRcXFwiLCBhLnllYXIgPSBcXFwibnVtZXJpY1xcXCIsIHIudG9Mb2NhbGVEYXRlU3RyaW5nKFxcXCJlbi1HQlxcXCIsIGEpLnJlcGxhY2UoLyhcXFxcZHsyfSlcXFxcLyhcXFxcZHsyfSlcXFxcLyhcXFxcZHs0fSkvLCBcXFwiJDEtJDItJDNcXFwiKTtcXG4gICAgZGVmYXVsdDpcXG4gICAgICBhLnllYXIgPSBcXFwibnVtZXJpY1xcXCIsIGEubW9udGggPSBcXFwiMi1kaWdpdFxcXCIsIGEuZGF5ID0gXFxcIjItZGlnaXRcXFwiO1xcbiAgICAgIGJyZWFrO1xcbiAgfVxcbiAgY29uc3QgcyA9IHIudG9Mb2NhbGVEYXRlU3RyaW5nKFxcXCJlbi1HQlxcXCIsIGEpLnJlcGxhY2UoLyhcXFxcZHsyfSkgKFxcXFx3ezMsNH0pIChcXFxcZHs0fSkvLCAoYywgbCwgdSwgbSkgPT4gYCR7bH0gJHt1LnNsaWNlKDAsIDMpfSAke219YCk7XFxuICByZXR1cm4gbyA9PT0gXFxcIllZWVktTU0tRERcXFwiID8gcy5yZXBsYWNlKC8oXFxcXGR7Mn0pXFxcXC8oXFxcXGR7Mn0pXFxcXC8oXFxcXGR7NH0pLywgXFxcIiQzLSQyLSQxXFxcIikgOiBzO1xcbn0sIF9lID0gKGUsIHQgPSAhMSkgPT4ge1xcbiAgbGV0IHI7XFxuICBpZiAodHlwZW9mIGUgPT0gXFxcIm51bWJlclxcXCIgJiYgdClcXG4gICAgciA9IG5ldyBEYXRlKGUgKiAxZTMpO1xcbiAgZWxzZSBpZiAodHlwZW9mIGUgPT0gXFxcInN0cmluZ1xcXCIgfHwgZSBpbnN0YW5jZW9mIERhdGUpIHtcXG4gICAgaWYgKHIgPSBuZXcgRGF0ZShlKSwgaXNOYU4oci5nZXRUaW1lKCkpKVxcbiAgICAgIHRocm93IG5ldyBFcnJvcihcXFwiSW52YWxpZCBkYXRlIGlucHV0XFxcIik7XFxuICB9IGVsc2VcXG4gICAgdGhyb3cgbmV3IEVycm9yKFxcXCJJbnZhbGlkIGRhdGUgaW5wdXRcXFwiKTtcXG4gIHJldHVybiBgJHtyLmdldFVUQ0hvdXJzKCkudG9TdHJpbmcoKS5wYWRTdGFydCgyLCBcXFwiMFxcXCIpfToke3IuZ2V0VVRDTWludXRlcygpLnRvU3RyaW5nKCkucGFkU3RhcnQoMiwgXFxcIjBcXFwiKX06JHtyLmdldFVUQ1NlY29uZHMoKS50b1N0cmluZygpLnBhZFN0YXJ0KDIsIFxcXCIwXFxcIil9IEdNVGA7XFxufSwgeWUgPSAoZSwgdCA9IFxcXCJkYXlzXFxcIiwgciA9IFxcXCJhZGRcXFwiKSA9PiB7XFxuICBpZiAoZSA8IDApXFxuICAgIHRocm93IG5ldyBFcnJvcihcXFwiQW1vdW50IG11c3QgYmUgYSBwb3NpdGl2ZSBudW1iZXIuXFxcIik7XFxuICBjb25zdCBuID0gLyogQF9fUFVSRV9fICovIG5ldyBEYXRlKCksIG8gPSByID09PSBcXFwiYWRkXFxcIiA/IGUgOiAtZTtcXG4gIHJldHVybiB0ID09PSBcXFwieWVhcnNcXFwiID8gbi5zZXRGdWxsWWVhcihuLmdldEZ1bGxZZWFyKCkgKyBvKSA6IHQgPT09IFxcXCJkYXlzXFxcIiAmJiBuLnNldERhdGUobi5nZXREYXRlKCkgKyBvKSwgbjtcXG59LCBiZSA9IChlKSA9PiB7XFxuICBjb25zdCB0ID0gZS5zcGxpdCgvLFxcXFxzLyksIHIgPSAvOlxcXFxzKFswLTlhLXpBLVpdKy57MjUsMjh9KS9nbS5leGVjKHRbMF0pLCBuID0gciA9PSBudWxsID8gdm9pZCAwIDogclsxXSwgbyA9IC86XFxcXHMoWzAtOWEtekEtWl0rLnsyNSwzNH0pL2dtLmV4ZWModFsxXSksIGkgPSBvID09IG51bGwgPyB2b2lkIDAgOiBvWzFdO1xcbiAgcmV0dXJuIHsgYWRkcmVzc0hhc2g6IG4sIGJsb2NrY2hhaW5IYXNoOiBpLCBzcGxpdExvbmdjb2RlOiB0IH07XFxufSwgUWUgPSAvKiBAX19QVVJFX18gKi8gT2JqZWN0LmZyZWV6ZSgvKiBAX19QVVJFX18gKi8gT2JqZWN0LmRlZmluZVByb3BlcnR5KHtcXG4gIF9fcHJvdG9fXzogbnVsbCxcXG4gIGZvcm1hdE1vbmV5OiBEZSxcXG4gIGdldEFkanVzdGVkRGF0ZTogeWUsXFxuICBnZXRGb3JtYXR0ZWREYXRlU3RyaW5nOiBoZSxcXG4gIGdldEZvcm1hdHRlZFRpbWVTdHJpbmc6IF9lLFxcbiAgcGFyc2VDcnlwdG9Mb25nY29kZTogYmVcXG59LCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6IFxcXCJNb2R1bGVcXFwiIH0pKSwgeSA9IDI1NjAsIHZlID0gMC45LCB3ZSA9IDQsIEcgPSAoeyBzcmM6IGUsIGZpbGVuYW1lOiB0LCBvcHRpb25zOiByIH0pID0+IHtcXG4gIGNvbnN0IHsgbWF4V2lkdGg6IG4gPSB5LCBxdWFsaXR5OiBvID0gdmUgfSA9IHIgfHwge307XFxuICByZXR1cm4gbmV3IFByb21pc2UoKGksIGEpID0+IHtcXG4gICAgY29uc3QgcyA9IG5ldyBJbWFnZSgpO1xcbiAgICBzLnNyYyA9IGUsIHMub25sb2FkID0gKCkgPT4ge1xcbiAgICAgIGNvbnN0IGMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFxcXCJjYW52YXNcXFwiKSwgbCA9IGMuZ2V0Q29udGV4dChcXFwiMmRcXFwiKTtcXG4gICAgICBpZiAoIWwgfHwgIShsIGluc3RhbmNlb2YgQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEKSlcXG4gICAgICAgIHJldHVybiBhKG5ldyBFcnJvcihcXFwiRmFpbGVkIHRvIGdldCAyRCBjb250ZXh0XFxcIikpO1xcbiAgICAgIGlmIChzLm5hdHVyYWxXaWR0aCA+IG4pIHtcXG4gICAgICAgIGNvbnN0IHUgPSB5LCBtID0gdSAvIHMubmF0dXJhbFdpZHRoO1xcbiAgICAgICAgYy53aWR0aCA9IHUsIGMuaGVpZ2h0ID0gcy5uYXR1cmFsSGVpZ2h0ICogbTtcXG4gICAgICB9IGVsc2VcXG4gICAgICAgIGMud2lkdGggPSBzLm5hdHVyYWxXaWR0aCwgYy5oZWlnaHQgPSBzLm5hdHVyYWxIZWlnaHQ7XFxuICAgICAgbC5maWxsU3R5bGUgPSBcXFwidHJhbnNwYXJlbnRcXFwiLCBsLmZpbGxSZWN0KDAsIDAsIGMud2lkdGgsIGMuaGVpZ2h0KSwgbC5zYXZlKCksIGwuZHJhd0ltYWdlKHMsIDAsIDAsIGMud2lkdGgsIGMuaGVpZ2h0KSwgYy50b0Jsb2IoXFxuICAgICAgICAodSkgPT4ge1xcbiAgICAgICAgICBpZiAoIXUpXFxuICAgICAgICAgICAgcmV0dXJuO1xcbiAgICAgICAgICBjb25zdCBtID0gdC5yZXBsYWNlKC9cXFxcLlteLy5dKyQvLCBcXFwiLmpwZ1xcXCIpLCBTID0gbmV3IEJsb2IoW3VdLCB7IHR5cGU6IFxcXCJpbWFnZS9qcGVnXFxcIiB9KTtcXG4gICAgICAgICAgUy5sYXN0TW9kaWZpZWREYXRlID0gRGF0ZS5ub3coKSwgUy5uYW1lID0gbSwgaShTKTtcXG4gICAgICAgIH0sXFxuICAgICAgICBcXFwiaW1hZ2UvanBlZ1xcXCIsXFxuICAgICAgICBvXFxuICAgICAgKTtcXG4gICAgfTtcXG4gIH0pO1xcbn0sIFkgPSAoZSkgPT4gbmV3IFByb21pc2UoKHQpID0+IHtcXG4gIGNvbnN0IHIgPSBuZXcgRmlsZVJlYWRlcigpO1xcbiAgci5yZWFkQXNEYXRhVVJMKGUpLCByLm9ubG9hZGVuZCA9ICgpID0+IHtcXG4gICAgdmFyIG47XFxuICAgIHQoe1xcbiAgICAgIHNyYzogKChuID0gci5yZXN1bHQpID09IG51bGwgPyB2b2lkIDAgOiBuLnRvU3RyaW5nKCkpIHx8IFxcXCJcXFwiLFxcbiAgICAgIGZpbGVuYW1lOiBlLm5hbWVcXG4gICAgfSk7XFxuICB9O1xcbn0pLCB6ID0gKGUpID0+IGUgPyBQLnNvbWUoXFxuICAodCkgPT4gZS50b1VwcGVyQ2FzZSgpLmVuZHNXaXRoKHQpXFxuKSA6ICExLCBMZSA9IChlKSA9PiBuZXcgUHJvbWlzZSgodCkgPT4ge1xcbiAgeihlLm5hbWUpID8gWShlKS50aGVuKChyKSA9PiB7XFxuICAgIEcocikudGhlbih0KTtcXG4gIH0pIDogdChlKTtcXG59KTtcXG5mdW5jdGlvbiBQZShlLCB0ID0gd2UpIHtcXG4gIGNvbnN0IHIgPSBuZXcgVWludDhBcnJheSh0KTtcXG4gIHJldHVybiBuZXcgRGF0YVZpZXcoci5idWZmZXIpLnNldFVpbnQzMigwLCBlKSwgcjtcXG59XFxuY29uc3QgVGUgPSAoZSwge1xcbiAgY2h1bmtTaXplOiB0ID0gMTYzODRcXG4gIC8qIDE2S0IgKi9cXG59KSA9PiB7XFxuICBjb25zdCByID0gW107XFxuICBmb3IgKGxldCBuID0gMDsgbiA8IGUubGVuZ3RoOyBuKyspIHtcXG4gICAgY29uc3QgbyA9IGVbbl07XFxuICAgIG4gJSB0ID09PSAwID8gci5wdXNoKFtvXSkgOiByW3IubGVuZ3RoIC0gMV0ucHVzaChvKTtcXG4gIH1cXG4gIHJldHVybiByLm1hcCgobikgPT4gbmV3IFVpbnQ4QXJyYXkobikpLmNvbmNhdChuZXcgVWludDhBcnJheShbXSkpO1xcbn0sIE9lID0gKGUpID0+IHtcXG4gIGNvbnN0IHQgPSBuZXcgRmlsZVJlYWRlcigpO1xcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyKSA9PiB7XFxuICAgIHQub25sb2FkID0gKCkgPT4ge1xcbiAgICAgIGNvbnN0IG4gPSB7XFxuICAgICAgICBmaWxlbmFtZTogZS5uYW1lLFxcbiAgICAgICAgYnVmZmVyOiB0LnJlc3VsdCxcXG4gICAgICAgIGZpbGVTaXplOiBlLnNpemVcXG4gICAgICB9O1xcbiAgICAgIHIobik7XFxuICAgIH0sIHQub25lcnJvciA9ICgpID0+IHtcXG4gICAgICByKHtcXG4gICAgICAgIG1lc3NhZ2U6IGBVbmFibGUgdG8gcmVhZCBmaWxlICR7ZS5uYW1lfWBcXG4gICAgICB9KTtcXG4gICAgfSwgdC5yZWFkQXNBcnJheUJ1ZmZlcihlKTtcXG4gIH0pO1xcbn0sIHFlID0gLyogQF9fUFVSRV9fICovIE9iamVjdC5mcmVlemUoLyogQF9fUFVSRV9fICovIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7XFxuICBfX3Byb3RvX186IG51bGwsXFxuICBjb21wcmVzc0ltYWdlOiBHLFxcbiAgY29tcHJlc3NJbWFnZUZpbGU6IExlLFxcbiAgY29udmVydFRvQmFzZTY0OiBZLFxcbiAgZ2VuZXJhdGVDaHVua3M6IFRlLFxcbiAgaXNTdXBwb3J0ZWRJbWFnZUZvcm1hdDogeixcXG4gIG51bVRvVWludDhBcnJheTogUGUsXFxuICByZWFkRmlsZTogT2VcXG59LCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6IFxcXCJNb2R1bGVcXFwiIH0pKSwgZyA9IChlKSA9PiB7XFxuICBjb25zdCB0ID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oZSk7XFxuICBpZiAodCAhPT0gXFxcInVuZGVmaW5lZFxcXCIpIHtcXG4gICAgaWYgKHQgPT09IG51bGwgfHwgdCA9PT0gXFxcIm51bGxcXFwiKVxcbiAgICAgIHJldHVybiBudWxsO1xcbiAgICB0cnkge1xcbiAgICAgIHJldHVybiBKU09OLnBhcnNlKHQpO1xcbiAgICB9IGNhdGNoIHtcXG4gICAgICByZXR1cm4gbnVsbDtcXG4gICAgfVxcbiAgfVxcbn0sIE1lID0gKGUsIHQpID0+IHtcXG4gIGxvY2FsU3RvcmFnZS5zZXRJdGVtKGUsIEpTT04uc3RyaW5naWZ5KHQpKTtcXG59LCBldCA9IC8qIEBfX1BVUkVfXyAqLyBPYmplY3QuZnJlZXplKC8qIEBfX1BVUkVfXyAqLyBPYmplY3QuZGVmaW5lUHJvcGVydHkoe1xcbiAgX19wcm90b19fOiBudWxsLFxcbiAgZ2V0VmFsdWU6IGcsXFxuICBzZXRWYWx1ZTogTWVcXG59LCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6IFxcXCJNb2R1bGVcXFwiIH0pKSwgSSA9IChlKSA9PiBPYmplY3Qua2V5cyhlKS5zb3J0KCkucmVkdWNlKCh0LCByKSA9PiAodFtyXSA9IGVbcl0sIHQpLCB7fSksIFJlID0gYXN5bmMgKGUpID0+IHtcXG4gIGNvbnN0IHQgPSBuZXcgVGV4dEVuY29kZXIoKS5lbmNvZGUoSlNPTi5zdHJpbmdpZnkoSShlKSkpLCByID0gYXdhaXQgY3J5cHRvLnN1YnRsZS5kaWdlc3QoXFxcIlNIQS0yNTZcXFwiLCB0KTtcXG4gIHJldHVybiBBcnJheS5mcm9tKG5ldyBVaW50OEFycmF5KHIpKS5tYXAoKGkpID0+IChcXFwiMDBcXFwiICsgaS50b1N0cmluZygxNikpLnNsaWNlKC0yKSkuam9pbihcXFwiXFxcIik7XFxufSwgWiA9IChlLCB0KSA9PiBBcnJheS5pc0FycmF5KGUpICYmIEFycmF5LmlzQXJyYXkodCkgPyB0Lm1hcCgociwgbikgPT4gWihlW25dLCByKSkgOiB0eXBlb2YgZSA9PSBcXFwib2JqZWN0XFxcIiAmJiBlICE9PSBudWxsICYmIHR5cGVvZiB0ID09IFxcXCJvYmplY3RcXFwiICYmIHQgIT09IG51bGwgPyBLKGUsIHQpIDogdCwgSyA9IChlLCAuLi50KSA9PiB7XFxuICBmb3IgKGNvbnN0IHIgb2YgdClcXG4gICAgZm9yIChjb25zdCBuIGluIHIpXFxuICAgICAgcltuXSA9PT0gbnVsbCB8fCByW25dID09PSB2b2lkIDAgfHwgKGVbbl0gPSBaKGVbbl0sIHJbbl0pKTtcXG4gIHJldHVybiBlO1xcbn0sIHR0ID0gLyogQF9fUFVSRV9fICovIE9iamVjdC5mcmVlemUoLyogQF9fUFVSRV9fICovIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7XFxuICBfX3Byb3RvX186IG51bGwsXFxuICBoYXNoT2JqZWN0OiBSZSxcXG4gIG1lcmdlOiBLLFxcbiAgc29ydE9iamVjdEJ5S2V5czogSVxcbn0sIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogXFxcIk1vZHVsZVxcXCIgfSkpO1xcbmZ1bmN0aW9uIE5lKCkge1xcbiAgbGV0IGUsIHQ7XFxuICByZXR1cm4ge1xcbiAgICBwcm9taXNlOiBuZXcgUHJvbWlzZSgobiwgbykgPT4ge1xcbiAgICAgIGUgPSBuLCB0ID0gbztcXG4gICAgfSksXFxuICAgIHJlc29sdmU6IGUsXFxuICAgIHJlamVjdDogdFxcbiAgfTtcXG59XFxuY29uc3QgcnQgPSAvKiBAX19QVVJFX18gKi8gT2JqZWN0LmZyZWV6ZSgvKiBAX19QVVJFX18gKi8gT2JqZWN0LmRlZmluZVByb3BlcnR5KHtcXG4gIF9fcHJvdG9fXzogbnVsbCxcXG4gIGNyZWF0ZVByb21pc2U6IE5lXFxufSwgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiBcXFwiTW9kdWxlXFxcIiB9KSksIEggPSAoKSA9PiB7XFxuICBjb25zdCB0ID0gbmV3IFVSTFNlYXJjaFBhcmFtcyh3aW5kb3cubG9jYXRpb24uc2VhcmNoKS5nZXQoXFxcImFjY3QxXFxcIik7XFxuICByZXR1cm4gZyhUKSB8fCB0O1xcbn0sIFcgPSAoZSkgPT4gZSAmJiAhL15WUi8udGVzdChlKSA/IFxcXCJyZWFsXFxcIiA6IFxcXCJkZW1vXFxcIiwgXyA9ICgpID0+IHtcXG4gIGNvbnN0IGUgPSBnKE8pO1xcbiAgaWYgKGUpXFxuICAgIHJldHVybiBlO1xcbiAgY29uc3QgdCA9IHdpbmRvdy5sb2NhdGlvbi5ob3N0bmFtZSwgciA9IHdbdF07XFxuICByZXR1cm4gciB8fCBcXFwiMzYzMDBcXFwiO1xcbn0sIG50ID0gLyogQF9fUFVSRV9fICovIE9iamVjdC5mcmVlemUoLyogQF9fUFVSRV9fICovIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7XFxuICBfX3Byb3RvX186IG51bGwsXFxuICBnZXRBY3RpdmVMb2dpbmlkOiBILFxcbiAgZ2V0QXBwSWQ6IF8sXFxuICBnZXRFbnZpcm9ubWVudEZyb21Mb2dpbmlkOiBXXFxufSwgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiBcXFwiTW9kdWxlXFxcIiB9KSksIENlID0gKCkgPT4ge1xcbiAgY29uc3QgZSA9IFtdLCB0ID0gW10sIHIgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKHdpbmRvdy5sb2NhdGlvbi5zZWFyY2gpO1xcbiAgZm9yIChjb25zdCBbbywgaV0gb2Ygci5lbnRyaWVzKCkpIHtcXG4gICAgY29uc3QgYSA9IG8ubWF0Y2goL15hY2N0KFxcXFxkKykvKSwgcyA9IG8ubWF0Y2goL150b2tlbihcXFxcZCspLyksIGMgPSBvLm1hdGNoKC9eY3VyKFxcXFxkKykvKTtcXG4gICAgYSAmJiAoZVsrYVsxXSAtIDFdID0ge1xcbiAgICAgIC4uLmVbK2FbMV0gLSAxXSB8fCB7fSxcXG4gICAgICBsb2dpbmlkOiBpXFxuICAgIH0pLCBzICYmIChlWytzWzFdIC0gMV0gPSB7XFxuICAgICAgLi4uZVsrc1sxXSAtIDFdIHx8IHt9LFxcbiAgICAgIHRva2VuOiBpXFxuICAgIH0pLCBjICYmIChlWytjWzFdIC0gMV0gPSB7XFxuICAgICAgLi4uZVsrY1sxXSAtIDFdIHx8IHt9LFxcbiAgICAgIGN1cnJlbmN5OiBpXFxuICAgIH0pLCAoL2FjY3QvLnRlc3QobykgfHwgL3Rva2VuLy50ZXN0KG8pIHx8IC9jdXIvLnRlc3QobykpICYmIHQucHVzaChvKTtcXG4gIH1cXG4gIHJldHVybiB7IGxvZ2luSW5mbzogZS5maWx0ZXIoXFxuICAgIChvKSA9PiBbXFxcImxvZ2luaWRcXFwiLCBcXFwidG9rZW5cXFwiLCBcXFwiY3VycmVuY3lcXFwiXS5ldmVyeSgoaSkgPT4gT2JqZWN0LmtleXMobykuaW5jbHVkZXMoaSkpXFxuICApLCBwYXJhbXNUb0RlbGV0ZTogdCB9O1xcbn0sIFVlID0gKGUpID0+IHtcXG4gIGlmIChlICE9IG51bGwgJiYgZS5sZW5ndGgpXFxuICAgIHJldHVybiBlLmZpbmQoKHQpID0+IC9eVlIvLnRlc3QodC5sb2dpbmlkKSkgfHwgZVswXTtcXG59LCAkZSA9IChlKSA9PiB7XFxuICBjb25zdCB0ID0gbmV3IFVSTFNlYXJjaFBhcmFtcyh3aW5kb3cubG9jYXRpb24uc2VhcmNoKTtcXG4gIGUuZm9yRWFjaCgobikgPT4gdC5kZWxldGUobikpO1xcbiAgY29uc3QgciA9IGAke3dpbmRvdy5sb2NhdGlvbi5wYXRobmFtZX0ke3QudG9TdHJpbmcoKSA/IGA/JHt0LnRvU3RyaW5nKCl9YCA6IFxcXCJcXFwifWA7XFxuICB3aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGUobnVsbCwgXFxcIlxcXCIsIHIpO1xcbn0sIEVlID0gKCkgPT4ge1xcbiAgY29uc3QgZSA9IGcocCkgPz8gXFxcIkVOXFxcIjtcXG4gIHJldHVybiBgaHR0cHM6Ly9vYXV0aC5kZXJpdi5jb20vb2F1dGgyL2F1dGhvcml6ZT9hcHBfaWQ9JHtfKCl9Jmw9JHtlfSZicmFuZD0ke0R9YDtcXG59LCB4ID0gKCkgPT4ge1xcbiAgY29uc3QgZSA9IGcoTSk7XFxuICBpZiAoZSlcXG4gICAgcmV0dXJuIGU7XFxuICBjb25zdCB0ID0gSCgpO1xcbiAgcmV0dXJuIHZbVyh0KV07XFxufSwgQmUgPSAoKSA9PiB7XFxuICBjb25zdCBlID0geCgpLCB0ID0gZyhwKSA/PyBcXFwiRU5cXFwiO1xcbiAgcmV0dXJuIGB3c3M6Ly8ke2V9L3dlYnNvY2tldHMvdjM/YXBwX2lkPSR7XygpfSZsPSR7dH0mYnJhbmQ9JHtEfWA7XFxufSwgamUgPSAoZSkgPT4gbmV3IFVSTFNlYXJjaFBhcmFtcyh3aW5kb3cubG9jYXRpb24uc2VhcmNoKS5nZXQoZSksIEEgPSAoZSkgPT4gZS5yZXBsYWNlKC8oXlxcXFwvfFxcXFwvJHxbXmEtekEtWjAtOS1fLi8oKSNdKS9nLCBcXFwiXFxcIiksIEZlID0gKGUsIHQpID0+IHtcXG4gIHZhciBvO1xcbiAgY29uc3QgciA9IHQgIT0gbnVsbCAmJiB0LmlzRVUgPyAkIDogVTtcXG4gIGxldCBuID0gKChvID0gZyhwKSkgPT0gbnVsbCA/IHZvaWQgMCA6IG8udG9Mb3dlckNhc2UoKSkgPz8gXFxcImVuXFxcIjtcXG4gIHJldHVybiBuID0gbiA9PT0gXFxcImVuXFxcIiA/IFxcXCJcXFwiIDogYC8ke24ucmVwbGFjZShcXFwiX1xcXCIsIFxcXCItXFxcIil9YCwgdCAhPSBudWxsICYmIHQuaXNEb2N1bWVudCA/IGAke3J9LyR7QShlKX1gIDogYCR7cn0ke259LyR7QShlKX1gO1xcbn0sIEdlID0gKGUpID0+IC9eKCgoLiopXFxcXC4pPyhsb2NhbGhvc3Q6ODQ0M3xwYWdlcy5kZXZ8YmluYXJ5XFxcXC4oc3h8Y29tKXxkZXJpdi4oY29tfG1lfGJlfGRldikpKSQvLnRlc3QoZSksIG90ID0gLyogQF9fUFVSRV9fICovIE9iamVjdC5mcmVlemUoLyogQF9fUFVSRV9fICovIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7XFxuICBfX3Byb3RvX186IG51bGwsXFxuICBmaWx0ZXJTZWFyY2hQYXJhbXM6ICRlLFxcbiAgZ2V0RGVmYXVsdEFjdGl2ZUFjY291bnQ6IFVlLFxcbiAgZ2V0RGVyaXZTdGF0aWNVUkw6IEZlLFxcbiAgZ2V0TG9naW5JbmZvRnJvbVVSTDogQ2UsXFxuICBnZXRPYXV0aFVSTDogRWUsXFxuICBnZXRRdWVyeVBhcmFtZXRlcjogamUsXFxuICBnZXRTZXJ2ZXJVUkw6IHgsXFxuICBnZXRXZWJzb2NrZXRVUkw6IEJlLFxcbiAgaXNEb21haW5BbGxvd2VkOiBHZSxcXG4gIG5vcm1hbGl6ZVBhdGg6IEFcXG59LCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6IFxcXCJNb2R1bGVcXFwiIH0pKSwgWWUgPSAoZSkgPT4gQltlXSwgemUgPSAoKSA9PiBFLmRvbWFpbk5hbWUsIEllID0gKGUpID0+IGpbZV0sIGF0ID0gLyogQF9fUFVSRV9fICovIE9iamVjdC5mcmVlemUoLyogQF9fUFVSRV9fICovIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7XFxuICBfX3Byb3RvX186IG51bGwsXFxuICBnZXRCcmFuZFdlYnNpdGVOYW1lOiB6ZSxcXG4gIGdldExlZ2FsTGFuZGluZ0NvbXBhbnk6IFllLFxcbiAgZ2V0UGxhdGZvcm1OYW1lOiBJZVxcbn0sIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogXFxcIk1vZHVsZVxcXCIgfSkpLCBiID0gKGUpID0+IEYudGVzdChlKSwgWmUgPSBhc3luYyAoKSA9PiB7XFxuICBjb25zdCBlID0gd2luZG93LCB0ID0gbmF2aWdhdG9yLCByID0gdC51c2VyQWdlbnQgPz8gZS5vcGVyYSA/PyBcXFwiXFxcIjtcXG4gIGlmICgvd2luZG93cyBwaG9uZS9pLnRlc3QocikpXFxuICAgIHJldHVybiBcXFwiV2luZG93cyBQaG9uZVxcXCI7XFxuICBpZiAoL2FuZHJvaWQvaS50ZXN0KHIpKSB7XFxuICAgIGlmICh0LnVzZXJBZ2VudERhdGEpIHtcXG4gICAgICBjb25zdCBuID0gYXdhaXQgdC51c2VyQWdlbnREYXRhLmdldEhpZ2hFbnRyb3B5VmFsdWVzKFtcXFwibW9kZWxcXFwiXSk7XFxuICAgICAgaWYgKGIoKG4gPT0gbnVsbCA/IHZvaWQgMCA6IG4ubW9kZWwpIHx8IFxcXCJcXFwiKSlcXG4gICAgICAgIHJldHVybiBcXFwiaHVhd2VpXFxcIjtcXG4gICAgfSBlbHNlIGlmIChiKHIpIHx8IC9odWF3ZWkvaS50ZXN0KHIpKVxcbiAgICAgIHJldHVybiBcXFwiaHVhd2VpXFxcIjtcXG4gICAgcmV0dXJuIFxcXCJBbmRyb2lkXFxcIjtcXG4gIH1cXG4gIHJldHVybiAvaVBhZHxpUGhvbmV8aVBvZC8udGVzdChyKSAmJiAhZS5NU1N0cmVhbSA/IFxcXCJpT1NcXFwiIDogXFxcInVua25vd25cXFwiO1xcbn0sIHN0ID0gLyogQF9fUFVSRV9fICovIE9iamVjdC5mcmVlemUoLyogQF9fUFVSRV9fICovIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7XFxuICBfX3Byb3RvX186IG51bGwsXFxuICBtb2JpbGVPU0RldGVjdEFzeW5jOiBaZVxcbn0sIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogXFxcIk1vZHVsZVxcXCIgfSkpO1xcblxcbi8vIyBzb3VyY2VVUkw9W21vZHVsZV1cXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaUxpNHZMaTR2Ym05a1pWOXRiMlIxYkdWekwwQmtaWEpwZGkxamIyMHZkWFJwYkhNdlpHbHpkQzlrWlhKcGRpMTFkR2xzY3k1cWN5SXNJbTFoY0hCcGJtZHpJam9pT3pzN096czdPenM3T3pzN096czdPenM3T3p0QlFVRkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFXMUNRU0lzSW5OdmRYSmpaWE1pT2xzaWQyVmljR0ZqYXpvdkwwQmtaWEpwZGk5MGNtRmtaWEl2TGk0dkxpNHZibTlrWlY5dGIyUjFiR1Z6TDBCa1pYSnBkaTFqYjIwdmRYUnBiSE12WkdsemRDOWtaWEpwZGkxMWRHbHNjeTVxY3o4NU5EVXhJbDBzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSW1OdmJuTjBJSFlnUFNCN1hHNGdJSEpsWVd3NklGd2laM0psWlc0dVpHVnlhWFozY3k1amIyMWNJaXhjYmlBZ1pHVnRiem9nWENKaWJIVmxMbVJsY21sMmQzTXVZMjl0WENKY2JuMHNJSGNnUFNCN1hHNGdJRndpWkdWeWFYWXVZWEJ3WENJNklGd2lNVFk1TWpsY0lpeGNiaUFnWENKaGNIQXVaR1Z5YVhZdVkyOXRYQ0k2SUZ3aU1UWTVNamxjSWl4Y2JpQWdYQ0p6ZEdGbmFXNW5MV0Z3Y0M1a1pYSnBkaTVqYjIxY0lqb2dYQ0l4TmpNd00xd2lMRnh1SUNCY0ltRndjQzVrWlhKcGRpNXRaVndpT2lCY0lqRTBNVEZjSWl4Y2JpQWdYQ0p6ZEdGbmFXNW5MV0Z3Y0M1a1pYSnBkaTV0WlZ3aU9pQmNJakUwTVRGY0lpeGNiaUFnWENKaGNIQXVaR1Z5YVhZdVltVmNJam9nWENJek1EYzJOMXdpTEZ4dUlDQmNJbk4wWVdkcGJtY3RZWEJ3TG1SbGNtbDJMbUpsWENJNklGd2lNekV4T0RaY0lpeGNiaUFnWENKaWFXNWhjbmt1WTI5dFhDSTZJRndpTVZ3aUxGeHVJQ0JjSW5SbGMzUXRZWEJ3TG1SbGNtbDJMbU52YlZ3aU9pQmNJalV4TURjeVhDSXNYRzRnSUZ3aWNESndMbVJsY21sMkxtTnZiVndpT2lCY0lqWXhPRFU1WENJc1hHNGdJRndpYzNSaFoybHVaeTF3TW5BdVpHVnlhWFl1WTI5dFhDSTZJRndpTmpJd01UbGNJbHh1ZlN3Z1JDQTlJRndpWkdWeWFYWmNJaXdnUzJVZ1BTQXZLaUJBWDE5UVZWSkZYMThnS2k4Z1QySnFaV04wTG1aeVpXVjZaU2d2S2lCQVgxOVFWVkpGWDE4Z0tpOGdUMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblI1S0h0Y2JpQWdYMTl3Y205MGIxOWZPaUJ1ZFd4c0xGeHVJQ0JoY0hCQ2NtRnVaRG9nUkN4Y2JpQWdaRzl0WVdsdVFYQndTV1E2SUhjc1hHNGdJR1Z1ZG1seWIyNXRaVzUwY3pvZ2RseHVmU3dnVTNsdFltOXNMblJ2VTNSeWFXNW5WR0ZuTENCN0lIWmhiSFZsT2lCY0lrMXZaSFZzWlZ3aUlIMHBLU3dnVENBOUlIdGNiaUFnUVVGRU9pQXlMRnh1SUNCQlJVUTZJRElzWEc0Z0lFRkdUam9nTWl4Y2JpQWdRVXhNT2lBeUxGeHVJQ0JCVFVRNklESXNYRzRnSUVGT1J6b2dNaXhjYmlBZ1FVOUJPaUF5TEZ4dUlDQkJVbE02SURJc1hHNGdJRUZWUkRvZ01peGNiaUFnUVZkSE9pQXlMRnh1SUNCQldrNDZJRElzWEc0Z0lFSkJUVG9nTWl4Y2JpQWdRa0pFT2lBeUxGeHVJQ0JDUTBnNklEZ3NYRzRnSUVKRVZEb2dNaXhjYmlBZ1FrZE9PaUF5TEZ4dUlDQkNTRVE2SURNc1hHNGdJRUpKUmpvZ01DeGNiaUFnUWsxRU9pQXlMRnh1SUNCQ1RrUTZJRElzWEc0Z0lFSlBRam9nTWl4Y2JpQWdRazlXT2lBeUxGeHVJQ0JDVWt3NklESXNYRzRnSUVKVFJEb2dNaXhjYmlBZ1FsUkRPaUE0TEZ4dUlDQkNWRTQ2SURJc1hHNGdJRUpWVTBRNklESXNYRzRnSUVKWFVEb2dNaXhjYmlBZ1FsbE9PaUF5TEZ4dUlDQkNXa1E2SURJc1hHNGdJRU5CUkRvZ01peGNiaUFnUTBSR09pQXlMRnh1SUNCRFNFVTZJRElzWEc0Z0lFTklSam9nTWl4Y2JpQWdRMGhYT2lBeUxGeHVJQ0JEVEVZNklEUXNYRzRnSUVOTVVEb2dNQ3hjYmlBZ1EwNVpPaUF5TEZ4dUlDQkRUMUE2SURJc1hHNGdJRU5QVlRvZ01peGNiaUFnUTFKRE9pQXlMRnh1SUNCRFZVTTZJRElzWEc0Z0lFTlZVRG9nTWl4Y2JpQWdRMVpGT2lBeUxGeHVJQ0JEV2tzNklESXNYRzRnSUVSQlNUb2dNaXhjYmlBZ1JFcEdPaUF3TEZ4dUlDQkVTMHM2SURJc1hHNGdJRVJQVURvZ01peGNiaUFnUkZwRU9pQXlMRnh1SUNCRlIxQTZJRElzWEc0Z0lFVlNUam9nTWl4Y2JpQWdSVlJDT2lBeUxGeHVJQ0JGVkVNNklEZ3NYRzRnSUVWVVNEb2dPQ3hjYmlBZ1JWVlNPaUF5TEZ4dUlDQkZWVkpUT2lBeUxGeHVJQ0JsVlZORVZEb2dNaXhjYmlBZ1JrcEVPaUF5TEZ4dUlDQkdTMUE2SURJc1hHNGdJRWRDVURvZ01peGNiaUFnUjBWTU9pQXlMRnh1SUNCSFNGTTZJRElzWEc0Z0lFZEpVRG9nTWl4Y2JpQWdSMDFFT2lBeUxGeHVJQ0JIVGtZNklEQXNYRzRnSUVkVVVUb2dNaXhjYmlBZ1IxbEVPaUF5TEZ4dUlDQklTMFE2SURJc1hHNGdJRWhPVERvZ01peGNiaUFnU0ZKTE9pQXlMRnh1SUNCSVZFYzZJRElzWEc0Z0lFaFZSam9nTWl4Y2JpQWdTVVJMT2lBd0xGeHVJQ0JKUkZJNklESXNYRzRnSUVsTVV6b2dNaXhjYmlBZ1NVNVNPaUF5TEZ4dUlDQkpVVVE2SURNc1hHNGdJRWxTVWpvZ01peGNiaUFnU1ZOTE9pQXdMRnh1SUNCS1RVUTZJRElzWEc0Z0lFcFBSRG9nTXl4Y2JpQWdTbEJaT2lBd0xGeHVJQ0JMUlZNNklESXNYRzRnSUV0SFV6b2dNaXhjYmlBZ1MwaFNPaUF5TEZ4dUlDQkxUVVk2SURBc1hHNGdJRXRRVnpvZ01peGNiaUFnUzFKWE9pQXdMRnh1SUNCTFYwUTZJRE1zWEc0Z0lFdFpSRG9nTWl4Y2JpQWdTMXBVT2lBeUxGeHVJQ0JNUVVzNklESXNYRzRnSUV4Q1VEb2dNaXhjYmlBZ1RFdFNPaUF5TEZ4dUlDQk1Va1E2SURJc1hHNGdJRXhUVERvZ01peGNiaUFnVEZSRE9pQTRMRnh1SUNCTVdVUTZJRE1zWEc0Z0lFMUJSRG9nTWl4Y2JpQWdUVVJNT2lBeUxGeHVJQ0JOUjBFNklESXNYRzRnSUUxTFJEb2dNaXhjYmlBZ1RVMUxPaUF5TEZ4dUlDQk5UbFE2SURJc1hHNGdJRTFQVURvZ01peGNiaUFnVFZKVk9pQXlMRnh1SUNCTlZWSTZJRElzWEc0Z0lFMVdVam9nTWl4Y2JpQWdUVmRMT2lBeUxGeHVJQ0JOV0U0NklESXNYRzRnSUUxWVZqb2dNaXhjYmlBZ1RWbFNPaUF5TEZ4dUlDQk5XazQ2SURJc1hHNGdJRTVCUkRvZ01peGNiaUFnVGtkT09pQXlMRnh1SUNCT1NVODZJRElzWEc0Z0lFNVBTem9nTWl4Y2JpQWdUbEJTT2lBeUxGeHVJQ0JPV2tRNklESXNYRzRnSUU5TlVqb2dNeXhjYmlBZ1VFRkNPaUF5TEZ4dUlDQlFRVmc2SURJc1hHNGdJRkJGVGpvZ01peGNiaUFnVUVkTE9pQXlMRnh1SUNCUVNGQTZJRElzWEc0Z0lGQkxVam9nTWl4Y2JpQWdVRXhPT2lBeUxGeHVJQ0JRV1VjNklEQXNYRzRnSUZGQlVqb2dNaXhjYmlBZ1VrOU9PaUF5TEZ4dUlDQlNVMFE2SURJc1hHNGdJRkpWUWpvZ01peGNiaUFnVWxkR09pQXdMRnh1SUNCVFFWSTZJRElzWEc0Z0lGTkNSRG9nTWl4Y2JpQWdVME5TT2lBeUxGeHVJQ0JUUkVjNklESXNYRzRnSUZORlN6b2dNaXhjYmlBZ1UwZEVPaUF5TEZ4dUlDQlRTRkE2SURJc1hHNGdJRk5NVERvZ01peGNiaUFnVTA5VE9pQXlMRnh1SUNCVFVrUTZJRElzWEc0Z0lGTlRVRG9nTWl4Y2JpQWdVMVJPT2lBeUxGeHVJQ0JUVmtNNklESXNYRzRnSUZOWlVEb2dNaXhjYmlBZ1UxcE1PaUF5TEZ4dUlDQlVTRUk2SURJc1hHNGdJRlJLVXpvZ01peGNiaUFnVkUxVU9pQXlMRnh1SUNCVVRrUTZJRE1zWEc0Z0lGUlBVRG9nTWl4Y2JpQWdWRkpaT2lBeUxGeHVJQ0JVVkVRNklESXNYRzRnSUZSVlUwUTZJRElzWEc0Z0lIUlZVMFJVT2lBeUxGeHVJQ0JVVjBRNklESXNYRzRnSUZSYVV6b2dNaXhjYmlBZ1ZVRklPaUF5TEZ4dUlDQlZSMWc2SURBc1hHNGdJRlZUUWpvZ01peGNiaUFnVlZORU9pQXlMRnh1SUNCVlUwUkRPaUF5TEZ4dUlDQlZVMFJMT2lBeUxGeHVJQ0JWVTFRNklESXNYRzRnSUZWVFRqb2dNaXhjYmlBZ1ZWbEpPaUF3TEZ4dUlDQlZXVlU2SURJc1hHNGdJRlZaVnpvZ05DeGNiaUFnVlZwVE9pQXlMRnh1SUNCV1JWTTZJRElzWEc0Z0lGWk9SRG9nTUN4Y2JpQWdWbFZXT2lBd0xGeHVJQ0JYVTFRNklESXNYRzRnSUZoQlJqb2dNQ3hjYmlBZ1dFTkVPaUF5TEZ4dUlDQllUMFk2SURBc1hHNGdJRmhRUmpvZ01DeGNiaUFnV1VWU09pQXlMRnh1SUNCYVFWSTZJRElzWEc0Z0lGcE5Wem9nTWl4Y2JpQWdXbGRNT2lBeVhHNTlMQ0JJWlNBOUlDOHFJRUJmWDFCVlVrVmZYeUFxTHlCUFltcGxZM1F1Wm5KbFpYcGxLQzhxSUVCZlgxQlZVa1ZmWHlBcUx5QlBZbXBsWTNRdVpHVm1hVzVsVUhKdmNHVnlkSGtvZTF4dUlDQmZYM0J5YjNSdlgxODZJRzUxYkd3c1hHNGdJSEJ5WldOcGMybHZiam9nVEZ4dWZTd2dVM2x0WW05c0xuUnZVM1J5YVc1blZHRm5MQ0I3SUhaaGJIVmxPaUJjSWsxdlpIVnNaVndpSUgwcEtTd2dVQ0E5SUZ0Y0lsQk9SMXdpTENCY0lrcFFSMXdpTENCY0lrcFFSVWRjSWl3Z1hDSkhTVVpjSWl3Z1hDSlFSRVpjSWwwc0lGZGxJRDBnTHlvZ1FGOWZVRlZTUlY5ZklDb3ZJRTlpYW1WamRDNW1jbVZsZW1Vb0x5b2dRRjlmVUZWU1JWOWZJQ292SUU5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGVTaDdYRzRnSUY5ZmNISnZkRzlmWHpvZ2JuVnNiQ3hjYmlBZ2MzVndjRzl5ZEdWa1JHOWpkVzFsYm5SR2IzSnRZWFJ6T2lCUVhHNTlMQ0JUZVcxaWIyd3VkRzlUZEhKcGJtZFVZV2NzSUhzZ2RtRnNkV1U2SUZ3aVRXOWtkV3hsWENJZ2ZTa3BMQ0JVSUQwZ1hDSmpiR2xsYm5RdVlXTjBhWFpsWDJ4dloybHVhV1JjSWl3Z1ZpQTlJRndpWTJ4cFpXNTBMbUZqWTI5MWJuUmZiR2x6ZEZ3aUxDQktJRDBnWENKamJHbGxiblF1ZG1WeWFXWjVYMlZ0WVdsc1hDSXNJRThnUFNCY0ltTnZibVpwWnk1aGNIQmZhV1JjSWl3Z1RTQTlJRndpWTI5dVptbG5Mbk5sY25abGNsOTFjbXhjSWl3Z2NDQTlJRndpYVRFNGJsOXNZVzVuZFdGblpWd2lMQ0JySUQwZ1hDSjFhUzUwYUdWdFpWd2lMQ0JZSUQwZ1hDSjFhUzV6YUc5M1gzSmxjRzl5ZEY5a2NtRjNaWEpjSWl3Z1VTQTlJRndpZFdrdVpYaHdZVzVrWDJGalkyOTFiblJmYzNkcGRHTm9aWEpjSWl3Z2NTQTlJRndpZEhKaFpHVnlMbXhoZVc5MWRGd2lMQ0JsWlNBOUlGd2ljMmh2ZFd4a1gyNXZkRjl6YUc5M1gyRjFkRzlmWVhKamFHbDJaVjl0WlhOellXZGxYMkZuWVdsdVhDSXNJSFJsSUQwZ1hDSnZjbVJsY2w5cFpITmNJaXdnY21VZ1BTQmNJbk5vYjNWc1pGOXphRzkzWDNBeWNGOW5kV2xrWlZ3aUxDQnVaU0E5SUZ3aWMyaHZkV3hrWDNOb2IzZGZjREp3WDJadmJHeHZkMTkxYzJWeVgyZDFhV1JsWENJc0lIaGxJRDBnTHlvZ1FGOWZVRlZTUlY5ZklDb3ZJRTlpYW1WamRDNW1jbVZsZW1Vb0x5b2dRRjlmVUZWU1JWOWZJQ292SUU5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGVTaDdYRzRnSUY5ZmNISnZkRzlmWHpvZ2JuVnNiQ3hjYmlBZ1lXTmpiM1Z1ZEV4cGMzUTZJRllzWEc0Z0lHRmpkR2wyWlV4dloybHVhV1E2SUZRc1hHNGdJR052Ym1acFowRndjRWxrT2lCUExGeHVJQ0JqYjI1bWFXZFRaWEoyWlhKVlVrdzZJRTBzWEc0Z0lHa3hPRzVNWVc1bmRXRm5aVG9nY0N4Y2JpQWdiR0Z6ZEZabGNtbG1lVVZ0WVdsc09pQktMRnh1SUNCd01uQkJjbU5vYVhabFRXVnpjMkZuWlRvZ1pXVXNYRzRnSUhBeWNFOXlaR1Z5U1dSek9pQjBaU3hjYmlBZ2NESndVMmh2ZDBadmJHeHZkMVZ6WlhKSGRXbGtaVG9nYm1Vc1hHNGdJSEF5Y0ZOb2IzZEhkV2xrWlRvZ2NtVXNYRzRnSUhSeVlXUmxja3hoZVc5MWREb2djU3hjYmlBZ2RXbEZlSEJoYm1SQlkyTnZkVzUwVTNkcGRHTm9aWEk2SUZFc1hHNGdJSFZwVTJodmQxSmxjRzl5ZEhORWNtRjNaWEk2SUZnc1hHNGdJSFZwVkdobGJXVTZJR3RjYm4wc0lGTjViV0p2YkM1MGIxTjBjbWx1WjFSaFp5d2dleUIyWVd4MVpUb2dYQ0pOYjJSMWJHVmNJaUI5S1Nrc0lHZ2dQU0JjSW1SbGNtbDJMbU52YlZ3aUxDQlNJRDBnWENKa1pYSnBkaTV0WlZ3aUxDQk9JRDBnWENKa1pYSnBkaTVpWlZ3aUxDQkRJRDBnVzJnc0lFNHNJRkpkTENCbUlEMGdkSGx3Wlc5bUlIZHBibVJ2ZHlBOElGd2lkVndpSUNZbUlIZHBibVJ2ZHk1c2IyTmhkR2x2Ymk1b2IzTjBibUZ0WlM1emNHeHBkQ2hjSW1Gd2NDNWNJaWxiTVYwc0lHUWdQU0JETG1sdVkyeDFaR1Z6S0dZcElEOGdaaUE2SUdnc0lHOWxJRDBnWUdoMGRIQnpPaTh2WW05MExpUjdaSDFnTENCaFpTQTlJR0JvZEhSd2N6b3ZMM04wWVdkcGJtY3RZbTkwTGlSN1pIMWdMQ0J6WlNBOUlHQm9kSFJ3Y3pvdkwyRndjQzRrZTJSOVlDd2dhV1VnUFNCZ2FIUjBjSE02THk5emRHRm5hVzVuTFdGd2NDNGtlMlI5WUN3Z1ZTQTlJR0JvZEhSd2N6b3ZMeVI3WkgxZ0xDQWtJRDBnWUdoMGRIQnpPaTh2WlhVdUpIdGtmV0FzSUdObElEMGdZR2gwZEhCek9pOHZjM1JoWjJsdVp5NGtlMlI5WUN3Z1pHVWdQU0JrTENCc1pTQTlJR0JvZEhSd2N6b3ZMM050WVhKMGRISmhaR1Z5TGlSN1pIMWdMQ0IxWlNBOUlHQm9kSFJ3Y3pvdkwzTjBZV2RwYm1jdGMyMWhjblIwY21Ga1pYSXVKSHRrZldBc0lHZGxJRDBnWUdoMGRIQnpPaTh2Y0RKd0xpUjdaSDFnTENCdFpTQTlJR0JvZEhSd2N6b3ZMM04wWVdkcGJtY3RjREp3TGlSN1pIMWdMQ0J3WlNBOUlGd2lhSFIwY0hNNkx5OTNZUzV0WlM4ek5UWTVPVFUzT0RNME1Wd2lMQ0JUWlNBOUlIdGNiaUFnYkdGdVp6b2dYQ0pzWVc1blhDSXNYRzRnSUdGamRHbHZiam9nWENKaFkzUnBiMjVjSWx4dWZTd2dWbVVnUFNBdktpQkFYMTlRVlZKRlgxOGdLaThnVDJKcVpXTjBMbVp5WldWNlpTZ3ZLaUJBWDE5UVZWSkZYMThnS2k4Z1QySnFaV04wTG1SbFptbHVaVkJ5YjNCbGNuUjVLSHRjYmlBZ1gxOXdjbTkwYjE5Zk9pQnVkV3hzTEZ4dUlDQmlZWE5sUkc5dFlXbHVPaUJtTEZ4dUlDQmlhVzVoY25sQ2IzUlFjbTlrZFdOMGFXOXVPaUJ2WlN4Y2JpQWdZbWx1WVhKNVFtOTBVM1JoWjJsdVp6b2dZV1VzWEc0Z0lHUmxjbWwyT2lCb0xGeHVJQ0JrWlhKcGRrRndjRkJ5YjJSMVkzUnBiMjQ2SUhObExGeHVJQ0JrWlhKcGRrRndjRk4wWVdkcGJtYzZJR2xsTEZ4dUlDQmtaWEpwZGtKbE9pQk9MRnh1SUNCa1pYSnBka052YlZCeWIyUjFZM1JwYjI0NklGVXNYRzRnSUdSbGNtbDJRMjl0VUhKdlpIVmpkR2x2YmtWVk9pQWtMRnh1SUNCa1pYSnBka052YlZOMFlXZHBibWM2SUdObExGeHVJQ0JrWlhKcGRraHZjM1E2SUdSbExGeHVJQ0JrWlhKcGRrMWxPaUJTTEZ4dUlDQmtaWEpwZGxBeWNGQnliMlIxWTNScGIyNDZJR2RsTEZ4dUlDQmtaWEpwZGxBeWNGTjBZV2RwYm1jNklHMWxMRnh1SUNCa2IyMWhhVzQ2SUdRc1hHNGdJSEYxWlhKNVVHRnlZVzFsZEdWeWN6b2dVMlVzWEc0Z0lITnRZWEowVkhKaFpHVnlVSEp2WkhWamRHbHZiam9nYkdVc1hHNGdJSE50WVhKMFZISmhaR1Z5VTNSaFoybHVaem9nZFdVc1hHNGdJSE4xY0hCdmNuUmxaRVJ2YldGcGJuTTZJRU1zWEc0Z0lIZG9ZWFJ6UVhCd09pQndaVnh1ZlN3Z1UzbHRZbTlzTG5SdlUzUnlhVzVuVkdGbkxDQjdJSFpoYkhWbE9pQmNJazF2WkhWc1pWd2lJSDBwS1N3Z1ptVWdQU0I3WEc0Z0lDOHFLbHh1SUNBZ0tpQlNaWEJ5WlhObGJuUnpJSFJvWlNCemNHVmphV0ZzSUdOb1lYSmhZM1JsY25NZ2NHVnliV2wwZEdWa0lHbHVJR0Z1SUdGa1pISmxjM011WEc0Z0lDQXFJRUJ5WlcxaGNtdHpJRlJvYVhNZ2FYTWdkRzhnWW1VZ2RYTmxaQ0JwYmlCMGFHVWdiV1Z6YzJGblpTQnZaaUIwYUdVZ2RtRnNhV1JoZEdsdmJpQmxjbkp2Y2l3Z2RHOGdiR1YwSUhSb1pTQjFjMlZ5SUd0dWIzY2dkMmhwWTJnZ1kyaGhjbUZqZEdWeWN5QmhjbVVnY0dWeWJXbDBkR1ZrTGx4dUlDQWdLaUJBWlhoaGJYQnNaU0JnVTNCbFkybGhiQ0JqYUdGeVlXTjBaWEp6SUhCbGNtMXBkSFJsWkRvZ0pIdFdZV3hwWkdGMGFXOXVRMjl1YzNSaGJuUnpMbTFsYzNOaFoyVnpTR2x1ZEhNdVlXUmtjbVZ6YzFCbGNtMXBkSFJsWkZOd1pXTnBZV3hEYUdGeVlXTjBaWEp6ZldCY2JpQWdJQ292WEc0Z0lHRmtaSEpsYzNOUVpYSnRhWFIwWldSVGNHVmphV0ZzUTJoaGNtRmpkR1Z5Y3pvZ1hDSXVJQ3dnSnlBNklEc2dLQ0FwSU1Ld0lFQWdJeUF2SUMxY0lseHVmU3dnUVdVZ1BTQjdYRzRnSUM4cUtseHVJQ0FnS2lCQWNtVm5aWGdnTDE1YlhGeHdlMHg5WEZ4d2UwNWtmVnhjY3lmaWdKa3VMRG83S0NsY1hGeGNlSHRpTUgxQUl5OHRYWHN3TERjd2ZTUXZkVnh1SUNBZ0tpQkFaR1Z6WTNKcGNIUnBiMjVjYmlBZ0lDb2dWR2hwY3lCd1lYUjBaWEp1SUcxaGRHTm9aWE1nWVc1NUlITjBjbWx1WnlCM2FYUm9JRzV2SUcxdmNtVWdkR2hoYmlBM01DQmphR0Z5WVdOMFpYSnpMQ0JqWVc0Z1kyOXVkR0ZwYmlCc1pYUjBaWEp6TENCdWRXMWlaWEp6TENCemNHRmpaWE1zSUdGdVpDQmhibmtnYjJZZ2RHaGxJR1p2Ykd4dmQybHVaeUJ6Y0dWamFXRnNJR05vWVhKaFkzUmxjbk02SUNmaWdKa3VMRG83S0NsQUl5OHRMbHh1SUNBZ0tpQkFaWGhoYlhCc1pTQldZV3hwWkdGMGFXOXVRMjl1YzNSaGJuUnpMbkJoZEhSbGNtNXpMbUZrWkhKbGMzTXVkR1Z6ZENoY0lqRXlNeUJOWVdsdUlGTjBMbHdpS1Z4dUlDQWdLaUJBWlhoaGJYQnNaU0JXWVd4cFpHRjBhVzl1UTI5dWMzUmhiblJ6TG5CaGRIUmxjbTV6TG1Ga1pISmxjM011ZEdWemRDaGNJa0Z3ZEM0Z01USXpYQ0lwWEc0Z0lDQXFJRUJsZUdGdGNHeGxJRlpoYkdsa1lYUnBiMjVEYjI1emRHRnVkSE11Y0dGMGRHVnlibk11WVdSa2NtVnpjeTUwWlhOMEtGd2lNVEl6SUUxaGFXNGdVM1F1SUVGd2RDNGdNVEl6WENJcFhHNGdJQ0FxS2k5Y2JpQWdZV1JrY21WemN6b2dMMTViWEZ4d2UweDlYRnh3ZTA1a2ZWeGNjeWZpZ0prdUxEbzdLQ2xjWEZ4Y2VIdGlNSDFBSXk4dFhYc3dMRGN3ZlNRdmRTeGNiaUFnTHlvcVhHNGdJQ0FxSUVCeVpXZGxlQ0F2WGx4Y2NIdE1mVnRjWEhCN1RIMWNYSE1uTGkxZGV6QXNORGw5SkM5MVhHNGdJQ0FxSUVCa1pYTmpjbWx3ZEdsdmJpQlVhR2x6SUhCaGRIUmxjbTRnYldGMFkyaGxjeUJoYm5rZ2MzUnlhVzVuSUhkcGRHZ2dibThnYlc5eVpTQjBhR0Z1SURVd0lHTm9ZWEpoWTNSbGNuTXVYRzRnSUNBcUlFQmxlR0Z0Y0d4bElGWmhiR2xrWVhScGIyNURiMjV6ZEdGdWRITXVjR0YwZEdWeWJuTXVZV1JrY21WemMwTnBkSGt1ZEdWemRDaGNJazFoYVc0Z1UzUXVYQ0lwWEc0Z0lDQXFJRUJsZUdGdGNHeGxJRlpoYkdsa1lYUnBiMjVEYjI1emRHRnVkSE11Y0dGMGRHVnlibk11WVdSa2NtVnpjME5wZEhrdWRHVnpkQ2hjSWtGd2RDNWNJaWxjYmlBZ0lDb2dRR1Y0WVcxd2JHVWdWbUZzYVdSaGRHbHZia052Ym5OMFlXNTBjeTV3WVhSMFpYSnVjeTVoWkdSeVpYTnpRMmwwZVM1MFpYTjBLRndpVFdGcGJpQlRkQzRnUVhCMExsd2lLVnh1SUNBZ0tpb3ZYRzRnSUdGa1pISmxjM05EYVhSNU9pQnVaWGNnVW1WblJYaHdLRndpWGx4Y1hGeHdlMHg5VzF4Y1hGeHdlMHg5WEZ4Y1hITW5MaTFkZXpBc05EbDlKRndpTENCY0luVmNJaWtzWEc0Z0lDOHFLbHh1SUNBZ0tpQkFjbVZuWlhnZ0wxNWJYRnh3ZTB4OVhGeHdlMDVrZlZ4Y2N5Y3VMQzA3WFhzd0xERXdNSDBrTDNWY2JpQWdJQ29nUUdSbGMyTnlhWEIwYVc5dUlGUm9hWE1nY0dGMGRHVnliaUJ0WVhSamFHVnpJR0Z1ZVNCemRISnBibWNnZEdoaGRDQmpiMjUwWVdsdWN5QjFjQ0IwYnlBeE1EQWdZMmhoY21GamRHVnljeUJqYjIxd2IzTmxaQ0J2WmlCVmJtbGpiMlJsSUd4bGRIUmxjbk1zSUZWdWFXTnZaR1VnWkdsbmFYUnpMQ0IzYUdsMFpYTndZV05sSUdOb1lYSmhZM1JsY25Nc0lHRndiM04wY205d2FHVnpMQ0J3WlhKcGIyUnpMQ0JqYjIxdFlYTXNJR2g1Y0dobGJuTXNJR0Z1WkNCelpXMXBZMjlzYjI1eklDZ2dKeTRzTFRzcExseHVJQ0FnS2lCQVpYaGhiWEJzWlNCV1lXeHBaR0YwYVc5dVEyOXVjM1JoYm5SekxuQmhkSFJsY201ekxtRmtaSEpsYzNOVGRHRjBaUzUwWlhOMEtGd2lUbVYzSUZsdmNtdGNJaWxjYmlBZ0lDb2dRR1Y0WVcxd2JHVWdWbUZzYVdSaGRHbHZia052Ym5OMFlXNTBjeTV3WVhSMFpYSnVjeTVoWkdSeVpYTnpVM1JoZEdVdWRHVnpkQ2hjSWxGMXc2bGlaV05jSWlsY2JpQWdJQ29xTDF4dUlDQmhaR1J5WlhOelUzUmhkR1U2SUM5ZVcxeGNjSHRNZlZ4Y2NIdE9aSDFjWEhNbkxpd3RPMTE3TUN3eE1EQjlKQzkxTEZ4dUlDQXZLaXBjYmlBZ0lDb2dRSEpsWjJWNElDOWVLRDg5TG5zeExESXdmU1FwV3lzdFhUOWJNQzA1WFN0Y1hDNC9XekF0T1YwcUpDOWNiaUFnSUNvZ1FHUmxjMk55YVhCMGFXOXVJRlJvYVhNZ2NHRjBkR1Z5YmlCdFlYUmphR1Z6SUdGdWVTQnpkSEpwYm1jZ2QybDBhQ0F3TFRrZ1kyaGhjbUZqZEdWeWN5QW9iblZ0WlhKcFl5QjJZV3gxWlhNdUlHa3VaUzRnWW05MGFDQnBiblJsWjJWeWN5QmhibVFnWm14dllYUnpLU3dnWVc1a0lHMWhlU0JqYjI1MFlXbHVJR0VnSnlzbklHOXlJQ2N0SnlCemFXZHVMbHh1SUNBZ0tpQkFaWGhoYlhCc1pTQldZV3hwWkdGMGFXOXVRMjl1YzNSaGJuUnpMbkJoZEhSbGNtNXpMbUpoY25KcFpYSXVkR1Z6ZENoY0lqRXlNMXdpS1Z4dUlDQWdLaUJBWlhoaGJYQnNaU0JXWVd4cFpHRjBhVzl1UTI5dWMzUmhiblJ6TG5CaGRIUmxjbTV6TG1KaGNuSnBaWEl1ZEdWemRDaGNJakV5TXk0ME5Wd2lLVnh1SUNBZ0tpQkFaWGhoYlhCc1pTQldZV3hwWkdGMGFXOXVRMjl1YzNSaGJuUnpMbkJoZEhSbGNtNXpMbUpoY25KcFpYSXVkR1Z6ZENoY0lpMHhNak5jSWlsY2JpQWdJQ29nUUdWNFlXMXdiR1VnVm1Gc2FXUmhkR2x2YmtOdmJuTjBZVzUwY3k1d1lYUjBaWEp1Y3k1aVlYSnlhV1Z5TG5SbGMzUW9YQ0l0TVRJekxqUTFYQ0lwWEc0Z0lDQXFJRUJsZUdGdGNHeGxJRlpoYkdsa1lYUnBiMjVEYjI1emRHRnVkSE11Y0dGMGRHVnlibk11WW1GeWNtbGxjaTUwWlhOMEtGd2lLekV5TTF3aUtWeHVJQ0FnS2lCQVpYaGhiWEJzWlNCV1lXeHBaR0YwYVc5dVEyOXVjM1JoYm5SekxuQmhkSFJsY201ekxtSmhjbkpwWlhJdWRHVnpkQ2hjSWlzeE1qTXVORFZjSWlsY2JpQWdJQ292WEc0Z0lHSmhjbkpwWlhJNklDOWVLRDg5TG5zeExESXdmU1FwV3lzdFhUOWJNQzA1WFN0Y1hDNC9XekF0T1YwcUpDOHNYRzRnSUM4cUtseHVJQ0FnS2lCQWNtVm5aWGdnTDE1Y1hHUXFLRnhjTGx4Y1pDc3BQeVF2WEc0Z0lDQXFJRUJrWlhOamNtbHdkR2x2YmlCVWFHbHpJSEJoZEhSbGNtNGdiV0YwWTJobGN5QmhibmtnYzNSeWFXNW5JSFJvWVhRZ1kyOXVkR0ZwYm5NZ2IyNXNlU0J1ZFcxbGNtbGpJSFpoYkhWbGN5d2dZVzVrSUcxaGVTQmpiMjUwWVdsdUlHRWdaR1ZqYVcxaGJDQndiMmx1ZEM1Y2JpQWdJQ29nUUdWNFlXMXdiR1VnVm1Gc2FXUmhkR2x2YmtOdmJuTjBZVzUwY3k1d1lYUjBaWEp1Y3k1a1pXTnBiV0ZzTG5SbGMzUW9YQ0l4TWpOY0lpbGNiaUFnSUNvZ1FHVjRZVzF3YkdVZ1ZtRnNhV1JoZEdsdmJrTnZibk4wWVc1MGN5NXdZWFIwWlhKdWN5NWtaV05wYldGc0xuUmxjM1FvWENJeE1qTXVORFZjSWlsY2JpQWdJQ292WEc0Z0lHUmxZMmx0WVd3NklDOWVYRnhrS2loY1hDNWNYR1FyS1Q4a0x5eGNiaUFnTHlvcVhHNGdJQ0FxSUVCeVpXZGxlQ0F2WGx4Y1pDc2tMMXh1SUNBZ0tpQkFaR1Z6WTNKcGNIUnBiMjRnVkdocGN5QndZWFIwWlhKdUlHMWhkR05vWlhNZ1lXNTVJSE4wY21sdVp5QjBhR0YwSUdOdmJuUmhhVzV6SUc5dWJIa2diblZ0WlhKcFl5QjJZV3gxWlhNdVhHNGdJQ0FxSUVCbGVHRnRjR3hsSUZaaGJHbGtZWFJwYjI1RGIyNXpkR0Z1ZEhNdWNHRjBkR1Z5Ym5NdWFXNTBaV2RsY2k1MFpYTjBLRndpTVRJelhDSXBYRzRnSUNBcUlFQmxlR0Z0Y0d4bElGWmhiR2xrWVhScGIyNURiMjV6ZEdGdWRITXVjR0YwZEdWeWJuTXVhVzUwWldkbGNpNTBaWE4wS0Z3aU1USXpORFZjSWlsY2JpQWdJQ292WEc0Z0lHbHVkR1ZuWlhJNklDOWVYRnhrS3lRdkxGeHVJQ0F2S2lwY2JpQWdJQ29nUUhKbFoyVjRJQzl3V3k1Y1hITmRLMjliTGx4Y2MxMHJZbTk0TDJsY2JpQWdJQ29nUUdSbGMyTnlhWEIwYVc5dUlGUm9hWE1nY0dGMGRHVnliaUJ0WVhSamFHVnpJR0Z1ZVNCemRISnBibWNnZEdoaGRDQmpiMjUwWVdsdWN5QjBhR1VnWTJoaGNtRmpkR1Z5Y3lBbmNDNXZMbUp2ZUNjZ2IzSWdKM0FnYnlCaWIzZ25MbHh1SUNBZ0tpQkFaWGhoYlhCc1pTQldZV3hwWkdGMGFXOXVRMjl1YzNSaGJuUnpMbkJoZEhSbGNtNXpMbkJ2YzNSaGJFOW1abWxqWlVKdmVFNTFiV0psY2k1MFpYTjBLRndpVUM1UExpQkNiM2dnTVRJek5Gd2lLVnh1SUNBZ0tpQkFaWGhoYlhCc1pTQldZV3hwWkdGMGFXOXVRMjl1YzNSaGJuUnpMbkJoZEhSbGNtNXpMbkJ2YzNSaGJFOW1abWxqWlVKdmVFNTFiV0psY2k1MFpYTjBLRndpY0M1dkxpQmliM2dnTVRJek5Gd2lLVnh1SUNBZ0tpQkFaWGhoYlhCc1pTQldZV3hwWkdGMGFXOXVRMjl1YzNSaGJuUnpMbkJoZEhSbGNtNXpMbkJ2YzNSaGJFOW1abWxqWlVKdmVFNTFiV0psY2k1MFpYTjBLRndpVUNCUElFSnZlQ0F4TWpNMFhDSXBYRzRnSUNBcUlFQmxlR0Z0Y0d4bElGWmhiR2xrWVhScGIyNURiMjV6ZEdGdWRITXVjR0YwZEdWeWJuTXVjRzl6ZEdGc1QyWm1hV05sUW05NFRuVnRZbVZ5TG5SbGMzUW9YQ0p3SUc4Z1ltOTRJREV5TXpSY0lpbGNiaUFnSUNvdlhHNGdJSEJ2YzNSaGJFOW1abWxqWlVKdmVFNTFiV0psY2pvZ0wzQmJMbHhjYzEwcmIxc3VYRnh6WFN0aWIzZ3ZhU3hjYmlBZ0x5b3FYRzRnSUNBcUlFQnlaV2RsZUNBdlhsdGhMWHBCTFZvd0xUbGZMaXN0WFN0QVcyRXRla0V0V2pBdE9TNHRYU3RjWEM1YllTMTZRUzFhWFhzeUxEWXpmU1F2WEc0Z0lDQXFJRUJrWlhOamNtbHdkR2x2YmlCVWFHbHpJSEJoZEhSbGNtNGdiV0YwWTJobGN5QmhibmtnYzNSeWFXNW5JSGRwZEdnZ01pMDJNeUJqYUdGeVlXTjBaWEp6TENCaGJtUWdZMjl1ZEdGcGJuTWdZWEJzYUdGdWRXMWxjbWxqSUdOb1lYSmhZM1JsY25Nc0lHRnVJQ2RBSnlCemFXZHVMQ0JoYm1RZ2JXRjVJR0ZzYzI4Z1kyOXVkR0ZwYmlCaGJua2diMllnZEdobGMyVWdZMmhoY21GamRHVnljeUFuS3l3dExsOG5MbHh1SUNBZ0tpQkFaWGhoYlhCc1pTQldZV3hwWkdGMGFXOXVRMjl1YzNSaGJuUnpMbkJoZEhSbGNtNXpMbVZ0WVdsc0xuUmxjM1FvWENKa2IyVkFiV1Z0WlM1dFpWd2lLVnh1SUNBZ0tpQXFLaTljYmlBZ1pXMWhhV3c2SUM5ZVcyRXRla0V0V2pBdE9WOHVLeTFkSzBCYllTMTZRUzFhTUMwNUxpMWRLMXhjTGx0aExYcEJMVnBkZXpJc05qTjlKQzhzWEc0Z0lDOHFLbHh1SUNBZ0tpQkFjbVZuWlhnZ0wxNG9QejB1S2x0aExYcGRLU2cvUFM0cVhGeGtLU2cvUFM0cVcwRXRXbDBwV3lFdGZsMTdPQ3d5Tlgwa0wxeHVJQ0FnS2lCQVpHVnpZM0pwY0hScGIyNGdWR2hwY3lCd1lYUjBaWEp1SUcxaGRHTm9aWE1nWVc1NUlITjBjbWx1WnlCMGFHRjBJR052Ym5SaGFXNXpJRGd0TWpVZ1kyaGhjbUZqZEdWeWN5QjBhR0YwSUdsdVkyeDFaR1U3SUdGMElHeGxZWE4wSUc5dVpTQnNiM2RsY21OaGMyVWdiR1YwZEdWeUxDQmhkQ0JzWldGemRDQnZibVVnWkdsbmFYUXNJR0YwSUd4bFlYTjBJRzl1WlNCMWNIQmxjbU5oYzJVZ2JHVjBkR1Z5TENCaGJtUWdiMjVzZVNCd2NtbHVkR0ZpYkdVZ1FWTkRTVWtnWTJoaGNtRmpkR1Z5Y3lBb1puSnZiU0FuSVNjZ2RHOGdKMzRuS1Z4dUlDQWdLaUJBWlhoaGJYQnNaU0JXWVd4cFpHRjBhVzl1UTI5dWMzUmhiblJ6TG5CaGRIUmxjbTV6TG5CaGMzTjNiM0prTG5SbGMzUW9YQ0pRWVhOemQyOXlaREVoWENJcFhHNGdJQ0FxS2k5Y2JpQWdjR0Z6YzNkdmNtUTZJQzllS0Q4OUxpcGJZUzE2WFNrb1B6MHVLbHhjWkNrb1B6MHVLbHRCTFZwZEtWc2hMWDVkZXpnc01qVjlKQzhzWEc0Z0lDOHFLbHh1SUNBZ0tpQkFjbVZuWlhnZ0wxNG9QejB1S2x0aExYcGRLU2cvUFM0cVd6QXRPVjBwS0Q4OUxpcGJRUzFhWFNsYklDMStYWHMyTERVd2ZTUXZYRzRnSUNBcUlFQmtaWE5qY21sd2RHbHZiaUJVYUdseklIQmhkSFJsY200Z2JXRjBZMmhsY3lCaGJua2djM1J5YVc1bklIUm9ZWFFnWTI5dWRHRnBibk1nTmkwMU1DQmphR0Z5WVdOMFpYSnpJSFJvWVhRZ2FXNWpiSFZrWlRzZ1lYUWdiR1ZoYzNRZ2IyNWxJR3h2ZDJWeVkyRnpaU0JzWlhSMFpYSXNJR0YwSUd4bFlYTjBJRzl1WlNCa2FXZHBkQ3dnWVhRZ2JHVmhjM1FnYjI1bElIVndjR1Z5WTJGelpTQnNaWFIwWlhJc0lHRnVaQ0J2Ym14NUlIQnlhVzUwWVdKc1pTQkJVME5KU1NCamFHRnlZV04wWlhKeklDaG1jbTl0SUNjaEp5QjBieUFuZmljcFhHNGdJQ0FxSUVCbGVHRnRjR3hsSUZaaGJHbGtZWFJwYjI1RGIyNXpkR0Z1ZEhNdWNHRjBkR1Z5Ym5NdVlXWm1hV3hzYVdGMFpWQmhjM04zYjNKa0xuUmxjM1FvWENKUVlYTnpkMjl5WkRGY0lpbGNiaUFnSUNvcUwxeHVJQ0JoWm1acGJHeHBZWFJsVUdGemMzZHZjbVE2SUM5ZUtEODlMaXBiWVMxNlhTa29QejB1S2xzd0xUbGRLU2cvUFM0cVcwRXRXbDBwV3lBdGZsMTdOaXcxTUgwa0x5eGNiaUFnTHlvcVhHNGdJQ0FxSUVCeVpXZGxlQ0F2WGx0aExYcEJMVm93TFRsZkxpc3RYU3RBVzJFdGVrRXRXakF0T1M0dFhTdGNYQzViWVMxNlFTMWFYWHN4TERJMU5YMGtMMXh1SUNBZ0tpQkFaR1Z6WTNKcGNIUnBiMjRnVkdocGN5QndZWFIwWlhKdUlHMWhkR05vWlhNZ1lXNTVJSE4wY21sdVp5QjNhWFJvSURFdE1qVTFJR05vWVhKaFkzUmxjbk1zSUdGdVpDQmpiMjUwWVdsdWN5QmhjR3hvWVc1MWJXVnlhV01nWTJoaGNtRmpkR1Z5Y3l3Z1lXNGdKMEFuSUhOcFoyNHNJR0Z1WkNCdFlYa2dZV3h6YnlCamIyNTBZV2x1SUdGdWVTQnZaaUIwYUdWelpTQmphR0Z5WVdOMFpYSnpJQ2NyTEMwdVh5Y3VYRzRnSUNBcUlFQmxlR0Z0Y0d4bElGWmhiR2xrWVhScGIyNURiMjV6ZEdGdWRITXVjR0YwZEdWeWJuTXVjR0Y1YldWdWRFRm5aVzUwUlcxaGFXd3VkR1Z6ZENoY0ltUnZaVUJ0WlcxbExuVnpYQ0lwWEc0Z0lDQXFLaTljYmlBZ2NHRjViV1Z1ZEVGblpXNTBSVzFoYVd3NklDOWVXMkV0ZWtFdFdqQXRPVjh1S3kxZEswQmJZUzE2UVMxYU1DMDVMaTFkSzF4Y0xsdGhMWHBCTFZwZGV6RXNNalUxZlNRdkxGeHVJQ0F2S2lwY2JpQWdJQ29nUUhKbFoyVjRJQzllS0Z0QkxWcGhMWG93TFRsZFcwRXRXbUV0ZWpBdE9WeGNjeTFkZXpBc01qQjlLVDhrTDF4dUlDQWdLaUJBWkdWelkzSnBjSFJwYjI0Z1ZHaHBjeUJ3WVhSMFpYSnVJRzFoZEdOb1pYTWdZVzU1SUhOMGNtbHVaeUIzYVhSb0lHNXZJRzF2Y21VZ2RHaGhiaUF5TUNCamFHRnlZV04wWlhKeklHRnVaQ0J0WVhrZ2JtOTBJR052Ym5SaGFXNGdKeXNuTGx4dUlDQWdLaUJBWlhoaGJYQnNaU0JXWVd4cFpHRjBhVzl1UTI5dWMzUmhiblJ6TG5CaGRIUmxjbTV6TG5CdmMzUmhiRU52WkdVdWRHVnpkQ2hjSWpFeU0xd2lLVnh1SUNBZ0tpQkFaWGhoYlhCc1pTQldZV3hwWkdGMGFXOXVRMjl1YzNSaGJuUnpMbkJoZEhSbGNtNXpMbkJ2YzNSaGJFTnZaR1V1ZEdWemRDaGNJakV5TXkwME5UWmNJaWxjYmlBZ0lDb3FMMXh1SUNCd2IzTjBZV3hEYjJSbE9pQXZYaWhiUVMxYVlTMTZNQzA1WFZ0QkxWcGhMWG93TFRsY1hITXRYWHN3TERJd2ZTay9KQzhzWEc0Z0lDOHFLbHh1SUNBZ0tpQkFjbVZuWlhnZ0wxNG9QeUZlSkh4Y1hITXJLVnRCTFZwaExYb3dMVGt1WEZ3dlhGeHpMVjE3TUN3eU5YMGtMMXh1SUNBZ0tpQkFaR1Z6WTNKcGNIUnBiMjRnVkdocGN5QndZWFIwWlhKdUlHMWhkR05vWlhNZ1lXNTVJSE4wY21sdVp5QjNhWFJvSURBdE1qVWdZMmhoY21GamRHVnljeXdnWVc1a0lHMWhlU0JqYjI1MFlXbHVJR0ZzY0doaGJuVnRaWEpwWXlCamFHRnlZV04wWlhKeklDaGliM1JvSUhWd2NHVnlZMkZ6WlNCaGJtUWdiRzkzWlhKallYTmxLU3dnWVc1a0lHRnVlU0J2WmlCMGFHVnpaU0JqYUdGeVlXTjBaWEp6Snk0dkxTY3NJR0Z1WkNCdmNpQnpZWEJqWlNCamFHRnlZV04wWlhKelhHNGdJQ0FxSUVCbGVHRnRjR3hsSUZaaGJHbGtZWFJwYjI1RGIyNXpkR0Z1ZEhNdWNHRjBkR1Z5Ym5NdWRHRjRTV1JsYm5ScFptbGpZWFJwYjI1T2RXMWlaWEl1ZEdWemRDaGNJakV5TTF3aUtWeHVJQ0FnS2lvdlhHNGdJSFJoZUVsa1pXNTBhV1pwWTJGMGFXOXVUblZ0WW1WeU9pQXZYaWcvSVY0a2ZGeGNjeXNwVzBFdFdtRXRlakF0T1M1Y1hDOWNYSE10WFhzd0xESTFmU1F2TEZ4dUlDQXZLaXBjYmlBZ0lDb2dRSEpsWjJWNElDOWVYRndyS0NndGZGeGNjeWtxV3pBdE9WMHBlemtzTWpCOUpDOWNiaUFnSUNvZ1FHUmxjMk55YVhCMGFXOXVJRlJvYVhNZ2NHRjBkR1Z5YmlCdFlYUmphR1Z6SUdGdWVTQnpkSEpwYm1jZ2RHaGhkQ0J6ZEdGeWRITWdkMmwwYUNCaElDY3JKeUJqYUdGeVlXTjBaWElzSUdadmJHeHZkMlZrSUdKNUlEa3RNakFnWkdsbmFYUnpMQ0JoYkd4dmQybHVaeUJvZVhCb1pXNXpJRzl5SUhOd1lXTmxjeTVjYmlBZ0lDb2dRR1Y0WVcxd2JHVWdWbUZzYVdSaGRHbHZia052Ym5OMFlXNTBjeTV3WVhSMFpYSnVjeTV3YUc5dVpVNTFiV0psY2k1MFpYTjBLRndpS3pFeU16UTFOamM0T1RCY0lpbGNiaUFnSUNvcUwxeHVJQ0J3YUc5dVpVNTFiV0psY2pvZ0wxNWNYQ3NvS0MxOFhGeHpLU3BiTUMwNVhTbDdPU3d5TUgwa0x5eGNiaUFnTHlvcVhHNGdJQ0FxSUVCeVpXZGxlQ0F2S0dsdFlXZGxmR0Z3Y0d4cFkyRjBhVzl1S1Z4Y0x5aHFjR1UvWjN4d1pHWjhjRzVuS1NRdlhHNGdJQ0FxSUVCa1pYTmpjbWx3ZEdsdmJpQlVhR2x6SUhCaGRIUmxjbTRnYldGMFkyaGxjeUJoYm5rZ2IyWWdkR2hsSUdacGJHVWdkSGx3WlhNZ2FuQmxaeXdnYW5CbkxDQndaR1lzSUc5eUlIQnVaeTVjYmlBZ0lDb2dRR1Y0WVcxd2JHVWdWbUZzYVdSaGRHbHZia052Ym5OMFlXNTBjeTV3WVhSMFpYSnVjeTVtYVd4bFZIbHdaUzUwWlhOMEtGd2lhVzFoWjJVdmFuQmxaMXdpS1Z4dUlDQWdLaUJBWlhoaGJYQnNaU0JXWVd4cFpHRjBhVzl1UTI5dWMzUmhiblJ6TG5CaGRIUmxjbTV6TG1acGJHVlVlWEJsTG5SbGMzUW9YQ0poY0hCc2FXTmhkR2x2Ymk5d1pHWmNJaWxjYmlBZ0lDb2dRR1Y0WVcxd2JHVWdWbUZzYVdSaGRHbHZia052Ym5OMFlXNTBjeTV3WVhSMFpYSnVjeTVtYVd4bFZIbHdaUzUwWlhOMEtGd2lhVzFoWjJVdmNHNW5YQ0lwWEc0Z0lDQXFJRUJsZUdGdGNHeGxJRlpoYkdsa1lYUnBiMjVEYjI1emRHRnVkSE11Y0dGMGRHVnlibk11Wm1sc1pWUjVjR1V1ZEdWemRDaGNJbWx0WVdkbEwycHdaMXdpS1Z4dUlDQWdLaW92WEc0Z0lHWnBiR1ZVZVhCbE9pQXZLR2x0WVdkbGZHRndjR3hwWTJGMGFXOXVLVnhjTHlocWNHVS9aM3h3WkdaOGNHNW5LU1F2TEZ4dUlDQXZLaXBjYmlBZ0lDb2dRSEpsWjJWNElDOG9YbHhjWkhzMGZTbGNYSE1vWEZ4a2V6SjlXSHN5ZlNsY1hITW9XSHMwZlNsY1hITW9YRnhrZXpSOUpDa3ZYRzRnSUNBcUlFQmtaWE5qY21sd2RHbHZiaUJVYUdseklIQmhkSFJsY200Z2JXRjBZMmhsY3lCaGJua2djM1J5YVc1bklIUm9ZWFFuY3lCbWIzSnRZWFIwWldRZ2FXNGdkR2hsSUdadmJHeHZkMmx1WnlCbWIzSnRZWFE2SURFeU16UWdOVFpZV0NCWVdGaFlJREV4TWpFdVhHNGdJQ0FxSUVCbGVHRnRjR3hsSUZaaGJHbGtZWFJwYjI1RGIyNXpkR0Z1ZEhNdWNHRjBkR1Z5Ym5NdVptOXliV0YwZEdWa1EyRnlaRTUxYldKbGNpNTBaWE4wS0Z3aU1USXpOQ0ExTmxoWUlGaFlXRmdnTVRFeU1Wd2lLVnh1SUNBZ0tpb3ZYRzRnSUdadmNtMWhkSFJsWkVOaGNtUk9kVzFpWlhJNklDOG9YbHhjWkhzMGZTbGNYSE1vWEZ4a2V6SjlXSHN5ZlNsY1hITW9XSHMwZlNsY1hITW9YRnhrZXpSOUpDa3ZMRnh1SUNBdktpcGNiaUFnSUNvZ1FISmxaMlY0SUM5YlhseGNaRmhjWEhOZEwxeHVJQ0FnS2lCQVpHVnpZM0pwY0hScGIyNGdWR2hsSUdseklIQmhkSFJsY200Z2JXRjBZMmhsY3lCaGJua2djM1J5YVc1bklIUm9ZWFFnWTI5dWRHRnBibk1nWTJoaGNtRmpkR1Z5Y3lCMGFHRjBJR0Z5Wlc0bmRDQmthV2RwZEhNc0lIUm9aU0IxY0hCbGNtTmhjMlVnYkdWMGRHVnlJQ2RZSnlCaGJtUWdjM0JoWTJWekxseHVJQ0FnS2lCQVpYaGhiWEJzWlNCV1lXeHBaR0YwYVc5dVEyOXVjM1JoYm5SekxuQmhkSFJsY201ekxtbHVkbUZzYVdSR2IzSnRZWFIwWldSRFlYSmtUblZ0WW1WeVEyaGhjbUZqZEdWeWN5NTBaWE4wS0Z3aU9UZzNOaTAxTkRNeUxURXdPVGhjSWlsY2JpQWdJQ29nUUdWNFlXMXdiR1VnVm1Gc2FXUmhkR2x2YmtOdmJuTjBZVzUwY3k1d1lYUjBaWEp1Y3k1cGJuWmhiR2xrUm05eWJXRjBkR1ZrUTJGeVpFNTFiV0psY2tOb1lYSmhZM1JsY25NdWRHVnpkQ2hjSWprNE56WWdOVFF6TWlBeE1EazRYQ0lwWEc0Z0lDQXFLaTljYmlBZ2FXNTJZV3hwWkVadmNtMWhkSFJsWkVOaGNtUk9kVzFpWlhKRGFHRnlZV04wWlhKek9pQXZXMTVjWEdSWVhGeHpYUzhzWEc0Z0lDOHFLbHh1SUNBZ0tpQkFjbVZuWlhnZ0wxNG9QejB1S2x0aExYcGRLU2cvUFM0cVd6QXRPVjBwS0Q4OUxpcGJRUzFhWFNrb1B6MHVLbHNoUUNNa0pWNG1LaWdwSzF4Y0xUMWNYRnRjWEYxN2ZUc25PbHhjWENKOExGeGNMancrWEZ3L1gzNWRLVnNnTFg1ZGV6Z3NNVFo5SkM5Y2JpQWdJQ29nUUdSbGMyTnlhWEIwYVc5dUlGUm9hWE1nY0dGMGRHVnliaUJ0WVhSamFHVnpJR0Z1ZVNCemRISnBibWNnZEdoaGRDQmpiMjUwWVdsdWN5QTRMVEUySUdOb1lYSmhZM1JsY25NZ2RHaGhkQ0JwYm1Oc2RXUmxPeUJoZENCc1pXRnpkQ0J2Ym1VZ2JHOTNaWEpqWVhObElHeGxkSFJsY2l3Z1lYUWdiR1ZoYzNRZ2IyNWxJR1JwWjJsMExDQmhkQ0JzWldGemRDQnZibVVnZFhCd1pYSmpZWE5sSUd4bGRIUmxjaXdnWVc1a0lHOXViSGtnY0hKcGJuUmhZbXhsSUVGVFEwbEpJR05vWVhKaFkzUmxjbk1nS0daeWIyMGdKeUVuSUhSdklDZCtKeWxjYmlBZ0lDb2dRR1Y0WVcxd2JHVWdWbUZzYVdSaGRHbHZia052Ym5OMFlXNTBjeTV3WVhSMFpYSnVjeTUwY21Ga2FXNW5VR3hoZEdadmNtMUpiblpsYzNSdmNsQmhjM04zYjNKa0xuUmxjM1FvWENKUVlYTnpkMjl5WkRFaEpGd2lLVnh1SUNBZ0tpb3ZYRzRnSUhSeVlXUnBibWRRYkdGMFptOXliVWx1ZG1WemRHOXlVR0Z6YzNkdmNtUTZJQzllS0Q4OUxpcGJZUzE2WFNrb1B6MHVLbHN3TFRsZEtTZy9QUzRxVzBFdFdsMHBLRDg5TGlwYklVQWpKQ1ZlSmlvb0tTdGNYQzA5WEZ4YlhGeGRlMzA3SnpwY1hGd2lmQ3hjWEM0OFBseGNQMTkrWFNsYklDMStYWHM0TERFMmZTUXZMRnh1SUNBdktpcGNiaUFnSUNvZ1FISmxaMlY0SUM5ZVcwRXRXbUV0ZWwwcktGdGhMWHBCTFZvdUp5QXRYU2txVzJFdGVrRXRXaTRuSUMxZEt5UXZYRzRnSUNBcUlFQmtaWE5qY21sd2RHbHZiaUJVYUdseklIQmhkSFJsY200Z2JXRjBZMmhsY3lCaGJua2djM1J5YVc1bklIUm9ZWFFnYzNSaGNuUnpJSGRwZEdnZ2IyNWxJRzl5SUcxdmNtVWdiR1YwZEdWeWN5QW9kWEJ3WlhKallYTmxJRzl5SUd4dmQyVnlZMkZ6WlNrc0lHWnZiR3h2ZDJWa0lHSjVJSHBsY204Z2IzSWdiVzl5WlNCdlkyTjFjbkpsYm1ObGN5QnZaaUJzWlhSMFpYSnpMQ0JoYm1RZ1lXNTVJRzltSUhSb1pYTmxJR05vWVhKaFkzUmxjbk1nS0M0bklDMHBJR0Z1WkNCbGJtUnpJSGRwZEdnZ2IyNWxJRzl5SUcxdmNtVWdiMk5qZFhKeVpXNWpaWE1nYjJZZ2JHVjBkR1Z5Y3l3Z1lXNWtJR0Z1ZVNCdlppQjBhR1Z6WlNCamFHRnlZV04wWlhKeklDZ3VKeUF0S1M1Y2JpQWdJQ29nUUdWNFlXMXdiR1VnVm1Gc2FXUmhkR2x2YmtOdmJuTjBZVzUwY3k1d1lYUjBaWEp1Y3k1c1pYUjBaWEpUZVcxaWIyeHpMblJsYzNRb1hDSktiMmh1SUVSdlpWd2lLVnh1SUNBZ0tpQkFaWGhoYlhCc1pTQldZV3hwWkdGMGFXOXVRMjl1YzNSaGJuUnpMbkJoZEhSbGNtNXpMbXhsZEhSbGNsTjViV0p2YkhNdWRHVnpkQ2hjSWtwdmFHNHRSRzlsWENJcFhHNGdJQ0FxSUVCbGVHRnRjR3hsSUZaaGJHbGtZWFJwYjI1RGIyNXpkR0Z1ZEhNdWNHRjBkR1Z5Ym5NdWJHVjBkR1Z5VTNsdFltOXNjeTUwWlhOMEtGd2lTbTlvYmlCUEowUnZaVndpS1Z4dUlDQWdLaTljYmlBZ2JHVjBkR1Z5VTNsdFltOXNjem9nTDE1YlFTMWFZUzE2WFNzb1cyRXRla0V0V2k0bklDMWRLU3BiWVMxNlFTMWFMaWNnTFYwckpDOHNYRzRnSUM4cUtseHVJQ0FnS2lCQWNtVm5aWGdnTDE0b1B5RXVLbHhjYzNzeUxIMHBLRDhoWEZ4ektWdGNYSEI3VEgxY1hITW5MaTFkZXpFc05UQjlKQzkxWEc0Z0lDQXFJRUJrWlhOamNtbHdkR2x2YmlCVWFHbHpJSEJoZEhSbGNtNGdiV0YwWTJobGN5QmhibmtnYzNSeWFXNW5JSFJvWVhRZ1kyOXVkR0ZwYm5NZ01TQjBieUExTUNCamFHRnlZV04wWlhKekxDQnpkR0Z5ZEhNZ1lXNWtJR1Z1WkhNZ2QybDBhQ0IyWVd4cFpDQmphR0Z5WVdOMFpYSnpJQ2hzWlhSMFpYSnpMQ0IzYUdsMFpYTndZV05sTENCd1pYSnBiMlFzSUhOcGJtZHNaU0J4ZFc5MFpTd2diM0lnYUhsd2FHVnVLUzVjYmlBZ0lDb2dRR1Y0WVcxd2JHVWdWbUZzYVdSaGRHbHZia052Ym5OMFlXNTBjeTV3WVhSMFpYSnVjeTV1WVcxbExuUmxjM1FvWENKS2IyaHVJRVJ2WlZ3aUtWeHVJQ0FnS2lCQVpYaGhiWEJzWlNCV1lXeHBaR0YwYVc5dVEyOXVjM1JoYm5SekxuQmhkSFJsY201ekxtNWhiV1V1ZEdWemRDaGNJa3B2YUc0dFJHOWxYQ0lwWEc0Z0lDQXFJRUJsZUdGdGNHeGxJRlpoYkdsa1lYUnBiMjVEYjI1emRHRnVkSE11Y0dGMGRHVnlibk11Ym1GdFpTNTBaWE4wS0Z3aVNtOW9iaUJQSjBSdlpWd2lLVnh1SUNBZ0tpQkFaWGhoYlhCc1pTQldZV3hwWkdGMGFXOXVRMjl1YzNSaGJuUnpMbkJoZEhSbGNtNXpMbTVoYldVdWRHVnpkQ2hjSWtwdmFHNGdUeTRnUkc5bFhDSXBYRzRnSUNBcUwxeHVJQ0J1WVcxbE9pQXZYaWcvSVM0cVhGeHpleklzZlNrb1B5RmNYSE1wVzF4Y2NIdE1mVnhjY3ljdUxWMTdNU3cxTUgwa0wzVXNYRzRnSUM4cUtseHVJQ0FnS2lCQWNtVm5aWGdnTDF0Z2ZpRkFJeVFsWGlZcUtTaGZQU3RiZlh0Y1hGMWNYRnhjTDF3aU96by9Qang4WFNzdlhHNGdJQ0FxSUVCa1pYTmpjbWx3ZEdsdmJpQlVhR2x6SUhCaGRIUmxjbTRnYldGMFkyaGxjeUJoYm5rZ2MzUnlhVzVuSUhSb1lYUWdZMjl1ZEdGcGJuTWdZVzU1SUc5bUlIUm9aWE5sSUdOb1lYSmhZM1JsY25NNklHQitJVUFqSkNWZUppb3BLRjg5SzF0OWUxeGNYVnhjWEZ3dlhDSTdPajgrUEh4Y2JpQWdJQ29nUUdWNFlXMXdiR1VnVm1Gc2FXUmhkR2x2YmtOdmJuTjBZVzUwY3k1d1lYUjBaWEp1Y3k1blpXNWxjbUZzTG5SbGMzUW9YQ0pRWVhOemQyOXlaREVoWENJcFhHNGdJQ0FxTDF4dUlDQm5aVzVsY21Gc09pQXZXMkIrSVVBakpDVmVKaW9wS0Y4OUsxdDllMXhjWFZ4Y1hGd3ZYQ0k3T2o4K1BIeGRLeThzWEc0Z0lDOHFLbHh1SUNBZ0tpQkFjbVZuWlhnZ0wxdGhMWHBkTDF4dUlDQWdLaUJBWkdWelkzSnBjSFJwYjI0Z1ZHaHBjeUJ3WVhSMFpYSnVJRzFoZEdOb1pYTWdZVzU1SUhOMGNtbHVaeUIwYUdGMElHTnZiblJoYVc1eklHeHZkMlZ5WTJGelpTQnNaWFIwWlhKekxseHVJQ0FnS2lCQVpYaGhiWEJzWlNCV1lXeHBaR0YwYVc5dVEyOXVjM1JoYm5SekxuQmhkSFJsY201ekxteHZkMlZ5WTJGelpTNTBaWE4wS0Z3aVlXSmpYQ0lwWEc0Z0lDQXFMMXh1SUNCc2IzZGxjbU5oYzJVNklDOWJZUzE2WFM4c1hHNGdJQzhxS2x4dUlDQWdLaUJBY21WblpYZ2dMMXhjWkM5Y2JpQWdJQ29nUUdSbGMyTnlhWEIwYVc5dUlGUm9hWE1nY0dGMGRHVnliaUJ0WVhSamFHVnpJR0Z1ZVNCemRISnBibWNnZEdoaGRDQmpiMjUwWVdsdWN5QmthV2RwZEhNdVhHNGdJQ0FxSUVCbGVHRnRjR3hsSUZaaGJHbGtZWFJwYjI1RGIyNXpkR0Z1ZEhNdWNHRjBkR1Z5Ym5NdWJuVnRZbVZ5TG5SbGMzUW9YQ0p3WlhSek1USXpYQ0lwWEc0Z0lDQXFMMXh1SUNCdWRXMWlaWEk2SUM5Y1hHUXZMRnh1SUNBdktpcGNiaUFnSUNvZ1FISmxaMlY0SUM5Y1hGY3ZYRzRnSUNBcUlFQmtaWE5qY21sd2RHbHZiaUJVYUdseklIQmhkSFJsY200Z2JXRjBZMmhsY3lCaGJua2djM1J5YVc1bklIUm9ZWFFnWTI5dWRHRnBibk1nYzNCbFkybGhiQ0JqYUdGeVlXTjBaWEp6TGx4dUlDQWdLaUJBWlhoaGJYQnNaU0JXWVd4cFpHRjBhVzl1UTI5dWMzUmhiblJ6TG5CaGRIUmxjbTV6TG5Od1pXTnBZV3hEYUdGeVlXTjBaWEl1ZEdWemRDaGNJbEJoYzNOM2IzSmtNU0ZjSWlsY2JpQWdJQ292WEc0Z0lITndaV05wWVd4RGFHRnlZV04wWlhJNklDOWNYRmN2TEZ4dUlDQXZLaXBjYmlBZ0lDb2dRSEpsWjJWNElDOWJRUzFhWFM5Y2JpQWdJQ29nUUdSbGMyTnlhWEIwYVc5dUlGUm9hWE1nY0dGMGRHVnliaUJ0WVhSamFHVnpJR0Z1ZVNCemRISnBibWNnZEdoaGRDQmpiMjUwWVdsdWN5QjFjSEJsY21OaGMyVWdiR1YwZEdWeWN5NWNiaUFnSUNvZ1FHVjRZVzF3YkdVZ1ZtRnNhV1JoZEdsdmJrTnZibk4wWVc1MGN5NXdZWFIwWlhKdWN5NTFjSEJsY21OaGMyVXVkR1Z6ZENoY0lrRkNRMXdpS1Z4dUlDQWdLaTljYmlBZ2RYQndaWEpqWVhObE9pQXZXMEV0V2wwdkxGeHVJQ0F2S2lwY2JpQWdJQ29nUUhKbFoyVjRJQzllTG5zNExERTJmU1F2WEc0Z0lDQXFJRUJrWlhOamNtbHdkR2x2YmlCVWFHbHpJSEJoZEhSbGNtNGdiV0YwWTJobGN5QmhibmtnYzNSeWFXNW5JSFJvWVhRZ1kyOXVkR0ZwYm5NZ09DMHhOaUJqYUdGeVlXTjBaWEp6TGx4dUlDQWdLaUJBWlhoaGJYQnNaU0JXWVd4cFpHRjBhVzl1UTI5dWMzUmhiblJ6TG5CaGRIUmxjbTV6TG1KbGRIZGxaVzQ0WVc1a01UWkRhR0Z5WVdOMFpYSnpMblJsYzNRb1hDSlFZWE56ZDI5eVpERWhYQ0lwWEc0Z0lDQXFMMXh1SUNCaVpYUjNaV1Z1T0dGdVpERTJRMmhoY21GamRHVnljem9nTDE0dWV6Z3NNVFo5SkM4c1hHNGdJQzhxS2x4dUlDQWdLaUJBY21WblpYZ2dMMTR1ZXpnc01qVjlKQzljYmlBZ0lDb2dRR1JsYzJOeWFYQjBhVzl1SUZSb2FYTWdjR0YwZEdWeWJpQnRZWFJqYUdWeklHRnVlU0J6ZEhKcGJtY2dkR2hoZENCamIyNTBZV2x1Y3lBNExUSTFJR05vWVhKaFkzUmxjbk11WEc0Z0lDQXFJRUJsZUdGdGNHeGxJRlpoYkdsa1lYUnBiMjVEYjI1emRHRnVkSE11Y0dGMGRHVnlibk11WW1WMGQyVmxiamhoYm1ReU5VTm9ZWEpoWTNSbGNuTXVkR1Z6ZENoY0lsQmhjM04zYjNKa01TRmNJaWxjYmlBZ0lDb3ZYRzRnSUdKbGRIZGxaVzQ0WVc1a01qVkRhR0Z5WVdOMFpYSnpPaUF2WGk1N09Dd3lOWDBrTDF4dWZTd2dTbVVnUFNBdktpQkFYMTlRVlZKRlgxOGdLaThnVDJKcVpXTjBMbVp5WldWNlpTZ3ZLaUJBWDE5UVZWSkZYMThnS2k4Z1QySnFaV04wTG1SbFptbHVaVkJ5YjNCbGNuUjVLSHRjYmlBZ1gxOXdjbTkwYjE5Zk9pQnVkV3hzTEZ4dUlDQnRaWE56WVdkbGMwaHBiblJ6T2lCbVpTeGNiaUFnY0dGMGRHVnlibk02SUVGbFhHNTlMQ0JUZVcxaWIyd3VkRzlUZEhKcGJtZFVZV2NzSUhzZ2RtRnNkV1U2SUZ3aVRXOWtkV3hsWENJZ2ZTa3BMQ0JGSUQwZ2UxeHVJQ0JpY21GdVpFNWhiV1U2SUZ3aVJHVnlhWFpjSWl4Y2JpQWdaRzl0WVdsdVRtRnRaVG9nWENKRVpYSnBkaTVqYjIxY0lseHVmU3dnUWlBOUlIdGNiaUFnWm5nNklGd2lSR1Z5YVhZZ0tFWllLU0JNZEdSY0lpeGNiaUFnYldGc2RHRnBiblpsYzNRNklGd2lSR1Z5YVhZZ1NXNTJaWE4wYldWdWRITWdLRVYxY205d1pTa2dUR2x0YVhSbFpGd2lMRnh1SUNCemRtYzZJRndpUkdWeWFYWWdLRk5XUnlrZ1RFeERYQ0lzWEc0Z0lIWTZJRndpUkdWeWFYWWdLRllwSUV4MFpGd2lYRzU5TENCcUlEMGdlMXh1SUNCMGNtRmtaWEk2SUZ3aVJHVnlhWFlnVkhKaFpHVnlYQ0lzWEc0Z0lHUkNiM1E2SUZ3aVJHVnlhWFlnUW05MFhDSXNYRzRnSUcxME5Ub2dYQ0pFWlhKcGRpQk5WRFZjSWl4Y2JpQWdZMVJ5WVdSbGNqb2dYQ0pFWlhKcGRpQmpWSEpoWkdWeVhDSXNYRzRnSUdSbGNtbDJXRG9nWENKRVpYSnBkaUJZWENJc1hHNGdJSE50WVhKMFZISmhaR1Z5T2lCY0lsTnRZWEowVkhKaFpHVnlYQ0lzWEc0Z0lHSkNiM1E2SUZ3aVFtbHVZWEo1SUVKdmRGd2lMRnh1SUNCbmJ6b2dYQ0pFWlhKcGRpQkhUMXdpWEc1OUxDQnJaU0E5SUM4cUlFQmZYMUJWVWtWZlh5QXFMeUJQWW1wbFkzUXVabkpsWlhwbEtDOHFJRUJmWDFCVlVrVmZYeUFxTHlCUFltcGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRIa29lMXh1SUNCZlgzQnliM1J2WDE4NklHNTFiR3dzWEc0Z0lHSnlZVzVrUTI5dVptbG5PaUJGTEZ4dUlDQnNZVzVrYVc1blEyOXRjR0Z1YVdWek9pQkNMRnh1SUNCd2JHRjBabTl5YlhNNklHcGNibjBzSUZONWJXSnZiQzUwYjFOMGNtbHVaMVJoWnl3Z2V5QjJZV3gxWlRvZ1hDSk5iMlIxYkdWY0lpQjlLU2tzSUVZZ1BTQXZLRUZNVUMxOFFVMU9MWHhCVGtFdGZFRk9SUzE4UVU1SExYeEJVVTB0ZkVGU1V5MThRVkpVTFh4QlZGVXRmRUpCUXkxOFFreEJMWHhDVWxFdGZFTkJSeTE4UTBGTkxYeERRVTR0ZkVOQldpMThRMFJNTFh4RFJGa3RmRU5NVkMxOFExSlBMWHhEVlU0dGZFUkpSeTE4UkZKQkxYeEVWVUV0ZkVSVlFpMThSRlpETFh4RlRFVXRmRVZNVXkxOFJVMU1MWHhGVmtFdGZFVldVaTE4UmtsSExYeEdURUV0ZkVaU1RDMThSMHhMTFh4SVRVRXRmRWhYTFh4SVYwa3RmRWxPUlMxOFNrRlVMWHhLUlVZdGZFcEZVaTE4U2t0TkxYeEtUbGt0ZkVwVFF5MThURVJPTFh4TVNVOHRmRXhQVGkxOFRGVkJMWHhNV1VFdGZFeFpUeTE4VFVGU0xYeE5SVVF0ZkUxSVFTMThUVXhCTFh4TlVrUXRmRTFaUVMxOFRrTkZMWHhPUlU4dGZFNVBTQzE4VGs5UUxYeFBRMFV0ZkZCQlVpMThVRWxETFh4UVQxUXRmRkJRUVMxOFVGSkJMWHhTVGtVdGZGTkZRUzE4VTB4QkxYeFRUa1V0ZkZOUVRpMThVMVJMTFh4VVFVZ3RmRlJCVXkxOFZFVlVMWHhVVWxRdGZGWkRSUzE4VmtsRkxYeFdTMWt0ZkZaT1V5MThWazlITFh4V1ZGSXRmRmRCVXkxOFYwdEhMWHhYVEZvdGZFcEJSQzE4VFV4RUxYeFNWRVV0ZkU1QlRTMThUa1ZPTFh4Q1FVd3RmRXBNVGkxOFdVRk1MWHhOUjBFdGZFWkhSQzE4V0ZsQlR5MThRazlPTFh4QlRFNHRmRUZNVkMxOFFsSkJMWHhFUWxreUxYeFRWRWN0ZkUxQlR5MThURVZOTFh4SFQwRXRmRVpQUVMxOFRVNUJMWHhNVGtFdEtTOHNJRmhsSUQwZ0x5b2dRRjlmVUZWU1JWOWZJQ292SUU5aWFtVmpkQzVtY21WbGVtVW9MeW9nUUY5ZlVGVlNSVjlmSUNvdklFOWlhbVZqZEM1a1pXWnBibVZRY205d1pYSjBlU2g3WEc0Z0lGOWZjSEp2ZEc5Zlh6b2diblZzYkN4Y2JpQWdhSFZoZDJWcFJHVjJhV05sYzFKbFoyVjRPaUJHWEc1OUxDQlRlVzFpYjJ3dWRHOVRkSEpwYm1kVVlXY3NJSHNnZG1Gc2RXVTZJRndpVFc5a2RXeGxYQ0lnZlNrcExDQkVaU0E5SUNobExDQjBLU0E5UGlCN1hHNGdJSFJ5ZVNCN1hHNGdJQ0FnWTI5dWMzUWdleUJzYjJOaGJHVTZJSElnUFNCY0ltVnVMVlZUWENJc0lHTjFjbkpsYm1ONU9pQnVMQ0JrWldOcGJXRnNVR3hoWTJWek9pQnZJSDBnUFNCMElIeDhJSHQ5TENCcElEMGdURnR1SUQ4L0lGd2lWVk5FWENKZExDQmhJRDBnYnlCOGZDQnBPMXh1SUNBZ0lISmxkSFZ5YmlCdVpYY2dTVzUwYkM1T2RXMWlaWEpHYjNKdFlYUW9jaXdnZTF4dUlDQWdJQ0FnYldsdWFXMTFiVVp5WVdOMGFXOXVSR2xuYVhSek9pQmhMRnh1SUNBZ0lDQWdiV0Y0YVcxMWJVWnlZV04wYVc5dVJHbG5hWFJ6T2lCaFhHNGdJQ0FnZlNrdVptOXliV0YwS0dVcE8xeHVJQ0I5SUdOaGRHTm9JSHRjYmlBZ0lDQnlaWFIxY200Z1pTNTBiMU4wY21sdVp5Z3BPMXh1SUNCOVhHNTlMQ0JvWlNBOUlDaGxMQ0IwS1NBOVBpQjdYRzRnSUd4bGRDQnlPMXh1SUNCamIyNXpkQ0I3WEc0Z0lDQWdaR0YwWlU5d2RHbHZibk02SUc0Z1BTQjdJR1JoZVRvZ1hDSXlMV1JwWjJsMFhDSXNJRzF2Ym5Sb09pQmNJakl0WkdsbmFYUmNJaXdnZVdWaGNqb2dYQ0p1ZFcxbGNtbGpYQ0lnZlN4Y2JpQWdJQ0JtYjNKdFlYUTZJRzhnUFNCY0lsbFpXVmt0VFUwdFJFUmNJaXhjYmlBZ0lDQjFibWw0T2lCcElEMGdJVEZjYmlBZ2ZTQTlJSFFnZkh3Z2UzMHNJR0VnUFNCN0lDNHVMbTRnZlR0Y2JpQWdhV1lnS0hSNWNHVnZaaUJsSUQwOUlGd2liblZ0WW1WeVhDSWdKaVlnYVNsY2JpQWdJQ0J5SUQwZ2JtVjNJRVJoZEdVb1pTQXFJREZsTXlrN1hHNGdJR1ZzYzJVZ2FXWWdLSFI1Y0dWdlppQmxJRDA5SUZ3aWMzUnlhVzVuWENJZ2ZId2daU0JwYm5OMFlXNWpaVzltSUVSaGRHVXBJSHRjYmlBZ0lDQnBaaUFvY2lBOUlHNWxkeUJFWVhSbEtHVXBMQ0JwYzA1aFRpaHlMbWRsZEZScGJXVW9LU2twWEc0Z0lDQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9YQ0pKYm5aaGJHbGtJR1JoZEdVZ2FXNXdkWFJjSWlrN1hHNGdJSDBnWld4elpWeHVJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWhjSWtsdWRtRnNhV1FnWkdGMFpTQnBibkIxZEZ3aUtUdGNiaUFnYzNkcGRHTm9JQ2h2S1NCN1hHNGdJQ0FnWTJGelpTQmNJa1JFSUUxTlRTQlpXVmxaWENJNlhHNGdJQ0FnSUNCaExtUmhlU0E5SUZ3aU1pMWthV2RwZEZ3aUxDQmhMbTF2Ym5Sb0lEMGdYQ0p6YUc5eWRGd2lMQ0JoTG5sbFlYSWdQU0JjSW01MWJXVnlhV05jSWp0Y2JpQWdJQ0FnSUdKeVpXRnJPMXh1SUNBZ0lHTmhjMlVnWENKTlRVMGdSRVFnV1ZsWldWd2lPbHh1SUNBZ0lDQWdjbVYwZFhKdUlHRXVaR0Y1SUQwZ1hDSXlMV1JwWjJsMFhDSXNJR0V1Ylc5dWRHZ2dQU0JjSW5Ob2IzSjBYQ0lzSUdFdWVXVmhjaUE5SUZ3aWJuVnRaWEpwWTF3aUxDQnlMblJ2VEc5allXeGxSR0YwWlZOMGNtbHVaeWhjSW1WdUxVZENYQ0lzSUdFcExuSmxjR3hoWTJVb0x5aGNYR1I3TW4wcElDaGNYSGQ3TTMwcElDaGNYR1I3TkgwcEx5d2dYQ0lrTWlBa01TQWtNMXdpS1R0Y2JpQWdJQ0JqWVhObElGd2lSRVF0VFUwdFdWbFpXVndpT2x4dUlDQWdJQ0FnY21WMGRYSnVJR0V1WkdGNUlEMGdYQ0l5TFdScFoybDBYQ0lzSUdFdWJXOXVkR2dnUFNCY0lqSXRaR2xuYVhSY0lpd2dZUzU1WldGeUlEMGdYQ0p1ZFcxbGNtbGpYQ0lzSUhJdWRHOU1iMk5oYkdWRVlYUmxVM1J5YVc1bktGd2laVzR0UjBKY0lpd2dZU2t1Y21Wd2JHRmpaU2d2S0Z4Y1pIc3lmU2xjWEM4b1hGeGtleko5S1Z4Y0x5aGNYR1I3TkgwcEx5d2dYQ0lrTVMwa01pMGtNMXdpS1R0Y2JpQWdJQ0JrWldaaGRXeDBPbHh1SUNBZ0lDQWdZUzU1WldGeUlEMGdYQ0p1ZFcxbGNtbGpYQ0lzSUdFdWJXOXVkR2dnUFNCY0lqSXRaR2xuYVhSY0lpd2dZUzVrWVhrZ1BTQmNJakl0WkdsbmFYUmNJanRjYmlBZ0lDQWdJR0p5WldGck8xeHVJQ0I5WEc0Z0lHTnZibk4wSUhNZ1BTQnlMblJ2VEc5allXeGxSR0YwWlZOMGNtbHVaeWhjSW1WdUxVZENYQ0lzSUdFcExuSmxjR3hoWTJVb0x5aGNYR1I3TW4wcElDaGNYSGQ3TXl3MGZTa2dLRnhjWkhzMGZTa3ZMQ0FvWXl3Z2JDd2dkU3dnYlNrZ1BUNGdZQ1I3YkgwZ0pIdDFMbk5zYVdObEtEQXNJRE1wZlNBa2UyMTlZQ2s3WEc0Z0lISmxkSFZ5YmlCdklEMDlQU0JjSWxsWldWa3RUVTB0UkVSY0lpQS9JSE11Y21Wd2JHRmpaU2d2S0Z4Y1pIc3lmU2xjWEM4b1hGeGtleko5S1Z4Y0x5aGNYR1I3TkgwcEx5d2dYQ0lrTXkwa01pMGtNVndpS1NBNklITTdYRzU5TENCZlpTQTlJQ2hsTENCMElEMGdJVEVwSUQwK0lIdGNiaUFnYkdWMElISTdYRzRnSUdsbUlDaDBlWEJsYjJZZ1pTQTlQU0JjSW01MWJXSmxjbHdpSUNZbUlIUXBYRzRnSUNBZ2NpQTlJRzVsZHlCRVlYUmxLR1VnS2lBeFpUTXBPMXh1SUNCbGJITmxJR2xtSUNoMGVYQmxiMllnWlNBOVBTQmNJbk4wY21sdVoxd2lJSHg4SUdVZ2FXNXpkR0Z1WTJWdlppQkVZWFJsS1NCN1hHNGdJQ0FnYVdZZ0tISWdQU0J1WlhjZ1JHRjBaU2hsS1N3Z2FYTk9ZVTRvY2k1blpYUlVhVzFsS0NrcEtWeHVJQ0FnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0Z3aVNXNTJZV3hwWkNCa1lYUmxJR2x1Y0hWMFhDSXBPMXh1SUNCOUlHVnNjMlZjYmlBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb1hDSkpiblpoYkdsa0lHUmhkR1VnYVc1d2RYUmNJaWs3WEc0Z0lISmxkSFZ5YmlCZ0pIdHlMbWRsZEZWVVEwaHZkWEp6S0NrdWRHOVRkSEpwYm1jb0tTNXdZV1JUZEdGeWRDZ3lMQ0JjSWpCY0lpbDlPaVI3Y2k1blpYUlZWRU5OYVc1MWRHVnpLQ2t1ZEc5VGRISnBibWNvS1M1d1lXUlRkR0Z5ZENneUxDQmNJakJjSWlsOU9pUjdjaTVuWlhSVlZFTlRaV052Ym1SektDa3VkRzlUZEhKcGJtY29LUzV3WVdSVGRHRnlkQ2d5TENCY0lqQmNJaWw5SUVkTlZHQTdYRzU5TENCNVpTQTlJQ2hsTENCMElEMGdYQ0prWVhselhDSXNJSElnUFNCY0ltRmtaRndpS1NBOVBpQjdYRzRnSUdsbUlDaGxJRHdnTUNsY2JpQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9YQ0pCYlc5MWJuUWdiWFZ6ZENCaVpTQmhJSEJ2YzJsMGFYWmxJRzUxYldKbGNpNWNJaWs3WEc0Z0lHTnZibk4wSUc0Z1BTQXZLaUJBWDE5UVZWSkZYMThnS2k4Z2JtVjNJRVJoZEdVb0tTd2dieUE5SUhJZ1BUMDlJRndpWVdSa1hDSWdQeUJsSURvZ0xXVTdYRzRnSUhKbGRIVnliaUIwSUQwOVBTQmNJbmxsWVhKelhDSWdQeUJ1TG5ObGRFWjFiR3haWldGeUtHNHVaMlYwUm5Wc2JGbGxZWElvS1NBcklHOHBJRG9nZENBOVBUMGdYQ0prWVhselhDSWdKaVlnYmk1elpYUkVZWFJsS0c0dVoyVjBSR0YwWlNncElDc2dieWtzSUc0N1hHNTlMQ0JpWlNBOUlDaGxLU0E5UGlCN1hHNGdJR052Ym5OMElIUWdQU0JsTG5Od2JHbDBLQzhzWEZ4ekx5a3NJSElnUFNBdk9seGNjeWhiTUMwNVlTMTZRUzFhWFNzdWV6STFMREk0ZlNrdloyMHVaWGhsWXloMFd6QmRLU3dnYmlBOUlISWdQVDBnYm5Wc2JDQS9JSFp2YVdRZ01DQTZJSEpiTVYwc0lHOGdQU0F2T2x4Y2N5aGJNQzA1WVMxNlFTMWFYU3N1ZXpJMUxETTBmU2t2WjIwdVpYaGxZeWgwV3pGZEtTd2dhU0E5SUc4Z1BUMGdiblZzYkNBL0lIWnZhV1FnTUNBNklHOWJNVjA3WEc0Z0lISmxkSFZ5YmlCN0lHRmtaSEpsYzNOSVlYTm9PaUJ1TENCaWJHOWphMk5vWVdsdVNHRnphRG9nYVN3Z2MzQnNhWFJNYjI1blkyOWtaVG9nZENCOU8xeHVmU3dnVVdVZ1BTQXZLaUJBWDE5UVZWSkZYMThnS2k4Z1QySnFaV04wTG1aeVpXVjZaU2d2S2lCQVgxOVFWVkpGWDE4Z0tpOGdUMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblI1S0h0Y2JpQWdYMTl3Y205MGIxOWZPaUJ1ZFd4c0xGeHVJQ0JtYjNKdFlYUk5iMjVsZVRvZ1JHVXNYRzRnSUdkbGRFRmthblZ6ZEdWa1JHRjBaVG9nZVdVc1hHNGdJR2RsZEVadmNtMWhkSFJsWkVSaGRHVlRkSEpwYm1jNklHaGxMRnh1SUNCblpYUkdiM0p0WVhSMFpXUlVhVzFsVTNSeWFXNW5PaUJmWlN4Y2JpQWdjR0Z5YzJWRGNubHdkRzlNYjI1blkyOWtaVG9nWW1WY2JuMHNJRk41YldKdmJDNTBiMU4wY21sdVoxUmhaeXdnZXlCMllXeDFaVG9nWENKTmIyUjFiR1ZjSWlCOUtTa3NJSGtnUFNBeU5UWXdMQ0IyWlNBOUlEQXVPU3dnZDJVZ1BTQTBMQ0JISUQwZ0tIc2djM0pqT2lCbExDQm1hV3hsYm1GdFpUb2dkQ3dnYjNCMGFXOXVjem9nY2lCOUtTQTlQaUI3WEc0Z0lHTnZibk4wSUhzZ2JXRjRWMmxrZEdnNklHNGdQU0I1TENCeGRXRnNhWFI1T2lCdklEMGdkbVVnZlNBOUlISWdmSHdnZTMwN1hHNGdJSEpsZEhWeWJpQnVaWGNnVUhKdmJXbHpaU2dvYVN3Z1lTa2dQVDRnZTF4dUlDQWdJR052Ym5OMElITWdQU0J1WlhjZ1NXMWhaMlVvS1R0Y2JpQWdJQ0J6TG5OeVl5QTlJR1VzSUhNdWIyNXNiMkZrSUQwZ0tDa2dQVDRnZTF4dUlDQWdJQ0FnWTI5dWMzUWdZeUE5SUdSdlkzVnRaVzUwTG1OeVpXRjBaVVZzWlcxbGJuUW9YQ0pqWVc1MllYTmNJaWtzSUd3Z1BTQmpMbWRsZEVOdmJuUmxlSFFvWENJeVpGd2lLVHRjYmlBZ0lDQWdJR2xtSUNnaGJDQjhmQ0FoS0d3Z2FXNXpkR0Z1WTJWdlppQkRZVzUyWVhOU1pXNWtaWEpwYm1kRGIyNTBaWGgwTWtRcEtWeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1lTaHVaWGNnUlhKeWIzSW9YQ0pHWVdsc1pXUWdkRzhnWjJWMElESkVJR052Ym5SbGVIUmNJaWtwTzF4dUlDQWdJQ0FnYVdZZ0tITXVibUYwZFhKaGJGZHBaSFJvSUQ0Z2Jpa2dlMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQjFJRDBnZVN3Z2JTQTlJSFVnTHlCekxtNWhkSFZ5WVd4WGFXUjBhRHRjYmlBZ0lDQWdJQ0FnWXk1M2FXUjBhQ0E5SUhVc0lHTXVhR1ZwWjJoMElEMGdjeTV1WVhSMWNtRnNTR1ZwWjJoMElDb2diVHRjYmlBZ0lDQWdJSDBnWld4elpWeHVJQ0FnSUNBZ0lDQmpMbmRwWkhSb0lEMGdjeTV1WVhSMWNtRnNWMmxrZEdnc0lHTXVhR1ZwWjJoMElEMGdjeTV1WVhSMWNtRnNTR1ZwWjJoME8xeHVJQ0FnSUNBZ2JDNW1hV3hzVTNSNWJHVWdQU0JjSW5SeVlXNXpjR0Z5Wlc1MFhDSXNJR3d1Wm1sc2JGSmxZM1FvTUN3Z01Dd2dZeTUzYVdSMGFDd2dZeTVvWldsbmFIUXBMQ0JzTG5OaGRtVW9LU3dnYkM1a2NtRjNTVzFoWjJVb2N5d2dNQ3dnTUN3Z1l5NTNhV1IwYUN3Z1l5NW9aV2xuYUhRcExDQmpMblJ2UW14dllpaGNiaUFnSUNBZ0lDQWdLSFVwSUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0JwWmlBb0lYVXBYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTQ3WEc0Z0lDQWdJQ0FnSUNBZ1kyOXVjM1FnYlNBOUlIUXVjbVZ3YkdGalpTZ3ZYRnd1VzE0dkxsMHJKQzhzSUZ3aUxtcHdaMXdpS1N3Z1V5QTlJRzVsZHlCQ2JHOWlLRnQxWFN3Z2V5QjBlWEJsT2lCY0ltbHRZV2RsTDJwd1pXZGNJaUI5S1R0Y2JpQWdJQ0FnSUNBZ0lDQlRMbXhoYzNSTmIyUnBabWxsWkVSaGRHVWdQU0JFWVhSbExtNXZkeWdwTENCVExtNWhiV1VnUFNCdExDQnBLRk1wTzF4dUlDQWdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ0lDQmNJbWx0WVdkbEwycHdaV2RjSWl4Y2JpQWdJQ0FnSUNBZ2IxeHVJQ0FnSUNBZ0tUdGNiaUFnSUNCOU8xeHVJQ0I5S1R0Y2JuMHNJRmtnUFNBb1pTa2dQVDRnYm1WM0lGQnliMjFwYzJVb0tIUXBJRDArSUh0Y2JpQWdZMjl1YzNRZ2NpQTlJRzVsZHlCR2FXeGxVbVZoWkdWeUtDazdYRzRnSUhJdWNtVmhaRUZ6UkdGMFlWVlNUQ2hsS1N3Z2NpNXZibXh2WVdSbGJtUWdQU0FvS1NBOVBpQjdYRzRnSUNBZ2RtRnlJRzQ3WEc0Z0lDQWdkQ2g3WEc0Z0lDQWdJQ0J6Y21NNklDZ29iaUE5SUhJdWNtVnpkV3gwS1NBOVBTQnVkV3hzSUQ4Z2RtOXBaQ0F3SURvZ2JpNTBiMU4wY21sdVp5Z3BLU0I4ZkNCY0lsd2lMRnh1SUNBZ0lDQWdabWxzWlc1aGJXVTZJR1V1Ym1GdFpWeHVJQ0FnSUgwcE8xeHVJQ0I5TzF4dWZTa3NJSG9nUFNBb1pTa2dQVDRnWlNBL0lGQXVjMjl0WlNoY2JpQWdLSFFwSUQwK0lHVXVkRzlWY0hCbGNrTmhjMlVvS1M1bGJtUnpWMmwwYUNoMEtWeHVLU0E2SUNFeExDQk1aU0E5SUNobEtTQTlQaUJ1WlhjZ1VISnZiV2x6WlNnb2RDa2dQVDRnZTF4dUlDQjZLR1V1Ym1GdFpTa2dQeUJaS0dVcExuUm9aVzRvS0hJcElEMCtJSHRjYmlBZ0lDQkhLSElwTG5Sb1pXNG9kQ2s3WEc0Z0lIMHBJRG9nZENobEtUdGNibjBwTzF4dVpuVnVZM1JwYjI0Z1VHVW9aU3dnZENBOUlIZGxLU0I3WEc0Z0lHTnZibk4wSUhJZ1BTQnVaWGNnVldsdWREaEJjbkpoZVNoMEtUdGNiaUFnY21WMGRYSnVJRzVsZHlCRVlYUmhWbWxsZHloeUxtSjFabVpsY2lrdWMyVjBWV2x1ZERNeUtEQXNJR1VwTENCeU8xeHVmVnh1WTI5dWMzUWdWR1VnUFNBb1pTd2dlMXh1SUNCamFIVnVhMU5wZW1VNklIUWdQU0F4TmpNNE5GeHVJQ0F2S2lBeE5rdENJQ292WEc1OUtTQTlQaUI3WEc0Z0lHTnZibk4wSUhJZ1BTQmJYVHRjYmlBZ1ptOXlJQ2hzWlhRZ2JpQTlJREE3SUc0Z1BDQmxMbXhsYm1kMGFEc2diaXNyS1NCN1hHNGdJQ0FnWTI5dWMzUWdieUE5SUdWYmJsMDdYRzRnSUNBZ2JpQWxJSFFnUFQwOUlEQWdQeUJ5TG5CMWMyZ29XMjlkS1NBNklISmJjaTVzWlc1bmRHZ2dMU0F4WFM1d2RYTm9LRzhwTzF4dUlDQjlYRzRnSUhKbGRIVnliaUJ5TG0xaGNDZ29iaWtnUFQ0Z2JtVjNJRlZwYm5RNFFYSnlZWGtvYmlrcExtTnZibU5oZENodVpYY2dWV2x1ZERoQmNuSmhlU2hiWFNrcE8xeHVmU3dnVDJVZ1BTQW9aU2tnUFQ0Z2UxeHVJQ0JqYjI1emRDQjBJRDBnYm1WM0lFWnBiR1ZTWldGa1pYSW9LVHRjYmlBZ2NtVjBkWEp1SUc1bGR5QlFjbTl0YVhObEtDaHlLU0E5UGlCN1hHNGdJQ0FnZEM1dmJteHZZV1FnUFNBb0tTQTlQaUI3WEc0Z0lDQWdJQ0JqYjI1emRDQnVJRDBnZTF4dUlDQWdJQ0FnSUNCbWFXeGxibUZ0WlRvZ1pTNXVZVzFsTEZ4dUlDQWdJQ0FnSUNCaWRXWm1aWEk2SUhRdWNtVnpkV3gwTEZ4dUlDQWdJQ0FnSUNCbWFXeGxVMmw2WlRvZ1pTNXphWHBsWEc0Z0lDQWdJQ0I5TzF4dUlDQWdJQ0FnY2lodUtUdGNiaUFnSUNCOUxDQjBMbTl1WlhKeWIzSWdQU0FvS1NBOVBpQjdYRzRnSUNBZ0lDQnlLSHRjYmlBZ0lDQWdJQ0FnYldWemMyRm5aVG9nWUZWdVlXSnNaU0IwYnlCeVpXRmtJR1pwYkdVZ0pIdGxMbTVoYldWOVlGeHVJQ0FnSUNBZ2ZTazdYRzRnSUNBZ2ZTd2dkQzV5WldGa1FYTkJjbkpoZVVKMVptWmxjaWhsS1R0Y2JpQWdmU2s3WEc1OUxDQnhaU0E5SUM4cUlFQmZYMUJWVWtWZlh5QXFMeUJQWW1wbFkzUXVabkpsWlhwbEtDOHFJRUJmWDFCVlVrVmZYeUFxTHlCUFltcGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRIa29lMXh1SUNCZlgzQnliM1J2WDE4NklHNTFiR3dzWEc0Z0lHTnZiWEJ5WlhOelNXMWhaMlU2SUVjc1hHNGdJR052YlhCeVpYTnpTVzFoWjJWR2FXeGxPaUJNWlN4Y2JpQWdZMjl1ZG1WeWRGUnZRbUZ6WlRZME9pQlpMRnh1SUNCblpXNWxjbUYwWlVOb2RXNXJjem9nVkdVc1hHNGdJR2x6VTNWd2NHOXlkR1ZrU1cxaFoyVkdiM0p0WVhRNklIb3NYRzRnSUc1MWJWUnZWV2x1ZERoQmNuSmhlVG9nVUdVc1hHNGdJSEpsWVdSR2FXeGxPaUJQWlZ4dWZTd2dVM2x0WW05c0xuUnZVM1J5YVc1blZHRm5MQ0I3SUhaaGJIVmxPaUJjSWsxdlpIVnNaVndpSUgwcEtTd2daeUE5SUNobEtTQTlQaUI3WEc0Z0lHTnZibk4wSUhRZ1BTQnNiMk5oYkZOMGIzSmhaMlV1WjJWMFNYUmxiU2hsS1R0Y2JpQWdhV1lnS0hRZ0lUMDlJRndpZFc1a1pXWnBibVZrWENJcElIdGNiaUFnSUNCcFppQW9kQ0E5UFQwZ2JuVnNiQ0I4ZkNCMElEMDlQU0JjSW01MWJHeGNJaWxjYmlBZ0lDQWdJSEpsZEhWeWJpQnVkV3hzTzF4dUlDQWdJSFJ5ZVNCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnU2xOUFRpNXdZWEp6WlNoMEtUdGNiaUFnSUNCOUlHTmhkR05vSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUJ1ZFd4c08xeHVJQ0FnSUgxY2JpQWdmVnh1ZlN3Z1RXVWdQU0FvWlN3Z2RDa2dQVDRnZTF4dUlDQnNiMk5oYkZOMGIzSmhaMlV1YzJWMFNYUmxiU2hsTENCS1UwOU9Mbk4wY21sdVoybG1lU2gwS1NrN1hHNTlMQ0JsZENBOUlDOHFJRUJmWDFCVlVrVmZYeUFxTHlCUFltcGxZM1F1Wm5KbFpYcGxLQzhxSUVCZlgxQlZVa1ZmWHlBcUx5QlBZbXBsWTNRdVpHVm1hVzVsVUhKdmNHVnlkSGtvZTF4dUlDQmZYM0J5YjNSdlgxODZJRzUxYkd3c1hHNGdJR2RsZEZaaGJIVmxPaUJuTEZ4dUlDQnpaWFJXWVd4MVpUb2dUV1ZjYm4wc0lGTjViV0p2YkM1MGIxTjBjbWx1WjFSaFp5d2dleUIyWVd4MVpUb2dYQ0pOYjJSMWJHVmNJaUI5S1Nrc0lFa2dQU0FvWlNrZ1BUNGdUMkpxWldOMExtdGxlWE1vWlNrdWMyOXlkQ2dwTG5KbFpIVmpaU2dvZEN3Z2Npa2dQVDRnS0hSYmNsMGdQU0JsVzNKZExDQjBLU3dnZTMwcExDQlNaU0E5SUdGemVXNWpJQ2hsS1NBOVBpQjdYRzRnSUdOdmJuTjBJSFFnUFNCdVpYY2dWR1Y0ZEVWdVkyOWtaWElvS1M1bGJtTnZaR1VvU2xOUFRpNXpkSEpwYm1kcFpua29TU2hsS1NrcExDQnlJRDBnWVhkaGFYUWdZM0o1Y0hSdkxuTjFZblJzWlM1a2FXZGxjM1FvWENKVFNFRXRNalUyWENJc0lIUXBPMXh1SUNCeVpYUjFjbTRnUVhKeVlYa3Vabkp2YlNodVpYY2dWV2x1ZERoQmNuSmhlU2h5S1NrdWJXRndLQ2hwS1NBOVBpQW9YQ0l3TUZ3aUlDc2dhUzUwYjFOMGNtbHVaeWd4TmlrcExuTnNhV05sS0MweUtTa3VhbTlwYmloY0lsd2lLVHRjYm4wc0lGb2dQU0FvWlN3Z2RDa2dQVDRnUVhKeVlYa3VhWE5CY25KaGVTaGxLU0FtSmlCQmNuSmhlUzVwYzBGeWNtRjVLSFFwSUQ4Z2RDNXRZWEFvS0hJc0lHNHBJRDArSUZvb1pWdHVYU3dnY2lrcElEb2dkSGx3Wlc5bUlHVWdQVDBnWENKdlltcGxZM1JjSWlBbUppQmxJQ0U5UFNCdWRXeHNJQ1ltSUhSNWNHVnZaaUIwSUQwOUlGd2liMkpxWldOMFhDSWdKaVlnZENBaFBUMGdiblZzYkNBL0lFc29aU3dnZENrZ09pQjBMQ0JMSUQwZ0tHVXNJQzR1TG5RcElEMCtJSHRjYmlBZ1ptOXlJQ2hqYjI1emRDQnlJRzltSUhRcFhHNGdJQ0FnWm05eUlDaGpiMjV6ZENCdUlHbHVJSElwWEc0Z0lDQWdJQ0J5VzI1ZElEMDlQU0J1ZFd4c0lIeDhJSEpiYmwwZ1BUMDlJSFp2YVdRZ01DQjhmQ0FvWlZ0dVhTQTlJRm9vWlZ0dVhTd2djbHR1WFNrcE8xeHVJQ0J5WlhSMWNtNGdaVHRjYm4wc0lIUjBJRDBnTHlvZ1FGOWZVRlZTUlY5ZklDb3ZJRTlpYW1WamRDNW1jbVZsZW1Vb0x5b2dRRjlmVUZWU1JWOWZJQ292SUU5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGVTaDdYRzRnSUY5ZmNISnZkRzlmWHpvZ2JuVnNiQ3hjYmlBZ2FHRnphRTlpYW1WamREb2dVbVVzWEc0Z0lHMWxjbWRsT2lCTExGeHVJQ0J6YjNKMFQySnFaV04wUW5sTFpYbHpPaUJKWEc1OUxDQlRlVzFpYjJ3dWRHOVRkSEpwYm1kVVlXY3NJSHNnZG1Gc2RXVTZJRndpVFc5a2RXeGxYQ0lnZlNrcE8xeHVablZ1WTNScGIyNGdUbVVvS1NCN1hHNGdJR3hsZENCbExDQjBPMXh1SUNCeVpYUjFjbTRnZTF4dUlDQWdJSEJ5YjIxcGMyVTZJRzVsZHlCUWNtOXRhWE5sS0NodUxDQnZLU0E5UGlCN1hHNGdJQ0FnSUNCbElEMGdiaXdnZENBOUlHODdYRzRnSUNBZ2ZTa3NYRzRnSUNBZ2NtVnpiMngyWlRvZ1pTeGNiaUFnSUNCeVpXcGxZM1E2SUhSY2JpQWdmVHRjYm4xY2JtTnZibk4wSUhKMElEMGdMeW9nUUY5ZlVGVlNSVjlmSUNvdklFOWlhbVZqZEM1bWNtVmxlbVVvTHlvZ1FGOWZVRlZTUlY5ZklDb3ZJRTlpYW1WamRDNWtaV1pwYm1WUWNtOXdaWEowZVNoN1hHNGdJRjlmY0hKdmRHOWZYem9nYm5Wc2JDeGNiaUFnWTNKbFlYUmxVSEp2YldselpUb2dUbVZjYm4wc0lGTjViV0p2YkM1MGIxTjBjbWx1WjFSaFp5d2dleUIyWVd4MVpUb2dYQ0pOYjJSMWJHVmNJaUI5S1Nrc0lFZ2dQU0FvS1NBOVBpQjdYRzRnSUdOdmJuTjBJSFFnUFNCdVpYY2dWVkpNVTJWaGNtTm9VR0Z5WVcxektIZHBibVJ2ZHk1c2IyTmhkR2x2Ymk1elpXRnlZMmdwTG1kbGRDaGNJbUZqWTNReFhDSXBPMXh1SUNCeVpYUjFjbTRnWnloVUtTQjhmQ0IwTzF4dWZTd2dWeUE5SUNobEtTQTlQaUJsSUNZbUlDRXZYbFpTTHk1MFpYTjBLR1VwSUQ4Z1hDSnlaV0ZzWENJZ09pQmNJbVJsYlc5Y0lpd2dYeUE5SUNncElEMCtJSHRjYmlBZ1kyOXVjM1FnWlNBOUlHY29UeWs3WEc0Z0lHbG1JQ2hsS1Z4dUlDQWdJSEpsZEhWeWJpQmxPMXh1SUNCamIyNXpkQ0IwSUQwZ2QybHVaRzkzTG14dlkyRjBhVzl1TG1odmMzUnVZVzFsTENCeUlEMGdkMXQwWFR0Y2JpQWdjbVYwZFhKdUlISWdmSHdnWENJek5qTXdNRndpTzF4dWZTd2diblFnUFNBdktpQkFYMTlRVlZKRlgxOGdLaThnVDJKcVpXTjBMbVp5WldWNlpTZ3ZLaUJBWDE5UVZWSkZYMThnS2k4Z1QySnFaV04wTG1SbFptbHVaVkJ5YjNCbGNuUjVLSHRjYmlBZ1gxOXdjbTkwYjE5Zk9pQnVkV3hzTEZ4dUlDQm5aWFJCWTNScGRtVk1iMmRwYm1sa09pQklMRnh1SUNCblpYUkJjSEJKWkRvZ1h5eGNiaUFnWjJWMFJXNTJhWEp2Ym0xbGJuUkdjbTl0VEc5bmFXNXBaRG9nVjF4dWZTd2dVM2x0WW05c0xuUnZVM1J5YVc1blZHRm5MQ0I3SUhaaGJIVmxPaUJjSWsxdlpIVnNaVndpSUgwcEtTd2dRMlVnUFNBb0tTQTlQaUI3WEc0Z0lHTnZibk4wSUdVZ1BTQmJYU3dnZENBOUlGdGRMQ0J5SUQwZ2JtVjNJRlZTVEZObFlYSmphRkJoY21GdGN5aDNhVzVrYjNjdWJHOWpZWFJwYjI0dWMyVmhjbU5vS1R0Y2JpQWdabTl5SUNoamIyNXpkQ0JiYnl3Z2FWMGdiMllnY2k1bGJuUnlhV1Z6S0NrcElIdGNiaUFnSUNCamIyNXpkQ0JoSUQwZ2J5NXRZWFJqYUNndlhtRmpZM1FvWEZ4a0t5a3ZLU3dnY3lBOUlHOHViV0YwWTJnb0wxNTBiMnRsYmloY1hHUXJLUzhwTENCaklEMGdieTV0WVhSamFDZ3ZYbU4xY2loY1hHUXJLUzhwTzF4dUlDQWdJR0VnSmlZZ0tHVmJLMkZiTVYwZ0xTQXhYU0E5SUh0Y2JpQWdJQ0FnSUM0dUxtVmJLMkZiTVYwZ0xTQXhYU0I4ZkNCN2ZTeGNiaUFnSUNBZ0lHeHZaMmx1YVdRNklHbGNiaUFnSUNCOUtTd2djeUFtSmlBb1pWc3JjMXN4WFNBdElERmRJRDBnZTF4dUlDQWdJQ0FnTGk0dVpWc3JjMXN4WFNBdElERmRJSHg4SUh0OUxGeHVJQ0FnSUNBZ2RHOXJaVzQ2SUdsY2JpQWdJQ0I5S1N3Z1l5QW1KaUFvWlZzclkxc3hYU0F0SURGZElEMGdlMXh1SUNBZ0lDQWdMaTR1WlZzclkxc3hYU0F0SURGZElIeDhJSHQ5TEZ4dUlDQWdJQ0FnWTNWeWNtVnVZM2s2SUdsY2JpQWdJQ0I5S1N3Z0tDOWhZMk4wTHk1MFpYTjBLRzhwSUh4OElDOTBiMnRsYmk4dWRHVnpkQ2h2S1NCOGZDQXZZM1Z5THk1MFpYTjBLRzhwS1NBbUppQjBMbkIxYzJnb2J5azdYRzRnSUgxY2JpQWdjbVYwZFhKdUlIc2diRzluYVc1SmJtWnZPaUJsTG1acGJIUmxjaWhjYmlBZ0lDQW9ieWtnUFQ0Z1cxd2liRzluYVc1cFpGd2lMQ0JjSW5SdmEyVnVYQ0lzSUZ3aVkzVnljbVZ1WTNsY0lsMHVaWFpsY25rb0tHa3BJRDArSUU5aWFtVmpkQzVyWlhsektHOHBMbWx1WTJ4MVpHVnpLR2twS1Z4dUlDQXBMQ0J3WVhKaGJYTlViMFJsYkdWMFpUb2dkQ0I5TzF4dWZTd2dWV1VnUFNBb1pTa2dQVDRnZTF4dUlDQnBaaUFvWlNBaFBTQnVkV3hzSUNZbUlHVXViR1Z1WjNSb0tWeHVJQ0FnSUhKbGRIVnliaUJsTG1acGJtUW9LSFFwSUQwK0lDOWVWbEl2TG5SbGMzUW9kQzVzYjJkcGJtbGtLU2tnZkh3Z1pWc3dYVHRjYm4wc0lDUmxJRDBnS0dVcElEMCtJSHRjYmlBZ1kyOXVjM1FnZENBOUlHNWxkeUJWVWt4VFpXRnlZMmhRWVhKaGJYTW9kMmx1Wkc5M0xteHZZMkYwYVc5dUxuTmxZWEpqYUNrN1hHNGdJR1V1Wm05eVJXRmphQ2dvYmlrZ1BUNGdkQzVrWld4bGRHVW9iaWtwTzF4dUlDQmpiMjV6ZENCeUlEMGdZQ1I3ZDJsdVpHOTNMbXh2WTJGMGFXOXVMbkJoZEdodVlXMWxmU1I3ZEM1MGIxTjBjbWx1WnlncElEOGdZRDhrZTNRdWRHOVRkSEpwYm1jb0tYMWdJRG9nWENKY0luMWdPMXh1SUNCM2FXNWtiM2N1YUdsemRHOXllUzV3ZFhOb1UzUmhkR1VvYm5Wc2JDd2dYQ0pjSWl3Z2NpazdYRzU5TENCRlpTQTlJQ2dwSUQwK0lIdGNiaUFnWTI5dWMzUWdaU0E5SUdjb2NDa2dQejhnWENKRlRsd2lPMXh1SUNCeVpYUjFjbTRnWUdoMGRIQnpPaTh2YjJGMWRHZ3VaR1Z5YVhZdVkyOXRMMjloZFhSb01pOWhkWFJvYjNKcGVtVS9ZWEJ3WDJsa1BTUjdYeWdwZlNac1BTUjdaWDBtWW5KaGJtUTlKSHRFZldBN1hHNTlMQ0I0SUQwZ0tDa2dQVDRnZTF4dUlDQmpiMjV6ZENCbElEMGdaeWhOS1R0Y2JpQWdhV1lnS0dVcFhHNGdJQ0FnY21WMGRYSnVJR1U3WEc0Z0lHTnZibk4wSUhRZ1BTQklLQ2s3WEc0Z0lISmxkSFZ5YmlCMlcxY29kQ2xkTzF4dWZTd2dRbVVnUFNBb0tTQTlQaUI3WEc0Z0lHTnZibk4wSUdVZ1BTQjRLQ2tzSUhRZ1BTQm5LSEFwSUQ4L0lGd2lSVTVjSWp0Y2JpQWdjbVYwZFhKdUlHQjNjM002THk4a2UyVjlMM2RsWW5OdlkydGxkSE12ZGpNL1lYQndYMmxrUFNSN1h5Z3BmU1pzUFNSN2RIMG1ZbkpoYm1ROUpIdEVmV0E3WEc1OUxDQnFaU0E5SUNobEtTQTlQaUJ1WlhjZ1ZWSk1VMlZoY21Ob1VHRnlZVzF6S0hkcGJtUnZkeTVzYjJOaGRHbHZiaTV6WldGeVkyZ3BMbWRsZENobEtTd2dRU0E5SUNobEtTQTlQaUJsTG5KbGNHeGhZMlVvTHloZVhGd3ZmRnhjTHlSOFcxNWhMWHBCTFZvd0xUa3RYeTR2S0NralhTa3ZaeXdnWENKY0lpa3NJRVpsSUQwZ0tHVXNJSFFwSUQwK0lIdGNiaUFnZG1GeUlHODdYRzRnSUdOdmJuTjBJSElnUFNCMElDRTlJRzUxYkd3Z0ppWWdkQzVwYzBWVklEOGdKQ0E2SUZVN1hHNGdJR3hsZENCdUlEMGdLQ2h2SUQwZ1p5aHdLU2tnUFQwZ2JuVnNiQ0EvSUhadmFXUWdNQ0E2SUc4dWRHOU1iM2RsY2tOaGMyVW9LU2tnUHo4Z1hDSmxibHdpTzF4dUlDQnlaWFIxY200Z2JpQTlJRzRnUFQwOUlGd2laVzVjSWlBL0lGd2lYQ0lnT2lCZ0x5UjdiaTV5WlhCc1lXTmxLRndpWDF3aUxDQmNJaTFjSWlsOVlDd2dkQ0FoUFNCdWRXeHNJQ1ltSUhRdWFYTkViMk4xYldWdWRDQS9JR0FrZTNKOUx5UjdRU2hsS1gxZ0lEb2dZQ1I3Y24wa2UyNTlMeVI3UVNobEtYMWdPMXh1ZlN3Z1IyVWdQU0FvWlNrZ1BUNGdMMTRvS0NndUtpbGNYQzRwUHloc2IyTmhiR2h2YzNRNk9EUTBNM3h3WVdkbGN5NWtaWFo4WW1sdVlYSjVYRnd1S0hONGZHTnZiU2w4WkdWeWFYWXVLR052Ylh4dFpYeGlaWHhrWlhZcEtTa2tMeTUwWlhOMEtHVXBMQ0J2ZENBOUlDOHFJRUJmWDFCVlVrVmZYeUFxTHlCUFltcGxZM1F1Wm5KbFpYcGxLQzhxSUVCZlgxQlZVa1ZmWHlBcUx5QlBZbXBsWTNRdVpHVm1hVzVsVUhKdmNHVnlkSGtvZTF4dUlDQmZYM0J5YjNSdlgxODZJRzUxYkd3c1hHNGdJR1pwYkhSbGNsTmxZWEpqYUZCaGNtRnRjem9nSkdVc1hHNGdJR2RsZEVSbFptRjFiSFJCWTNScGRtVkJZMk52ZFc1ME9pQlZaU3hjYmlBZ1oyVjBSR1Z5YVhaVGRHRjBhV05WVWt3NklFWmxMRnh1SUNCblpYUk1iMmRwYmtsdVptOUdjbTl0VlZKTU9pQkRaU3hjYmlBZ1oyVjBUMkYxZEdoVlVrdzZJRVZsTEZ4dUlDQm5aWFJSZFdWeWVWQmhjbUZ0WlhSbGNqb2dhbVVzWEc0Z0lHZGxkRk5sY25abGNsVlNURG9nZUN4Y2JpQWdaMlYwVjJWaWMyOWphMlYwVlZKTU9pQkNaU3hjYmlBZ2FYTkViMjFoYVc1QmJHeHZkMlZrT2lCSFpTeGNiaUFnYm05eWJXRnNhWHBsVUdGMGFEb2dRVnh1ZlN3Z1UzbHRZbTlzTG5SdlUzUnlhVzVuVkdGbkxDQjdJSFpoYkhWbE9pQmNJazF2WkhWc1pWd2lJSDBwS1N3Z1dXVWdQU0FvWlNrZ1BUNGdRbHRsWFN3Z2VtVWdQU0FvS1NBOVBpQkZMbVJ2YldGcGJrNWhiV1VzSUVsbElEMGdLR1VwSUQwK0lHcGJaVjBzSUdGMElEMGdMeW9nUUY5ZlVGVlNSVjlmSUNvdklFOWlhbVZqZEM1bWNtVmxlbVVvTHlvZ1FGOWZVRlZTUlY5ZklDb3ZJRTlpYW1WamRDNWtaV1pwYm1WUWNtOXdaWEowZVNoN1hHNGdJRjlmY0hKdmRHOWZYem9nYm5Wc2JDeGNiaUFnWjJWMFFuSmhibVJYWldKemFYUmxUbUZ0WlRvZ2VtVXNYRzRnSUdkbGRFeGxaMkZzVEdGdVpHbHVaME52YlhCaGJuazZJRmxsTEZ4dUlDQm5aWFJRYkdGMFptOXliVTVoYldVNklFbGxYRzU5TENCVGVXMWliMnd1ZEc5VGRISnBibWRVWVdjc0lIc2dkbUZzZFdVNklGd2lUVzlrZFd4bFhDSWdmU2twTENCaUlEMGdLR1VwSUQwK0lFWXVkR1Z6ZENobEtTd2dXbVVnUFNCaGMzbHVZeUFvS1NBOVBpQjdYRzRnSUdOdmJuTjBJR1VnUFNCM2FXNWtiM2NzSUhRZ1BTQnVZWFpwWjJGMGIzSXNJSElnUFNCMExuVnpaWEpCWjJWdWRDQS9QeUJsTG05d1pYSmhJRDgvSUZ3aVhDSTdYRzRnSUdsbUlDZ3ZkMmx1Wkc5M2N5QndhRzl1WlM5cExuUmxjM1FvY2lrcFhHNGdJQ0FnY21WMGRYSnVJRndpVjJsdVpHOTNjeUJRYUc5dVpWd2lPMXh1SUNCcFppQW9MMkZ1WkhKdmFXUXZhUzUwWlhOMEtISXBLU0I3WEc0Z0lDQWdhV1lnS0hRdWRYTmxja0ZuWlc1MFJHRjBZU2tnZTF4dUlDQWdJQ0FnWTI5dWMzUWdiaUE5SUdGM1lXbDBJSFF1ZFhObGNrRm5aVzUwUkdGMFlTNW5aWFJJYVdkb1JXNTBjbTl3ZVZaaGJIVmxjeWhiWENKdGIyUmxiRndpWFNrN1hHNGdJQ0FnSUNCcFppQW9ZaWdvYmlBOVBTQnVkV3hzSUQ4Z2RtOXBaQ0F3SURvZ2JpNXRiMlJsYkNrZ2ZId2dYQ0pjSWlrcFhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCY0ltaDFZWGRsYVZ3aU8xeHVJQ0FnSUgwZ1pXeHpaU0JwWmlBb1lpaHlLU0I4ZkNBdmFIVmhkMlZwTDJrdWRHVnpkQ2h5S1NsY2JpQWdJQ0FnSUhKbGRIVnliaUJjSW1oMVlYZGxhVndpTzF4dUlDQWdJSEpsZEhWeWJpQmNJa0Z1WkhKdmFXUmNJanRjYmlBZ2ZWeHVJQ0J5WlhSMWNtNGdMMmxRWVdSOGFWQm9iMjVsZkdsUWIyUXZMblJsYzNRb2Npa2dKaVlnSVdVdVRWTlRkSEpsWVcwZ1B5QmNJbWxQVTF3aUlEb2dYQ0oxYm10dWIzZHVYQ0k3WEc1OUxDQnpkQ0E5SUM4cUlFQmZYMUJWVWtWZlh5QXFMeUJQWW1wbFkzUXVabkpsWlhwbEtDOHFJRUJmWDFCVlVrVmZYeUFxTHlCUFltcGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRIa29lMXh1SUNCZlgzQnliM1J2WDE4NklHNTFiR3dzWEc0Z0lHMXZZbWxzWlU5VFJHVjBaV04wUVhONWJtTTZJRnBsWEc1OUxDQlRlVzFpYjJ3dWRHOVRkSEpwYm1kVVlXY3NJSHNnZG1Gc2RXVTZJRndpVFc5a2RXeGxYQ0lnZlNrcE8xeHVaWGh3YjNKMElIdGNiaUFnUzJVZ1lYTWdRWEJ3U1VSRGIyNXpkR0Z1ZEhNc1hHNGdJR3RsSUdGeklFSnlZVzVrUTI5dWMzUmhiblJ6TEZ4dUlDQmhkQ0JoY3lCQ2NtRnVaRlYwYVd4ekxGeHVJQ0JJWlNCaGN5QkRkWEp5Wlc1amVVTnZibk4wWVc1MGN5eGNiaUFnVjJVZ1lYTWdSRzlqZFcxbGJuUkRiMjV6ZEdGdWRITXNYRzRnSUZGbElHRnpJRVp2Y20xaGRGVjBhV3h6TEZ4dUlDQnhaU0JoY3lCSmJXRm5aVlYwYVd4ekxGeHVJQ0I0WlNCaGN5Qk1iMk5oYkZOMGIzSmhaMlZEYjI1emRHRnVkSE1zWEc0Z0lHVjBJR0Z6SUV4dlkyRnNVM1J2Y21GblpWVjBhV3h6TEZ4dUlDQllaU0JoY3lCTmIySnBiR1ZFWlhacFkyVnpRMjl1YzNSaGJuUnpMRnh1SUNCemRDQmhjeUJQVTBSbGRHVmpkR2x2YmxWMGFXeHpMRnh1SUNCMGRDQmhjeUJQWW1wbFkzUlZkR2xzY3l4Y2JpQWdjblFnWVhNZ1VISnZiV2x6WlZWMGFXeHpMRnh1SUNCV1pTQmhjeUJWVWt4RGIyNXpkR0Z1ZEhNc1hHNGdJRzkwSUdGeklGVlNURlYwYVd4ekxGeHVJQ0JLWlNCaGN5QldZV3hwWkdGMGFXOXVRMjl1YzNSaGJuUnpMRnh1SUNCdWRDQmhjeUJYWldKVGIyTnJaWFJWZEdsc2MxeHVmVHRjYmlKZExDSnVZVzFsY3lJNlcxMHNJbk52ZFhKalpWSnZiM1FpT2lJaWZRPT1cXG4vLyMgc291cmNlVVJMPXdlYnBhY2staW50ZXJuYWw6Ly8vLi4vLi4vbm9kZV9tb2R1bGVzL0BkZXJpdi1jb20vdXRpbHMvZGlzdC9kZXJpdi11dGlscy5qc1xcblwiKTtcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi4vYXBpL3NyYy9yZW1vdGVfY29uZmlnLmpzb25cIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi4vYXBpL3NyYy9yZW1vdGVfY29uZmlnLmpzb24gKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoKG1vZHVsZSkgPT4ge1xuXG5tb2R1bGUuZXhwb3J0cyA9IC8qI19fUFVSRV9fKi9KU09OLnBhcnNlKCd7XCJjc19jaGF0X2xpdmVjaGF0XCI6dHJ1ZSxcImNzX2NoYXRfd2hhdHNhcHBcIjp0cnVlLFwibWFya2V0aW5nX2dyb3d0aGJvb2tcIjp0cnVlLFwicGFzc2tleXNcIjp0cnVlLFwidHJhY2tpbmdfR1RNXCI6dHJ1ZSxcInRyYWNraW5nX2RhdGFkb2dcIjp0cnVlLFwidHJhY2tpbmdfaG90amFyXCI6dHJ1ZSxcInRyYWNraW5nX3J1ZGRlcnN0YWNrXCI6dHJ1ZX0nKTtcblxuLyoqKi8gfSlcblxuLyoqKioqKi8gXHR9KTtcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqKioqLyBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0dmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuLyoqKioqKi8gXHRcbi8qKioqKiovIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbi8qKioqKiovIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuLyoqKioqKi8gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuLyoqKioqKi8gXHRcdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuLyoqKioqKi8gXHRcdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuLyoqKioqKi8gXHRcdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuLyoqKioqKi8gXHRcdH1cbi8qKioqKiovIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuLyoqKioqKi8gXHRcdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuLyoqKioqKi8gXHRcdFx0aWQ6IG1vZHVsZUlkLFxuLyoqKioqKi8gXHRcdFx0bG9hZGVkOiBmYWxzZSxcbi8qKioqKiovIFx0XHRcdGV4cG9ydHM6IHt9XG4vKioqKioqLyBcdFx0fTtcbi8qKioqKiovIFx0XG4vKioqKioqLyBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4vKioqKioqLyBcdFx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG4vKioqKioqLyBcdFxuLyoqKioqKi8gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbi8qKioqKiovIFx0XHRtb2R1bGUubG9hZGVkID0gdHJ1ZTtcbi8qKioqKiovIFx0XG4vKioqKioqLyBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbi8qKioqKiovIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4vKioqKioqLyBcdH1cbi8qKioqKiovIFx0XG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IF9fd2VicGFja19tb2R1bGVzX187XG4vKioqKioqLyBcdFxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKioqKiovIFx0Lyogd2VicGFjay9ydW50aW1lL2NodW5rIHByZWZldGNoIGZ1bmN0aW9uICovXG4vKioqKioqLyBcdCgoKSA9PiB7XG4vKioqKioqLyBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5GID0ge307XG4vKioqKioqLyBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5FID0gKGNodW5rSWQpID0+IHtcbi8qKioqKiovIFx0XHRcdE9iamVjdC5rZXlzKF9fd2VicGFja19yZXF1aXJlX18uRikubWFwKChrZXkpID0+IHtcbi8qKioqKiovIFx0XHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5GW2tleV0oY2h1bmtJZCk7XG4vKioqKioqLyBcdFx0XHR9KTtcbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdH0pKCk7XG4vKioqKioqLyBcdFxuLyoqKioqKi8gXHQvKiB3ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCAqL1xuLyoqKioqKi8gXHQoKCkgPT4ge1xuLyoqKioqKi8gXHRcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4vKioqKioqLyBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuLyoqKioqKi8gXHRcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4vKioqKioqLyBcdFx0XHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuLyoqKioqKi8gXHRcdFx0XHQoKSA9PiAobW9kdWxlKTtcbi8qKioqKiovIFx0XHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuLyoqKioqKi8gXHRcdFx0cmV0dXJuIGdldHRlcjtcbi8qKioqKiovIFx0XHR9O1xuLyoqKioqKi8gXHR9KSgpO1xuLyoqKioqKi8gXHRcbi8qKioqKiovIFx0Lyogd2VicGFjay9ydW50aW1lL2NyZWF0ZSBmYWtlIG5hbWVzcGFjZSBvYmplY3QgKi9cbi8qKioqKiovIFx0KCgpID0+IHtcbi8qKioqKiovIFx0XHR2YXIgZ2V0UHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YgPyAob2JqKSA9PiAoT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iaikpIDogKG9iaikgPT4gKG9iai5fX3Byb3RvX18pO1xuLyoqKioqKi8gXHRcdHZhciBsZWFmUHJvdG90eXBlcztcbi8qKioqKiovIFx0XHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3Rcbi8qKioqKiovIFx0XHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbi8qKioqKiovIFx0XHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbi8qKioqKiovIFx0XHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3Rcbi8qKioqKiovIFx0XHQvLyBtb2RlICYgMTY6IHJldHVybiB2YWx1ZSB3aGVuIGl0J3MgUHJvbWlzZS1saWtlXG4vKioqKioqLyBcdFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuLyoqKioqKi8gXHRcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4vKioqKioqLyBcdFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSB0aGlzKHZhbHVlKTtcbi8qKioqKiovIFx0XHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4vKioqKioqLyBcdFx0XHRpZih0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlKSB7XG4vKioqKioqLyBcdFx0XHRcdGlmKChtb2RlICYgNCkgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuLyoqKioqKi8gXHRcdFx0XHRpZigobW9kZSAmIDE2KSAmJiB0eXBlb2YgdmFsdWUudGhlbiA9PT0gJ2Z1bmN0aW9uJykgcmV0dXJuIHZhbHVlO1xuLyoqKioqKi8gXHRcdFx0fVxuLyoqKioqKi8gXHRcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbi8qKioqKiovIFx0XHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4vKioqKioqLyBcdFx0XHR2YXIgZGVmID0ge307XG4vKioqKioqLyBcdFx0XHRsZWFmUHJvdG90eXBlcyA9IGxlYWZQcm90b3R5cGVzIHx8IFtudWxsLCBnZXRQcm90byh7fSksIGdldFByb3RvKFtdKSwgZ2V0UHJvdG8oZ2V0UHJvdG8pXTtcbi8qKioqKiovIFx0XHRcdGZvcih2YXIgY3VycmVudCA9IG1vZGUgJiAyICYmIHZhbHVlOyB0eXBlb2YgY3VycmVudCA9PSAnb2JqZWN0JyAmJiAhfmxlYWZQcm90b3R5cGVzLmluZGV4T2YoY3VycmVudCk7IGN1cnJlbnQgPSBnZXRQcm90byhjdXJyZW50KSkge1xuLyoqKioqKi8gXHRcdFx0XHRPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhjdXJyZW50KS5mb3JFYWNoKChrZXkpID0+IChkZWZba2V5XSA9ICgpID0+ICh2YWx1ZVtrZXldKSkpO1xuLyoqKioqKi8gXHRcdFx0fVxuLyoqKioqKi8gXHRcdFx0ZGVmWydkZWZhdWx0J10gPSAoKSA9PiAodmFsdWUpO1xuLyoqKioqKi8gXHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBkZWYpO1xuLyoqKioqKi8gXHRcdFx0cmV0dXJuIG5zO1xuLyoqKioqKi8gXHRcdH07XG4vKioqKioqLyBcdH0pKCk7XG4vKioqKioqLyBcdFxuLyoqKioqKi8gXHQvKiB3ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMgKi9cbi8qKioqKiovIFx0KCgpID0+IHtcbi8qKioqKiovIFx0XHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG4vKioqKioqLyBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcbi8qKioqKiovIFx0XHRcdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcbi8qKioqKiovIFx0XHRcdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG4vKioqKioqLyBcdFx0XHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcbi8qKioqKiovIFx0XHRcdFx0fVxuLyoqKioqKi8gXHRcdFx0fVxuLyoqKioqKi8gXHRcdH07XG4vKioqKioqLyBcdH0pKCk7XG4vKioqKioqLyBcdFxuLyoqKioqKi8gXHQvKiB3ZWJwYWNrL3J1bnRpbWUvZW5zdXJlIGNodW5rICovXG4vKioqKioqLyBcdCgoKSA9PiB7XG4vKioqKioqLyBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5mID0ge307XG4vKioqKioqLyBcdFx0Ly8gVGhpcyBmaWxlIGNvbnRhaW5zIG9ubHkgdGhlIGVudHJ5IGNodW5rLlxuLyoqKioqKi8gXHRcdC8vIFRoZSBjaHVuayBsb2FkaW5nIGZ1bmN0aW9uIGZvciBhZGRpdGlvbmFsIGNodW5rc1xuLyoqKioqKi8gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZSA9IChjaHVua0lkKSA9PiB7XG4vKioqKioqLyBcdFx0XHRyZXR1cm4gUHJvbWlzZS5hbGwoT2JqZWN0LmtleXMoX193ZWJwYWNrX3JlcXVpcmVfXy5mKS5yZWR1Y2UoKHByb21pc2VzLCBrZXkpID0+IHtcbi8qKioqKiovIFx0XHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5mW2tleV0oY2h1bmtJZCwgcHJvbWlzZXMpO1xuLyoqKioqKi8gXHRcdFx0XHRyZXR1cm4gcHJvbWlzZXM7XG4vKioqKioqLyBcdFx0XHR9LCBbXSkpO1xuLyoqKioqKi8gXHRcdH07XG4vKioqKioqLyBcdH0pKCk7XG4vKioqKioqLyBcdFxuLyoqKioqKi8gXHQvKiB3ZWJwYWNrL3J1bnRpbWUvZ2V0IGphdmFzY3JpcHQgY2h1bmsgZmlsZW5hbWUgKi9cbi8qKioqKiovIFx0KCgpID0+IHtcbi8qKioqKiovIFx0XHQvLyBUaGlzIGZ1bmN0aW9uIGFsbG93IHRvIHJlZmVyZW5jZSBhc3luYyBjaHVua3Ncbi8qKioqKiovIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnUgPSAoY2h1bmtJZCkgPT4ge1xuLyoqKioqKi8gXHRcdFx0Ly8gcmV0dXJuIHVybCBmb3IgZmlsZW5hbWVzIGJhc2VkIG9uIHRlbXBsYXRlXG4vKioqKioqLyBcdFx0XHRyZXR1cm4gXCJ0cmFkZXIvanMvdHJhZGVyLlwiICsgY2h1bmtJZCArIFwiLlwiICsge1widmVuZG9ycy1ub2RlX21vZHVsZXNfYm93c2VyX2VzNV9qcy1ub2RlX21vZHVsZXNfZGF5anNfZGF5anNfbWluX2pzLW5vZGVfbW9kdWxlc19sb2Rhc2hfZGVib3VuLWJiYjI3N1wiOlwiZWEwMzlhMzk2OGI5NzU1ZGNlN2NcIixcInZlbmRvcnMtbm9kZV9tb2R1bGVzX3JlYWN0LWNvbnRlbnQtbG9hZGVyX2Rpc3RfcmVhY3QtY29udGVudC1sb2FkZXJfZXNfanMtbm9kZV9tb2R1bGVzX3JlYWN0LS1jMTAxMzFcIjpcImJiOWI2MzdhY2I3NWYyYmMwYjM5XCIsXCJzcmNfc2Fzc19hcHBfc2Nzcy1zcmNfQXBwX0NvbXBvbmVudHNfRWxlbWVudHNfUG9zaXRpb25zRHJhd2VyX2hlbHBlcnNfaW5kZXhfdHMtc3JjX0FwcF9pbml0LXMtYmE1OGY4XCI6XCJiYzUwZjU3OTIzYjBkMzczYzQxN1wiLFwidHJhZGVyLWFwcFwiOlwiZDZhOTU4YjFjMWFhNzJmMmM3MDdcIixcInZlbmRvcnMtbm9kZV9tb2R1bGVzX2Nsb3VkZmxhcmVfc3RyZWFtLXJlYWN0X2Rpc3Rfc3RyZWFtLXJlYWN0X2VzbV9qcy1ub2RlX21vZHVsZXNfZGVyaXZfcXVpbC0xNDUxNDBcIjpcImIxNTExNDBlNDM5MmUwOGU4MjkxXCIsXCJob29rc19zcmNfdXNlTUZBY2NvdW50U3RhdHVzX3RzLXNyY19Nb2R1bGVzX1RyYWRpbmdfSGVscGVyc192aWRlby1jb25maWdfdHMtc3JjX1N0b3Jlc19Nb2R1bGUtNzdjNjRlXCI6XCJjN2VmODU2NGQ5YzEyOTcxZmQzYVwiLFwic3JjX01vZHVsZXNfQ29udHJhY3RfQ29udGFpbmVyc19yZXBsYXktY2hhcnRfdHN4LXNyY19TdG9yZXNfTW9kdWxlc19UcmFkaW5nX0hlbHBlcnNfbG9naWNfdHNcIjpcImU3MGM3Y2I4ZTk4MTY4ZjRmNjVhXCIsXCJ0cmFkZXItYXBwLXYyXCI6XCI4NTZlNTEzOGQ2Mzk0YzRmOWVmNVwiLFwidHJhZGUtbW9kYWxzXCI6XCJmODEwZmI3YTg1ZGJiZGU4MzRmY1wiLFwiZXJyb3ItY29tcG9uZW50XCI6XCIyNGZlNjczOTA5N2JkMjk1OGZjZVwiLFwiY29udHJhY3RcIjpcImQ0OGJhMDQ4ODJmZGFmMzBkYTBlXCIsXCJtYXJrZXQtY291bnRkb3duLXRpbWVyXCI6XCI2YzdkZDY5ZTA4NjhiZmFmMDllOVwiLFwidmVuZG9ycy1ub2RlX21vZHVsZXNfZGVyaXZfcXVpbGwtaWNvbnNfZGlzdF9lc21fcmVhY3RfTGFiZWxQYWlyZWRfTGFiZWxQYWlyZWRDaGV2cm9uc0Rvd25DYXB0LWRlZTlhYVwiOlwiYTg5MmIwMzA0ODlhMDczMDk5NjdcIixcInNyY19Nb2R1bGVzX1RyYWRpbmdfQ29tcG9uZW50c19Gb3JtX1RyYWRlUGFyYW1zX0FjY3VtdWxhdG9yX2FjY3VtdWxhdG9ycy1pbmZvLWRpc3BsYXlfdHN4LXNyYy1hNzA4NmFcIjpcImEyMWY3MWE2OTQ2ZTI2MTRhYzJjXCIsXCJzY3JlZW4tc21hbGxcIjpcImM4NThiMjJjNDNkYzNlZDM4YmNhXCIsXCJzY3JlZW4tbGFyZ2VcIjpcImE2MGFmNTBiMzUxMDA3NDUxMDlkXCIsXCJzZXR0aW5ncy1jaGFydFwiOlwiYzc5MjhiNWZhMTI3MDM1YmU1MTJcIixcImFjY3VtdWxhdG9ycy10cmFkZS1kZXNjcmlwdGlvblwiOlwiYmE1YmZjNTA3MjIwMGMzYWM5NjRcIixcIm11bHRpcGxpZXJzLXRyYWRlLWRlc2NyaXB0aW9uXCI6XCJkNGIwMjk4MDZiZGM2MzA1Njk2OVwiLFwidmFuaWxsYXMtdHJhZGUtZGVzY3JpcHRpb25cIjpcIjA3MjVkYTk3OWY0ODU1NjllNDAyXCIsXCJ0dXJib3MtdHJhZGUtZGVzY3JpcHRpb25cIjpcImMyNDUxMDBjZTMwM2QxZTU4N2E3XCIsXCJyaXNlLWZhbGwtdHJhZGUtZGVzY3JpcHRpb25cIjpcImUzMjRiNmM3MDdjN2JiY2I5NjY3XCIsXCJoaWdoZXItbG93ZXItdHJhZGUtZGVzY3JpcHRpb25cIjpcIjUwNWVmNzAyNjU5OTliZjk0ZjAxXCIsXCJ0b3VjaC1uby10b3VjaC10cmFkZS1kZXNjcmlwdGlvblwiOlwiZGVkMDYxNjhmNWMxN2VmY2YxZTBcIixcIm1hdGNoZXMtZGlmZmVycy10cmFkZS1kZXNjcmlwdGlvblwiOlwiODg0YWFlNjFkZmNhMWVlYThhZDRcIixcImV2ZW4tb2RkLXRyYWRlLWRlc2NyaXB0aW9uXCI6XCJhYTc1ZjM5NGUyOTBkM2FiZGI2Y1wiLFwib3Zlci11bmRlci10cmFkZS1kZXNjcmlwdGlvblwiOlwiYWQzNzcyODdiNzBiMjgxMWM3NDZcIn1bY2h1bmtJZF0gKyBcIi5qc1wiO1xuLyoqKioqKi8gXHRcdH07XG4vKioqKioqLyBcdH0pKCk7XG4vKioqKioqLyBcdFxuLyoqKioqKi8gXHQvKiB3ZWJwYWNrL3J1bnRpbWUvZ2V0IG1pbmktY3NzIGNodW5rIGZpbGVuYW1lICovXG4vKioqKioqLyBcdCgoKSA9PiB7XG4vKioqKioqLyBcdFx0Ly8gVGhpcyBmdW5jdGlvbiBhbGxvdyB0byByZWZlcmVuY2UgYWxsIGNodW5rc1xuLyoqKioqKi8gXHRcdF9fd2VicGFja19yZXF1aXJlX18ubWluaUNzc0YgPSAoY2h1bmtJZCkgPT4ge1xuLyoqKioqKi8gXHRcdFx0Ly8gcmV0dXJuIHVybCBmb3IgZmlsZW5hbWVzIGJhc2VkIG9uIHRlbXBsYXRlXG4vKioqKioqLyBcdFx0XHRyZXR1cm4gXCJ0cmFkZXIvY3NzL3RyYWRlci5cIiArIGNodW5rSWQgKyBcIi5cIiArIHtcInZlbmRvcnMtbm9kZV9tb2R1bGVzX3JlYWN0LWNvbnRlbnQtbG9hZGVyX2Rpc3RfcmVhY3QtY29udGVudC1sb2FkZXJfZXNfanMtbm9kZV9tb2R1bGVzX3JlYWN0LS1jMTAxMzFcIjpcImQ2MzBmZWJhOGMyZTQyMmI5ZGI3XCIsXCJzcmNfc2Fzc19hcHBfc2Nzcy1zcmNfQXBwX0NvbXBvbmVudHNfRWxlbWVudHNfUG9zaXRpb25zRHJhd2VyX2hlbHBlcnNfaW5kZXhfdHMtc3JjX0FwcF9pbml0LXMtYmE1OGY4XCI6XCJjODYyYjJmZDYzZjUxZDNkNWM5ZFwiLFwidHJhZGVyLWFwcFwiOlwiNWRkYmMzMjQxYmQwOGQ0YzFmNDVcIixcInZlbmRvcnMtbm9kZV9tb2R1bGVzX2Nsb3VkZmxhcmVfc3RyZWFtLXJlYWN0X2Rpc3Rfc3RyZWFtLXJlYWN0X2VzbV9qcy1ub2RlX21vZHVsZXNfZGVyaXZfcXVpbC0xNDUxNDBcIjpcIjMxMjEyNzEzMmExODY5NTM3NmIzXCIsXCJ0cmFkZXItYXBwLXYyXCI6XCJlNDczMmE1ZjYzYzMwZWQwMmFhNlwiLFwidHJhZGUtbW9kYWxzXCI6XCJmOGU1NWExNjQ5Yzc3MGE5ODNlM1wiLFwic3JjX01vZHVsZXNfVHJhZGluZ19Db21wb25lbnRzX0Zvcm1fVHJhZGVQYXJhbXNfQWNjdW11bGF0b3JfYWNjdW11bGF0b3JzLWluZm8tZGlzcGxheV90c3gtc3JjLWE3MDg2YVwiOlwiNDliMjRjYWE0MmRjODI3ZWRhOTFcIixcInNjcmVlbi1zbWFsbFwiOlwiZjIxMzUyNDRiYmJlZDZlZGU0MzBcIn1bY2h1bmtJZF0gKyBcIi5jc3NcIjtcbi8qKioqKiovIFx0XHR9O1xuLyoqKioqKi8gXHR9KSgpO1xuLyoqKioqKi8gXHRcbi8qKioqKiovIFx0Lyogd2VicGFjay9ydW50aW1lL2dsb2JhbCAqL1xuLyoqKioqKi8gXHQoKCkgPT4ge1xuLyoqKioqKi8gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZyA9IChmdW5jdGlvbigpIHtcbi8qKioqKiovIFx0XHRcdGlmICh0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ29iamVjdCcpIHJldHVybiBnbG9iYWxUaGlzO1xuLyoqKioqKi8gXHRcdFx0dHJ5IHtcbi8qKioqKiovIFx0XHRcdFx0cmV0dXJuIHRoaXMgfHwgbmV3IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG4vKioqKioqLyBcdFx0XHR9IGNhdGNoIChlKSB7XG4vKioqKioqLyBcdFx0XHRcdGlmICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JykgcmV0dXJuIHdpbmRvdztcbi8qKioqKiovIFx0XHRcdH1cbi8qKioqKiovIFx0XHR9KSgpO1xuLyoqKioqKi8gXHR9KSgpO1xuLyoqKioqKi8gXHRcbi8qKioqKiovIFx0Lyogd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCAqL1xuLyoqKioqKi8gXHQoKCkgPT4ge1xuLyoqKioqKi8gXHRcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSlcbi8qKioqKiovIFx0fSkoKTtcbi8qKioqKiovIFx0XG4vKioqKioqLyBcdC8qIHdlYnBhY2svcnVudGltZS9sb2FkIHNjcmlwdCAqL1xuLyoqKioqKi8gXHQoKCkgPT4ge1xuLyoqKioqKi8gXHRcdHZhciBpblByb2dyZXNzID0ge307XG4vKioqKioqLyBcdFx0dmFyIGRhdGFXZWJwYWNrUHJlZml4ID0gXCJAZGVyaXYvdHJhZGVyOlwiO1xuLyoqKioqKi8gXHRcdC8vIGxvYWRTY3JpcHQgZnVuY3Rpb24gdG8gbG9hZCBhIHNjcmlwdCB2aWEgc2NyaXB0IHRhZ1xuLyoqKioqKi8gXHRcdF9fd2VicGFja19yZXF1aXJlX18ubCA9ICh1cmwsIGRvbmUsIGtleSwgY2h1bmtJZCkgPT4ge1xuLyoqKioqKi8gXHRcdFx0aWYoaW5Qcm9ncmVzc1t1cmxdKSB7IGluUHJvZ3Jlc3NbdXJsXS5wdXNoKGRvbmUpOyByZXR1cm47IH1cbi8qKioqKiovIFx0XHRcdHZhciBzY3JpcHQsIG5lZWRBdHRhY2g7XG4vKioqKioqLyBcdFx0XHRpZihrZXkgIT09IHVuZGVmaW5lZCkge1xuLyoqKioqKi8gXHRcdFx0XHR2YXIgc2NyaXB0cyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic2NyaXB0XCIpO1xuLyoqKioqKi8gXHRcdFx0XHRmb3IodmFyIGkgPSAwOyBpIDwgc2NyaXB0cy5sZW5ndGg7IGkrKykge1xuLyoqKioqKi8gXHRcdFx0XHRcdHZhciBzID0gc2NyaXB0c1tpXTtcbi8qKioqKiovIFx0XHRcdFx0XHRpZihzLmdldEF0dHJpYnV0ZShcInNyY1wiKSA9PSB1cmwgfHwgcy5nZXRBdHRyaWJ1dGUoXCJkYXRhLXdlYnBhY2tcIikgPT0gZGF0YVdlYnBhY2tQcmVmaXggKyBrZXkpIHsgc2NyaXB0ID0gczsgYnJlYWs7IH1cbi8qKioqKiovIFx0XHRcdFx0fVxuLyoqKioqKi8gXHRcdFx0fVxuLyoqKioqKi8gXHRcdFx0aWYoIXNjcmlwdCkge1xuLyoqKioqKi8gXHRcdFx0XHRuZWVkQXR0YWNoID0gdHJ1ZTtcbi8qKioqKiovIFx0XHRcdFx0c2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG4vKioqKioqLyBcdFx0XG4vKioqKioqLyBcdFx0XHRcdHNjcmlwdC5jaGFyc2V0ID0gJ3V0Zi04Jztcbi8qKioqKiovIFx0XHRcdFx0c2NyaXB0LnRpbWVvdXQgPSAxMjA7XG4vKioqKioqLyBcdFx0XHRcdGlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLm5jKSB7XG4vKioqKioqLyBcdFx0XHRcdFx0c2NyaXB0LnNldEF0dHJpYnV0ZShcIm5vbmNlXCIsIF9fd2VicGFja19yZXF1aXJlX18ubmMpO1xuLyoqKioqKi8gXHRcdFx0XHR9XG4vKioqKioqLyBcdFx0XHRcdHNjcmlwdC5zZXRBdHRyaWJ1dGUoXCJkYXRhLXdlYnBhY2tcIiwgZGF0YVdlYnBhY2tQcmVmaXggKyBrZXkpO1xuLyoqKioqKi8gXHRcdFxuLyoqKioqKi8gXHRcdFx0XHRzY3JpcHQuc3JjID0gdXJsO1xuLyoqKioqKi8gXHRcdFx0fVxuLyoqKioqKi8gXHRcdFx0aW5Qcm9ncmVzc1t1cmxdID0gW2RvbmVdO1xuLyoqKioqKi8gXHRcdFx0dmFyIG9uU2NyaXB0Q29tcGxldGUgPSAocHJldiwgZXZlbnQpID0+IHtcbi8qKioqKiovIFx0XHRcdFx0Ly8gYXZvaWQgbWVtIGxlYWtzIGluIElFLlxuLyoqKioqKi8gXHRcdFx0XHRzY3JpcHQub25lcnJvciA9IHNjcmlwdC5vbmxvYWQgPSBudWxsO1xuLyoqKioqKi8gXHRcdFx0XHRjbGVhclRpbWVvdXQodGltZW91dCk7XG4vKioqKioqLyBcdFx0XHRcdHZhciBkb25lRm5zID0gaW5Qcm9ncmVzc1t1cmxdO1xuLyoqKioqKi8gXHRcdFx0XHRkZWxldGUgaW5Qcm9ncmVzc1t1cmxdO1xuLyoqKioqKi8gXHRcdFx0XHRzY3JpcHQucGFyZW50Tm9kZSAmJiBzY3JpcHQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzY3JpcHQpO1xuLyoqKioqKi8gXHRcdFx0XHRkb25lRm5zICYmIGRvbmVGbnMuZm9yRWFjaCgoZm4pID0+IChmbihldmVudCkpKTtcbi8qKioqKiovIFx0XHRcdFx0aWYocHJldikgcmV0dXJuIHByZXYoZXZlbnQpO1xuLyoqKioqKi8gXHRcdFx0fVxuLyoqKioqKi8gXHRcdFx0dmFyIHRpbWVvdXQgPSBzZXRUaW1lb3V0KG9uU2NyaXB0Q29tcGxldGUuYmluZChudWxsLCB1bmRlZmluZWQsIHsgdHlwZTogJ3RpbWVvdXQnLCB0YXJnZXQ6IHNjcmlwdCB9KSwgMTIwMDAwKTtcbi8qKioqKiovIFx0XHRcdHNjcmlwdC5vbmVycm9yID0gb25TY3JpcHRDb21wbGV0ZS5iaW5kKG51bGwsIHNjcmlwdC5vbmVycm9yKTtcbi8qKioqKiovIFx0XHRcdHNjcmlwdC5vbmxvYWQgPSBvblNjcmlwdENvbXBsZXRlLmJpbmQobnVsbCwgc2NyaXB0Lm9ubG9hZCk7XG4vKioqKioqLyBcdFx0XHRuZWVkQXR0YWNoICYmIGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoc2NyaXB0KTtcbi8qKioqKiovIFx0XHR9O1xuLyoqKioqKi8gXHR9KSgpO1xuLyoqKioqKi8gXHRcbi8qKioqKiovIFx0Lyogd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCAqL1xuLyoqKioqKi8gXHQoKCkgPT4ge1xuLyoqKioqKi8gXHRcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbi8qKioqKiovIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSAoZXhwb3J0cykgPT4ge1xuLyoqKioqKi8gXHRcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4vKioqKioqLyBcdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuLyoqKioqKi8gXHRcdFx0fVxuLyoqKioqKi8gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8qKioqKiovIFx0XHR9O1xuLyoqKioqKi8gXHR9KSgpO1xuLyoqKioqKi8gXHRcbi8qKioqKiovIFx0Lyogd2VicGFjay9ydW50aW1lL25vZGUgbW9kdWxlIGRlY29yYXRvciAqL1xuLyoqKioqKi8gXHQoKCkgPT4ge1xuLyoqKioqKi8gXHRcdF9fd2VicGFja19yZXF1aXJlX18ubm1kID0gKG1vZHVsZSkgPT4ge1xuLyoqKioqKi8gXHRcdFx0bW9kdWxlLnBhdGhzID0gW107XG4vKioqKioqLyBcdFx0XHRpZiAoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XG4vKioqKioqLyBcdFx0XHRyZXR1cm4gbW9kdWxlO1xuLyoqKioqKi8gXHRcdH07XG4vKioqKioqLyBcdH0pKCk7XG4vKioqKioqLyBcdFxuLyoqKioqKi8gXHQvKiB3ZWJwYWNrL3J1bnRpbWUvcHVibGljUGF0aCAqL1xuLyoqKioqKi8gXHQoKCkgPT4ge1xuLyoqKioqKi8gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiL1wiO1xuLyoqKioqKi8gXHR9KSgpO1xuLyoqKioqKi8gXHRcbi8qKioqKiovIFx0Lyogd2VicGFjay9ydW50aW1lL2NzcyBsb2FkaW5nICovXG4vKioqKioqLyBcdCgoKSA9PiB7XG4vKioqKioqLyBcdFx0dmFyIGNyZWF0ZVN0eWxlc2hlZXQgPSAoY2h1bmtJZCwgZnVsbGhyZWYsIHJlc29sdmUsIHJlamVjdCkgPT4ge1xuLyoqKioqKi8gXHRcdFx0dmFyIGxpbmtUYWcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlua1wiKTtcbi8qKioqKiovIFx0XHRcbi8qKioqKiovIFx0XHRcdGxpbmtUYWcucmVsID0gXCJzdHlsZXNoZWV0XCI7XG4vKioqKioqLyBcdFx0XHRsaW5rVGFnLnR5cGUgPSBcInRleHQvY3NzXCI7XG4vKioqKioqLyBcdFx0XHR2YXIgb25MaW5rQ29tcGxldGUgPSAoZXZlbnQpID0+IHtcbi8qKioqKiovIFx0XHRcdFx0Ly8gYXZvaWQgbWVtIGxlYWtzLlxuLyoqKioqKi8gXHRcdFx0XHRsaW5rVGFnLm9uZXJyb3IgPSBsaW5rVGFnLm9ubG9hZCA9IG51bGw7XG4vKioqKioqLyBcdFx0XHRcdGlmIChldmVudC50eXBlID09PSAnbG9hZCcpIHtcbi8qKioqKiovIFx0XHRcdFx0XHRyZXNvbHZlKCk7XG4vKioqKioqLyBcdFx0XHRcdH0gZWxzZSB7XG4vKioqKioqLyBcdFx0XHRcdFx0dmFyIGVycm9yVHlwZSA9IGV2ZW50ICYmIChldmVudC50eXBlID09PSAnbG9hZCcgPyAnbWlzc2luZycgOiBldmVudC50eXBlKTtcbi8qKioqKiovIFx0XHRcdFx0XHR2YXIgcmVhbEhyZWYgPSBldmVudCAmJiBldmVudC50YXJnZXQgJiYgZXZlbnQudGFyZ2V0LmhyZWYgfHwgZnVsbGhyZWY7XG4vKioqKioqLyBcdFx0XHRcdFx0dmFyIGVyciA9IG5ldyBFcnJvcihcIkxvYWRpbmcgQ1NTIGNodW5rIFwiICsgY2h1bmtJZCArIFwiIGZhaWxlZC5cXG4oXCIgKyByZWFsSHJlZiArIFwiKVwiKTtcbi8qKioqKiovIFx0XHRcdFx0XHRlcnIuY29kZSA9IFwiQ1NTX0NIVU5LX0xPQURfRkFJTEVEXCI7XG4vKioqKioqLyBcdFx0XHRcdFx0ZXJyLnR5cGUgPSBlcnJvclR5cGU7XG4vKioqKioqLyBcdFx0XHRcdFx0ZXJyLnJlcXVlc3QgPSByZWFsSHJlZjtcbi8qKioqKiovIFx0XHRcdFx0XHRsaW5rVGFnLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobGlua1RhZylcbi8qKioqKiovIFx0XHRcdFx0XHRyZWplY3QoZXJyKTtcbi8qKioqKiovIFx0XHRcdFx0fVxuLyoqKioqKi8gXHRcdFx0fVxuLyoqKioqKi8gXHRcdFx0bGlua1RhZy5vbmVycm9yID0gbGlua1RhZy5vbmxvYWQgPSBvbkxpbmtDb21wbGV0ZTtcbi8qKioqKiovIFx0XHRcdGxpbmtUYWcuaHJlZiA9IGZ1bGxocmVmO1xuLyoqKioqKi8gXHRcdFxuLyoqKioqKi8gXHRcdFx0ZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChsaW5rVGFnKTtcbi8qKioqKiovIFx0XHRcdHJldHVybiBsaW5rVGFnO1xuLyoqKioqKi8gXHRcdH07XG4vKioqKioqLyBcdFx0dmFyIGZpbmRTdHlsZXNoZWV0ID0gKGhyZWYsIGZ1bGxocmVmKSA9PiB7XG4vKioqKioqLyBcdFx0XHR2YXIgZXhpc3RpbmdMaW5rVGFncyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwibGlua1wiKTtcbi8qKioqKiovIFx0XHRcdGZvcih2YXIgaSA9IDA7IGkgPCBleGlzdGluZ0xpbmtUYWdzLmxlbmd0aDsgaSsrKSB7XG4vKioqKioqLyBcdFx0XHRcdHZhciB0YWcgPSBleGlzdGluZ0xpbmtUYWdzW2ldO1xuLyoqKioqKi8gXHRcdFx0XHR2YXIgZGF0YUhyZWYgPSB0YWcuZ2V0QXR0cmlidXRlKFwiZGF0YS1ocmVmXCIpIHx8IHRhZy5nZXRBdHRyaWJ1dGUoXCJocmVmXCIpO1xuLyoqKioqKi8gXHRcdFx0XHRpZih0YWcucmVsID09PSBcInN0eWxlc2hlZXRcIiAmJiAoZGF0YUhyZWYgPT09IGhyZWYgfHwgZGF0YUhyZWYgPT09IGZ1bGxocmVmKSkgcmV0dXJuIHRhZztcbi8qKioqKiovIFx0XHRcdH1cbi8qKioqKiovIFx0XHRcdHZhciBleGlzdGluZ1N0eWxlVGFncyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic3R5bGVcIik7XG4vKioqKioqLyBcdFx0XHRmb3IodmFyIGkgPSAwOyBpIDwgZXhpc3RpbmdTdHlsZVRhZ3MubGVuZ3RoOyBpKyspIHtcbi8qKioqKiovIFx0XHRcdFx0dmFyIHRhZyA9IGV4aXN0aW5nU3R5bGVUYWdzW2ldO1xuLyoqKioqKi8gXHRcdFx0XHR2YXIgZGF0YUhyZWYgPSB0YWcuZ2V0QXR0cmlidXRlKFwiZGF0YS1ocmVmXCIpO1xuLyoqKioqKi8gXHRcdFx0XHRpZihkYXRhSHJlZiA9PT0gaHJlZiB8fCBkYXRhSHJlZiA9PT0gZnVsbGhyZWYpIHJldHVybiB0YWc7XG4vKioqKioqLyBcdFx0XHR9XG4vKioqKioqLyBcdFx0fTtcbi8qKioqKiovIFx0XHR2YXIgbG9hZFN0eWxlc2hlZXQgPSAoY2h1bmtJZCkgPT4ge1xuLyoqKioqKi8gXHRcdFx0cmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbi8qKioqKiovIFx0XHRcdFx0dmFyIGhyZWYgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm1pbmlDc3NGKGNodW5rSWQpO1xuLyoqKioqKi8gXHRcdFx0XHR2YXIgZnVsbGhyZWYgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLnAgKyBocmVmO1xuLyoqKioqKi8gXHRcdFx0XHRpZihmaW5kU3R5bGVzaGVldChocmVmLCBmdWxsaHJlZikpIHJldHVybiByZXNvbHZlKCk7XG4vKioqKioqLyBcdFx0XHRcdGNyZWF0ZVN0eWxlc2hlZXQoY2h1bmtJZCwgZnVsbGhyZWYsIHJlc29sdmUsIHJlamVjdCk7XG4vKioqKioqLyBcdFx0XHR9KTtcbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdFx0Ly8gb2JqZWN0IHRvIHN0b3JlIGxvYWRlZCBDU1MgY2h1bmtzXG4vKioqKioqLyBcdFx0dmFyIGluc3RhbGxlZENzc0NodW5rcyA9IHtcbi8qKioqKiovIFx0XHRcdFwidHJhZGVyXCI6IDBcbi8qKioqKiovIFx0XHR9O1xuLyoqKioqKi8gXHRcdFxuLyoqKioqKi8gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZi5taW5pQ3NzID0gKGNodW5rSWQsIHByb21pc2VzKSA9PiB7XG4vKioqKioqLyBcdFx0XHR2YXIgY3NzQ2h1bmtzID0ge1widmVuZG9ycy1ub2RlX21vZHVsZXNfcmVhY3QtY29udGVudC1sb2FkZXJfZGlzdF9yZWFjdC1jb250ZW50LWxvYWRlcl9lc19qcy1ub2RlX21vZHVsZXNfcmVhY3QtLWMxMDEzMVwiOjEsXCJzcmNfc2Fzc19hcHBfc2Nzcy1zcmNfQXBwX0NvbXBvbmVudHNfRWxlbWVudHNfUG9zaXRpb25zRHJhd2VyX2hlbHBlcnNfaW5kZXhfdHMtc3JjX0FwcF9pbml0LXMtYmE1OGY4XCI6MSxcInRyYWRlci1hcHBcIjoxLFwidmVuZG9ycy1ub2RlX21vZHVsZXNfY2xvdWRmbGFyZV9zdHJlYW0tcmVhY3RfZGlzdF9zdHJlYW0tcmVhY3RfZXNtX2pzLW5vZGVfbW9kdWxlc19kZXJpdl9xdWlsLTE0NTE0MFwiOjEsXCJ0cmFkZXItYXBwLXYyXCI6MSxcInRyYWRlLW1vZGFsc1wiOjEsXCJzcmNfTW9kdWxlc19UcmFkaW5nX0NvbXBvbmVudHNfRm9ybV9UcmFkZVBhcmFtc19BY2N1bXVsYXRvcl9hY2N1bXVsYXRvcnMtaW5mby1kaXNwbGF5X3RzeC1zcmMtYTcwODZhXCI6MSxcInNjcmVlbi1zbWFsbFwiOjF9O1xuLyoqKioqKi8gXHRcdFx0aWYoaW5zdGFsbGVkQ3NzQ2h1bmtzW2NodW5rSWRdKSBwcm9taXNlcy5wdXNoKGluc3RhbGxlZENzc0NodW5rc1tjaHVua0lkXSk7XG4vKioqKioqLyBcdFx0XHRlbHNlIGlmKGluc3RhbGxlZENzc0NodW5rc1tjaHVua0lkXSAhPT0gMCAmJiBjc3NDaHVua3NbY2h1bmtJZF0pIHtcbi8qKioqKiovIFx0XHRcdFx0cHJvbWlzZXMucHVzaChpbnN0YWxsZWRDc3NDaHVua3NbY2h1bmtJZF0gPSBsb2FkU3R5bGVzaGVldChjaHVua0lkKS50aGVuKCgpID0+IHtcbi8qKioqKiovIFx0XHRcdFx0XHRpbnN0YWxsZWRDc3NDaHVua3NbY2h1bmtJZF0gPSAwO1xuLyoqKioqKi8gXHRcdFx0XHR9LCAoZSkgPT4ge1xuLyoqKioqKi8gXHRcdFx0XHRcdGRlbGV0ZSBpbnN0YWxsZWRDc3NDaHVua3NbY2h1bmtJZF07XG4vKioqKioqLyBcdFx0XHRcdFx0dGhyb3cgZTtcbi8qKioqKiovIFx0XHRcdFx0fSkpO1xuLyoqKioqKi8gXHRcdFx0fVxuLyoqKioqKi8gXHRcdH07XG4vKioqKioqLyBcdFx0XG4vKioqKioqLyBcdFx0Ly8gbm8gaG1yXG4vKioqKioqLyBcdH0pKCk7XG4vKioqKioqLyBcdFxuLyoqKioqKi8gXHQvKiB3ZWJwYWNrL3J1bnRpbWUvanNvbnAgY2h1bmsgbG9hZGluZyAqL1xuLyoqKioqKi8gXHQoKCkgPT4ge1xuLyoqKioqKi8gXHRcdC8vIG5vIGJhc2VVUklcbi8qKioqKiovIFx0XHRcbi8qKioqKiovIFx0XHQvLyBvYmplY3QgdG8gc3RvcmUgbG9hZGVkIGFuZCBsb2FkaW5nIGNodW5rc1xuLyoqKioqKi8gXHRcdC8vIHVuZGVmaW5lZCA9IGNodW5rIG5vdCBsb2FkZWQsIG51bGwgPSBjaHVuayBwcmVsb2FkZWQvcHJlZmV0Y2hlZFxuLyoqKioqKi8gXHRcdC8vIFtyZXNvbHZlLCByZWplY3QsIFByb21pc2VdID0gY2h1bmsgbG9hZGluZywgMCA9IGNodW5rIGxvYWRlZFxuLyoqKioqKi8gXHRcdHZhciBpbnN0YWxsZWRDaHVua3MgPSB7XG4vKioqKioqLyBcdFx0XHRcInRyYWRlclwiOiAwXG4vKioqKioqLyBcdFx0fTtcbi8qKioqKiovIFx0XHRcbi8qKioqKiovIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmYuaiA9IChjaHVua0lkLCBwcm9taXNlcykgPT4ge1xuLyoqKioqKi8gXHRcdFx0XHQvLyBKU09OUCBjaHVuayBsb2FkaW5nIGZvciBqYXZhc2NyaXB0XG4vKioqKioqLyBcdFx0XHRcdHZhciBpbnN0YWxsZWRDaHVua0RhdGEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm8oaW5zdGFsbGVkQ2h1bmtzLCBjaHVua0lkKSA/IGluc3RhbGxlZENodW5rc1tjaHVua0lkXSA6IHVuZGVmaW5lZDtcbi8qKioqKiovIFx0XHRcdFx0aWYoaW5zdGFsbGVkQ2h1bmtEYXRhICE9PSAwKSB7IC8vIDAgbWVhbnMgXCJhbHJlYWR5IGluc3RhbGxlZFwiLlxuLyoqKioqKi8gXHRcdFxuLyoqKioqKi8gXHRcdFx0XHRcdC8vIGEgUHJvbWlzZSBtZWFucyBcImN1cnJlbnRseSBsb2FkaW5nXCIuXG4vKioqKioqLyBcdFx0XHRcdFx0aWYoaW5zdGFsbGVkQ2h1bmtEYXRhKSB7XG4vKioqKioqLyBcdFx0XHRcdFx0XHRwcm9taXNlcy5wdXNoKGluc3RhbGxlZENodW5rRGF0YVsyXSk7XG4vKioqKioqLyBcdFx0XHRcdFx0fSBlbHNlIHtcbi8qKioqKiovIFx0XHRcdFx0XHRcdGlmKHRydWUpIHsgLy8gYWxsIGNodW5rcyBoYXZlIEpTXG4vKioqKioqLyBcdFx0XHRcdFx0XHRcdC8vIHNldHVwIFByb21pc2UgaW4gY2h1bmsgY2FjaGVcbi8qKioqKiovIFx0XHRcdFx0XHRcdFx0dmFyIHByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiAoaW5zdGFsbGVkQ2h1bmtEYXRhID0gaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdID0gW3Jlc29sdmUsIHJlamVjdF0pKTtcbi8qKioqKiovIFx0XHRcdFx0XHRcdFx0cHJvbWlzZXMucHVzaChpbnN0YWxsZWRDaHVua0RhdGFbMl0gPSBwcm9taXNlKTtcbi8qKioqKiovIFx0XHRcbi8qKioqKiovIFx0XHRcdFx0XHRcdFx0Ly8gc3RhcnQgY2h1bmsgbG9hZGluZ1xuLyoqKioqKi8gXHRcdFx0XHRcdFx0XHR2YXIgdXJsID0gX193ZWJwYWNrX3JlcXVpcmVfXy5wICsgX193ZWJwYWNrX3JlcXVpcmVfXy51KGNodW5rSWQpO1xuLyoqKioqKi8gXHRcdFx0XHRcdFx0XHQvLyBjcmVhdGUgZXJyb3IgYmVmb3JlIHN0YWNrIHVud291bmQgdG8gZ2V0IHVzZWZ1bCBzdGFja3RyYWNlIGxhdGVyXG4vKioqKioqLyBcdFx0XHRcdFx0XHRcdHZhciBlcnJvciA9IG5ldyBFcnJvcigpO1xuLyoqKioqKi8gXHRcdFx0XHRcdFx0XHR2YXIgbG9hZGluZ0VuZGVkID0gKGV2ZW50KSA9PiB7XG4vKioqKioqLyBcdFx0XHRcdFx0XHRcdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGluc3RhbGxlZENodW5rcywgY2h1bmtJZCkpIHtcbi8qKioqKiovIFx0XHRcdFx0XHRcdFx0XHRcdGluc3RhbGxlZENodW5rRGF0YSA9IGluc3RhbGxlZENodW5rc1tjaHVua0lkXTtcbi8qKioqKiovIFx0XHRcdFx0XHRcdFx0XHRcdGlmKGluc3RhbGxlZENodW5rRGF0YSAhPT0gMCkgaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdID0gdW5kZWZpbmVkO1xuLyoqKioqKi8gXHRcdFx0XHRcdFx0XHRcdFx0aWYoaW5zdGFsbGVkQ2h1bmtEYXRhKSB7XG4vKioqKioqLyBcdFx0XHRcdFx0XHRcdFx0XHRcdHZhciBlcnJvclR5cGUgPSBldmVudCAmJiAoZXZlbnQudHlwZSA9PT0gJ2xvYWQnID8gJ21pc3NpbmcnIDogZXZlbnQudHlwZSk7XG4vKioqKioqLyBcdFx0XHRcdFx0XHRcdFx0XHRcdHZhciByZWFsU3JjID0gZXZlbnQgJiYgZXZlbnQudGFyZ2V0ICYmIGV2ZW50LnRhcmdldC5zcmM7XG4vKioqKioqLyBcdFx0XHRcdFx0XHRcdFx0XHRcdGVycm9yLm1lc3NhZ2UgPSAnTG9hZGluZyBjaHVuayAnICsgY2h1bmtJZCArICcgZmFpbGVkLlxcbignICsgZXJyb3JUeXBlICsgJzogJyArIHJlYWxTcmMgKyAnKSc7XG4vKioqKioqLyBcdFx0XHRcdFx0XHRcdFx0XHRcdGVycm9yLm5hbWUgPSAnQ2h1bmtMb2FkRXJyb3InO1xuLyoqKioqKi8gXHRcdFx0XHRcdFx0XHRcdFx0XHRlcnJvci50eXBlID0gZXJyb3JUeXBlO1xuLyoqKioqKi8gXHRcdFx0XHRcdFx0XHRcdFx0XHRlcnJvci5yZXF1ZXN0ID0gcmVhbFNyYztcbi8qKioqKiovIFx0XHRcdFx0XHRcdFx0XHRcdFx0aW5zdGFsbGVkQ2h1bmtEYXRhWzFdKGVycm9yKTtcbi8qKioqKiovIFx0XHRcdFx0XHRcdFx0XHRcdH1cbi8qKioqKiovIFx0XHRcdFx0XHRcdFx0XHR9XG4vKioqKioqLyBcdFx0XHRcdFx0XHRcdH07XG4vKioqKioqLyBcdFx0XHRcdFx0XHRcdF9fd2VicGFja19yZXF1aXJlX18ubCh1cmwsIGxvYWRpbmdFbmRlZCwgXCJjaHVuay1cIiArIGNodW5rSWQsIGNodW5rSWQpO1xuLyoqKioqKi8gXHRcdFx0XHRcdFx0fVxuLyoqKioqKi8gXHRcdFx0XHRcdH1cbi8qKioqKiovIFx0XHRcdFx0fVxuLyoqKioqKi8gXHRcdH07XG4vKioqKioqLyBcdFx0XG4vKioqKioqLyBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5GLmogPSAoY2h1bmtJZCkgPT4ge1xuLyoqKioqKi8gXHRcdFx0aWYoKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oaW5zdGFsbGVkQ2h1bmtzLCBjaHVua0lkKSB8fCBpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0gPT09IHVuZGVmaW5lZCkgJiYgdHJ1ZSkge1xuLyoqKioqKi8gXHRcdFx0XHRpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0gPSBudWxsO1xuLyoqKioqKi8gXHRcdFx0XHR2YXIgbGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpbmsnKTtcbi8qKioqKiovIFx0XHRcbi8qKioqKiovIFx0XHRcdFx0aWYgKF9fd2VicGFja19yZXF1aXJlX18ubmMpIHtcbi8qKioqKiovIFx0XHRcdFx0XHRsaW5rLnNldEF0dHJpYnV0ZShcIm5vbmNlXCIsIF9fd2VicGFja19yZXF1aXJlX18ubmMpO1xuLyoqKioqKi8gXHRcdFx0XHR9XG4vKioqKioqLyBcdFx0XHRcdGxpbmsucmVsID0gXCJwcmVmZXRjaFwiO1xuLyoqKioqKi8gXHRcdFx0XHRsaW5rLmFzID0gXCJzY3JpcHRcIjtcbi8qKioqKiovIFx0XHRcdFx0bGluay5ocmVmID0gX193ZWJwYWNrX3JlcXVpcmVfXy5wICsgX193ZWJwYWNrX3JlcXVpcmVfXy51KGNodW5rSWQpO1xuLyoqKioqKi8gXHRcdFx0XHRkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKGxpbmspO1xuLyoqKioqKi8gXHRcdFx0fVxuLyoqKioqKi8gXHRcdH07XG4vKioqKioqLyBcdFx0XG4vKioqKioqLyBcdFx0Ly8gbm8gcHJlbG9hZGVkXG4vKioqKioqLyBcdFx0XG4vKioqKioqLyBcdFx0Ly8gbm8gSE1SXG4vKioqKioqLyBcdFx0XG4vKioqKioqLyBcdFx0Ly8gbm8gSE1SIG1hbmlmZXN0XG4vKioqKioqLyBcdFx0XG4vKioqKioqLyBcdFx0Ly8gbm8gb24gY2h1bmtzIGxvYWRlZFxuLyoqKioqKi8gXHRcdFxuLyoqKioqKi8gXHRcdC8vIGluc3RhbGwgYSBKU09OUCBjYWxsYmFjayBmb3IgY2h1bmsgbG9hZGluZ1xuLyoqKioqKi8gXHRcdHZhciB3ZWJwYWNrSnNvbnBDYWxsYmFjayA9IChwYXJlbnRDaHVua0xvYWRpbmdGdW5jdGlvbiwgZGF0YSkgPT4ge1xuLyoqKioqKi8gXHRcdFx0dmFyIFtjaHVua0lkcywgbW9yZU1vZHVsZXMsIHJ1bnRpbWVdID0gZGF0YTtcbi8qKioqKiovIFx0XHRcdC8vIGFkZCBcIm1vcmVNb2R1bGVzXCIgdG8gdGhlIG1vZHVsZXMgb2JqZWN0LFxuLyoqKioqKi8gXHRcdFx0Ly8gdGhlbiBmbGFnIGFsbCBcImNodW5rSWRzXCIgYXMgbG9hZGVkIGFuZCBmaXJlIGNhbGxiYWNrXG4vKioqKioqLyBcdFx0XHR2YXIgbW9kdWxlSWQsIGNodW5rSWQsIGkgPSAwO1xuLyoqKioqKi8gXHRcdFx0aWYoY2h1bmtJZHMuc29tZSgoaWQpID0+IChpbnN0YWxsZWRDaHVua3NbaWRdICE9PSAwKSkpIHtcbi8qKioqKiovIFx0XHRcdFx0Zm9yKG1vZHVsZUlkIGluIG1vcmVNb2R1bGVzKSB7XG4vKioqKioqLyBcdFx0XHRcdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKG1vcmVNb2R1bGVzLCBtb2R1bGVJZCkpIHtcbi8qKioqKiovIFx0XHRcdFx0XHRcdF9fd2VicGFja19yZXF1aXJlX18ubVttb2R1bGVJZF0gPSBtb3JlTW9kdWxlc1ttb2R1bGVJZF07XG4vKioqKioqLyBcdFx0XHRcdFx0fVxuLyoqKioqKi8gXHRcdFx0XHR9XG4vKioqKioqLyBcdFx0XHRcdGlmKHJ1bnRpbWUpIHZhciByZXN1bHQgPSBydW50aW1lKF9fd2VicGFja19yZXF1aXJlX18pO1xuLyoqKioqKi8gXHRcdFx0fVxuLyoqKioqKi8gXHRcdFx0aWYocGFyZW50Q2h1bmtMb2FkaW5nRnVuY3Rpb24pIHBhcmVudENodW5rTG9hZGluZ0Z1bmN0aW9uKGRhdGEpO1xuLyoqKioqKi8gXHRcdFx0Zm9yKDtpIDwgY2h1bmtJZHMubGVuZ3RoOyBpKyspIHtcbi8qKioqKiovIFx0XHRcdFx0Y2h1bmtJZCA9IGNodW5rSWRzW2ldO1xuLyoqKioqKi8gXHRcdFx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oaW5zdGFsbGVkQ2h1bmtzLCBjaHVua0lkKSAmJiBpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0pIHtcbi8qKioqKiovIFx0XHRcdFx0XHRpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF1bMF0oKTtcbi8qKioqKiovIFx0XHRcdFx0fVxuLyoqKioqKi8gXHRcdFx0XHRpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0gPSAwO1xuLyoqKioqKi8gXHRcdFx0fVxuLyoqKioqKi8gXHRcdFxuLyoqKioqKi8gXHRcdH1cbi8qKioqKiovIFx0XHRcbi8qKioqKiovIFx0XHR2YXIgY2h1bmtMb2FkaW5nR2xvYmFsID0gc2VsZltcIndlYnBhY2tDaHVua19kZXJpdl90cmFkZXJcIl0gPSBzZWxmW1wid2VicGFja0NodW5rX2Rlcml2X3RyYWRlclwiXSB8fCBbXTtcbi8qKioqKiovIFx0XHRjaHVua0xvYWRpbmdHbG9iYWwuZm9yRWFjaCh3ZWJwYWNrSnNvbnBDYWxsYmFjay5iaW5kKG51bGwsIDApKTtcbi8qKioqKiovIFx0XHRjaHVua0xvYWRpbmdHbG9iYWwucHVzaCA9IHdlYnBhY2tKc29ucENhbGxiYWNrLmJpbmQobnVsbCwgY2h1bmtMb2FkaW5nR2xvYmFsLnB1c2guYmluZChjaHVua0xvYWRpbmdHbG9iYWwpKTtcbi8qKioqKiovIFx0fSkoKTtcbi8qKioqKiovIFx0XG4vKioqKioqLyBcdC8qIHdlYnBhY2svcnVudGltZS9jaHVuayBwcmVmZXRjaCB0cmlnZ2VyICovXG4vKioqKioqLyBcdCgoKSA9PiB7XG4vKioqKioqLyBcdFx0dmFyIGNodW5rVG9DaGlsZHJlbk1hcCA9IHtcbi8qKioqKiovIFx0XHRcdFwidHJhZGVyLWFwcFwiOiBbXG4vKioqKioqLyBcdFx0XHRcdFwidHJhZGUtbW9kYWxzXCIsXG4vKioqKioqLyBcdFx0XHRcdFwic2V0dGluZ3MtY2hhcnRcIlxuLyoqKioqKi8gXHRcdFx0XVxuLyoqKioqKi8gXHRcdH07XG4vKioqKioqLyBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5mLnByZWZldGNoID0gKGNodW5rSWQsIHByb21pc2VzKSA9PiAoUHJvbWlzZS5hbGwocHJvbWlzZXMpLnRoZW4oKCkgPT4ge1xuLyoqKioqKi8gXHRcdFx0dmFyIGNodW5rcyA9IGNodW5rVG9DaGlsZHJlbk1hcFtjaHVua0lkXTtcbi8qKioqKiovIFx0XHRcdEFycmF5LmlzQXJyYXkoY2h1bmtzKSAmJiBjaHVua3MubWFwKF9fd2VicGFja19yZXF1aXJlX18uRSk7XG4vKioqKioqLyBcdFx0fSkpO1xuLyoqKioqKi8gXHR9KSgpO1xuLyoqKioqKi8gXHRcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqKioqLyBcdFxuLyoqKioqKi8gXHQvLyBtb2R1bGUgZmFjdG9yaWVzIGFyZSB1c2VkIHNvIGVudHJ5IGlubGluaW5nIGlzIGRpc2FibGVkXG4vKioqKioqLyBcdC8vIHN0YXJ0dXBcbi8qKioqKiovIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4vKioqKioqLyBcdHZhciBfX3dlYnBhY2tfZXhwb3J0c19fID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vc3JjL2luZGV4LnRzeFwiKTtcbi8qKioqKiovIFx0X193ZWJwYWNrX2V4cG9ydHNfXyA9IF9fd2VicGFja19leHBvcnRzX19bXCJkZWZhdWx0XCJdO1xuLyoqKioqKi8gXHRcbi8qKioqKiovIFx0cmV0dXJuIF9fd2VicGFja19leHBvcnRzX187XG4vKioqKioqLyB9KSgpXG47XG59KTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../../trader/dist/trader/js/trader.js\n'
                );

                /***/
            },
    },
]);
