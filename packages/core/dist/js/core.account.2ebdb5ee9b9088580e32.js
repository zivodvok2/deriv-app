/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self['webpackChunk'] = self['webpackChunk'] || []).push([
    ['account'],
    {
        /***/ '../../account/dist/account/js/account.js':
            /*!************************************************!*\
  !*** ../../account/dist/account/js/account.js ***!
  \************************************************/
            /***/ (module, __unused_webpack_exports, __webpack_require__) => {
                eval(
                    "/*\n * ATTENTION: An \"eval-source-map\" devtool has been used.\n * This devtool is neither made for production nor for readable output files.\n * It uses \"eval()\" calls to create a separate source file with attached SourceMaps in the browser devtools.\n * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)\n * or disable the default devtool with \"devtool: false\".\n * If you are looking for production-ready output files, see mode: \"production\" (https://webpack.js.org/configuration/mode/).\n */\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(true)\n\t\tmodule.exports = factory(__webpack_require__(/*! @deriv-com/analytics */ \"../../../node_modules/@deriv-com/analytics/lib/index.js\"), __webpack_require__(/*! @deriv-com/translations */ \"../../../node_modules/@deriv-com/translations/dist/index.js\"), __webpack_require__(/*! @deriv-com/utils */ \"../../../node_modules/@deriv-com/utils/dist/deriv-utils.umd.cjs\"), __webpack_require__(/*! @deriv/api */ \"../../api/src/index.ts\"), __webpack_require__(/*! @deriv/components */ \"../../components/src/index.ts\"), __webpack_require__(/*! @deriv/hooks */ \"../../hooks/src/index.ts\"), __webpack_require__(/*! @deriv/quill-icons */ \"../../../node_modules/@deriv/quill-icons/dist/cjs/index.js\"), __webpack_require__(/*! @deriv/shared */ \"../../shared/src/index.ts\"), __webpack_require__(/*! @deriv/shared/src/utils/routes/routes */ \"../../shared/src/utils/routes/routes.ts\"), __webpack_require__(/*! @deriv/stores */ \"../../stores/src/index.ts\"), __webpack_require__(/*! @deriv/translations */ \"../../translations/src/index.js\"), __webpack_require__(/*! @deriv/utils */ \"../../utils/src/index.ts\"), __webpack_require__(/*! formik */ \"../../../node_modules/formik/dist/formik.esm.js\"), __webpack_require__(/*! react */ \"../../../node_modules/react/index.js\"), __webpack_require__(/*! react-dom */ \"../../../node_modules/react-dom/index.js\"), __webpack_require__(/*! react-router */ \"../../../node_modules/react-router/esm/react-router.js\"), __webpack_require__(/*! react-router-dom */ \"../../../node_modules/react-router-dom/esm/react-router-dom.js\"));\n\telse {}\n})(self, (__WEBPACK_EXTERNAL_MODULE__deriv_com_analytics__, __WEBPACK_EXTERNAL_MODULE__deriv_com_translations__, __WEBPACK_EXTERNAL_MODULE__deriv_com_utils__, __WEBPACK_EXTERNAL_MODULE__deriv_api__, __WEBPACK_EXTERNAL_MODULE__deriv_components__, __WEBPACK_EXTERNAL_MODULE__deriv_hooks__, __WEBPACK_EXTERNAL_MODULE__deriv_quill_icons__, __WEBPACK_EXTERNAL_MODULE__deriv_shared__, __WEBPACK_EXTERNAL_MODULE__deriv_shared_src_utils_routes_routes__, __WEBPACK_EXTERNAL_MODULE__deriv_stores__, __WEBPACK_EXTERNAL_MODULE__deriv_translations__, __WEBPACK_EXTERNAL_MODULE__deriv_utils__, __WEBPACK_EXTERNAL_MODULE_formik__, __WEBPACK_EXTERNAL_MODULE_react__, __WEBPACK_EXTERNAL_MODULE_react_dom__, __WEBPACK_EXTERNAL_MODULE_react_router__, __WEBPACK_EXTERNAL_MODULE_react_router_dom__) => {\nreturn /******/ (() => { // webpackBootstrap\n/******/ \t\"use strict\";\n/******/ \tvar __webpack_modules__ = ({\n\n/***/ \"./index.tsx\":\n/*!*******************!*\\\n  !*** ./index.tsx ***!\n  \\*******************/\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\n/* harmony export */   \\\"default\\\": () => (__WEBPACK_DEFAULT_EXPORT__)\\n/* harmony export */ });\\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \\\"react\\\");\\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\\n/* harmony import */ var _deriv_shared__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @deriv/shared */ \\\"@deriv/shared\\\");\\n/* harmony import */ var _deriv_shared__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_deriv_shared__WEBPACK_IMPORTED_MODULE_1__);\\n/* harmony import */ var _deriv_components__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @deriv/components */ \\\"@deriv/components\\\");\\n/* harmony import */ var _deriv_components__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_deriv_components__WEBPACK_IMPORTED_MODULE_2__);\\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react/jsx-runtime */ \\\"../../../node_modules/react/jsx-runtime.js\\\");\\n\\n\\n\\n\\nconst App = (0,_deriv_shared__WEBPACK_IMPORTED_MODULE_1__.makeLazyLoader)(() => (0,_deriv_shared__WEBPACK_IMPORTED_MODULE_1__.moduleLoader)(() => Promise.all(/*! import() | account-app */[__webpack_require__.e(\\\"vendors-node_modules_binary-com_binary-document-uploader_DocumentUploader_js-node_modules_day-ab5b6c\\\"), __webpack_require__.e(\\\"account-app\\\")]).then(__webpack_require__.bind(__webpack_require__, /*! ./App */ \\\"./App.tsx\\\"))), () => /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_deriv_components__WEBPACK_IMPORTED_MODULE_2__.Loading, {}))();\\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (App);//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9pbmRleC50c3giLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUVBO0FBS0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZGVyaXYvYWNjb3VudC8uL2luZGV4LnRzeD9mZTFiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBtYWtlTGF6eUxvYWRlciwgbW9kdWxlTG9hZGVyIH0gZnJvbSAnQGRlcml2L3NoYXJlZCc7XG5pbXBvcnQgeyBMb2FkaW5nIH0gZnJvbSAnQGRlcml2L2NvbXBvbmVudHMnO1xuXG5jb25zdCBBcHAgPSBtYWtlTGF6eUxvYWRlcihcbiAgICAoKSA9PiBtb2R1bGVMb2FkZXIoKCkgPT4gaW1wb3J0KC8qIHdlYnBhY2tDaHVua05hbWU6IFwiYWNjb3VudC1hcHBcIiwgd2VicGFja1ByZWxvYWQ6IHRydWUgKi8gJy4vQXBwJykpLFxuICAgICgpID0+IDxMb2FkaW5nIC8+XG4pKCk7XG5cbmV4cG9ydCBkZWZhdWx0IEFwcDtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///./index.tsx\\n\");\n\n/***/ }),\n\n/***/ \"../../../node_modules/object-assign/index.js\":\n/*!****************************************************!*\\\n  !*** ../../../node_modules/object-assign/index.js ***!\n  \\****************************************************/\n/***/ ((module) => {\n\neval(\"/*\\nobject-assign\\n(c) Sindre Sorhus\\n@license MIT\\n*/\\n\\n\\n/* eslint-disable no-unused-vars */\\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\\nvar propIsEnumerable = Object.prototype.propertyIsEnumerable;\\n\\nfunction toObject(val) {\\n\\tif (val === null || val === undefined) {\\n\\t\\tthrow new TypeError('Object.assign cannot be called with null or undefined');\\n\\t}\\n\\n\\treturn Object(val);\\n}\\n\\nfunction shouldUseNative() {\\n\\ttry {\\n\\t\\tif (!Object.assign) {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\t// Detect buggy property enumeration order in older V8 versions.\\n\\n\\t\\t// https://bugs.chromium.org/p/v8/issues/detail?id=4118\\n\\t\\tvar test1 = new String('abc');  // eslint-disable-line no-new-wrappers\\n\\t\\ttest1[5] = 'de';\\n\\t\\tif (Object.getOwnPropertyNames(test1)[0] === '5') {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\\n\\t\\tvar test2 = {};\\n\\t\\tfor (var i = 0; i < 10; i++) {\\n\\t\\t\\ttest2['_' + String.fromCharCode(i)] = i;\\n\\t\\t}\\n\\t\\tvar order2 = Object.getOwnPropertyNames(test2).map(function (n) {\\n\\t\\t\\treturn test2[n];\\n\\t\\t});\\n\\t\\tif (order2.join('') !== '0123456789') {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\\n\\t\\tvar test3 = {};\\n\\t\\t'abcdefghijklmnopqrst'.split('').forEach(function (letter) {\\n\\t\\t\\ttest3[letter] = letter;\\n\\t\\t});\\n\\t\\tif (Object.keys(Object.assign({}, test3)).join('') !==\\n\\t\\t\\t\\t'abcdefghijklmnopqrst') {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\treturn true;\\n\\t} catch (err) {\\n\\t\\t// We don't expect any of the above to throw, but better to be safe.\\n\\t\\treturn false;\\n\\t}\\n}\\n\\nmodule.exports = shouldUseNative() ? Object.assign : function (target, source) {\\n\\tvar from;\\n\\tvar to = toObject(target);\\n\\tvar symbols;\\n\\n\\tfor (var s = 1; s < arguments.length; s++) {\\n\\t\\tfrom = Object(arguments[s]);\\n\\n\\t\\tfor (var key in from) {\\n\\t\\t\\tif (hasOwnProperty.call(from, key)) {\\n\\t\\t\\t\\tto[key] = from[key];\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (getOwnPropertySymbols) {\\n\\t\\t\\tsymbols = getOwnPropertySymbols(from);\\n\\t\\t\\tfor (var i = 0; i < symbols.length; i++) {\\n\\t\\t\\t\\tif (propIsEnumerable.call(from, symbols[i])) {\\n\\t\\t\\t\\t\\tto[symbols[i]] = from[symbols[i]];\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn to;\\n};\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL29iamVjdC1hc3NpZ24vaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGRlcml2L2FjY291bnQvLi4vLi4vLi4vbm9kZV9tb2R1bGVzL29iamVjdC1hc3NpZ24vaW5kZXguanM/M2UxMyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxub2JqZWN0LWFzc2lnblxuKGMpIFNpbmRyZSBTb3JodXNcbkBsaWNlbnNlIE1JVFxuKi9cblxuJ3VzZSBzdHJpY3QnO1xuLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBwcm9wSXNFbnVtZXJhYmxlID0gT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxuZnVuY3Rpb24gdG9PYmplY3QodmFsKSB7XG5cdGlmICh2YWwgPT09IG51bGwgfHwgdmFsID09PSB1bmRlZmluZWQpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdPYmplY3QuYXNzaWduIGNhbm5vdCBiZSBjYWxsZWQgd2l0aCBudWxsIG9yIHVuZGVmaW5lZCcpO1xuXHR9XG5cblx0cmV0dXJuIE9iamVjdCh2YWwpO1xufVxuXG5mdW5jdGlvbiBzaG91bGRVc2VOYXRpdmUoKSB7XG5cdHRyeSB7XG5cdFx0aWYgKCFPYmplY3QuYXNzaWduKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZWN0IGJ1Z2d5IHByb3BlcnR5IGVudW1lcmF0aW9uIG9yZGVyIGluIG9sZGVyIFY4IHZlcnNpb25zLlxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9NDExOFxuXHRcdHZhciB0ZXN0MSA9IG5ldyBTdHJpbmcoJ2FiYycpOyAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXctd3JhcHBlcnNcblx0XHR0ZXN0MVs1XSA9ICdkZSc7XG5cdFx0aWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QxKVswXSA9PT0gJzUnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxuXHRcdHZhciB0ZXN0MiA9IHt9O1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgMTA7IGkrKykge1xuXHRcdFx0dGVzdDJbJ18nICsgU3RyaW5nLmZyb21DaGFyQ29kZShpKV0gPSBpO1xuXHRcdH1cblx0XHR2YXIgb3JkZXIyID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDIpLm1hcChmdW5jdGlvbiAobikge1xuXHRcdFx0cmV0dXJuIHRlc3QyW25dO1xuXHRcdH0pO1xuXHRcdGlmIChvcmRlcjIuam9pbignJykgIT09ICcwMTIzNDU2Nzg5Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDMgPSB7fTtcblx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnLnNwbGl0KCcnKS5mb3JFYWNoKGZ1bmN0aW9uIChsZXR0ZXIpIHtcblx0XHRcdHRlc3QzW2xldHRlcl0gPSBsZXR0ZXI7XG5cdFx0fSk7XG5cdFx0aWYgKE9iamVjdC5rZXlzKE9iamVjdC5hc3NpZ24oe30sIHRlc3QzKSkuam9pbignJykgIT09XG5cdFx0XHRcdCdhYmNkZWZnaGlqa2xtbm9wcXJzdCcpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0Ly8gV2UgZG9uJ3QgZXhwZWN0IGFueSBvZiB0aGUgYWJvdmUgdG8gdGhyb3csIGJ1dCBiZXR0ZXIgdG8gYmUgc2FmZS5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzaG91bGRVc2VOYXRpdmUoKSA/IE9iamVjdC5hc3NpZ24gOiBmdW5jdGlvbiAodGFyZ2V0LCBzb3VyY2UpIHtcblx0dmFyIGZyb207XG5cdHZhciB0byA9IHRvT2JqZWN0KHRhcmdldCk7XG5cdHZhciBzeW1ib2xzO1xuXG5cdGZvciAodmFyIHMgPSAxOyBzIDwgYXJndW1lbnRzLmxlbmd0aDsgcysrKSB7XG5cdFx0ZnJvbSA9IE9iamVjdChhcmd1bWVudHNbc10pO1xuXG5cdFx0Zm9yICh2YXIga2V5IGluIGZyb20pIHtcblx0XHRcdGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKGZyb20sIGtleSkpIHtcblx0XHRcdFx0dG9ba2V5XSA9IGZyb21ba2V5XTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG5cdFx0XHRzeW1ib2xzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGZyb20pO1xuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzeW1ib2xzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdGlmIChwcm9wSXNFbnVtZXJhYmxlLmNhbGwoZnJvbSwgc3ltYm9sc1tpXSkpIHtcblx0XHRcdFx0XHR0b1tzeW1ib2xzW2ldXSA9IGZyb21bc3ltYm9sc1tpXV07XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gdG87XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///../../../node_modules/object-assign/index.js\\n\");\n\n/***/ }),\n\n/***/ \"../../../node_modules/react/cjs/react-jsx-runtime.development.js\":\n/*!************************************************************************!*\\\n  !*** ../../../node_modules/react/cjs/react-jsx-runtime.development.js ***!\n  \\************************************************************************/\n/***/ ((__unused_webpack_module, exports, __webpack_require__) => {\n\neval(\"/** @license React v17.0.2\\n * react-jsx-runtime.development.js\\n *\\n * Copyright (c) Facebook, Inc. and its affiliates.\\n *\\n * This source code is licensed under the MIT license found in the\\n * LICENSE file in the root directory of this source tree.\\n */\\n\\n\\n\\nif (true) {\\n  (function() {\\n'use strict';\\n\\nvar React = __webpack_require__(/*! react */ \\\"react\\\");\\nvar _assign = __webpack_require__(/*! object-assign */ \\\"../../../node_modules/object-assign/index.js\\\");\\n\\n// ATTENTION\\n// When adding new symbols to this file,\\n// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\\n// The Symbol used to tag the ReactElement-like types. If there is no native Symbol\\n// nor polyfill, then a plain number is used for performance.\\nvar REACT_ELEMENT_TYPE = 0xeac7;\\nvar REACT_PORTAL_TYPE = 0xeaca;\\nexports.Fragment = 0xeacb;\\nvar REACT_STRICT_MODE_TYPE = 0xeacc;\\nvar REACT_PROFILER_TYPE = 0xead2;\\nvar REACT_PROVIDER_TYPE = 0xeacd;\\nvar REACT_CONTEXT_TYPE = 0xeace;\\nvar REACT_FORWARD_REF_TYPE = 0xead0;\\nvar REACT_SUSPENSE_TYPE = 0xead1;\\nvar REACT_SUSPENSE_LIST_TYPE = 0xead8;\\nvar REACT_MEMO_TYPE = 0xead3;\\nvar REACT_LAZY_TYPE = 0xead4;\\nvar REACT_BLOCK_TYPE = 0xead9;\\nvar REACT_SERVER_BLOCK_TYPE = 0xeada;\\nvar REACT_FUNDAMENTAL_TYPE = 0xead5;\\nvar REACT_SCOPE_TYPE = 0xead7;\\nvar REACT_OPAQUE_ID_TYPE = 0xeae0;\\nvar REACT_DEBUG_TRACING_MODE_TYPE = 0xeae1;\\nvar REACT_OFFSCREEN_TYPE = 0xeae2;\\nvar REACT_LEGACY_HIDDEN_TYPE = 0xeae3;\\n\\nif (typeof Symbol === 'function' && Symbol.for) {\\n  var symbolFor = Symbol.for;\\n  REACT_ELEMENT_TYPE = symbolFor('react.element');\\n  REACT_PORTAL_TYPE = symbolFor('react.portal');\\n  exports.Fragment = symbolFor('react.fragment');\\n  REACT_STRICT_MODE_TYPE = symbolFor('react.strict_mode');\\n  REACT_PROFILER_TYPE = symbolFor('react.profiler');\\n  REACT_PROVIDER_TYPE = symbolFor('react.provider');\\n  REACT_CONTEXT_TYPE = symbolFor('react.context');\\n  REACT_FORWARD_REF_TYPE = symbolFor('react.forward_ref');\\n  REACT_SUSPENSE_TYPE = symbolFor('react.suspense');\\n  REACT_SUSPENSE_LIST_TYPE = symbolFor('react.suspense_list');\\n  REACT_MEMO_TYPE = symbolFor('react.memo');\\n  REACT_LAZY_TYPE = symbolFor('react.lazy');\\n  REACT_BLOCK_TYPE = symbolFor('react.block');\\n  REACT_SERVER_BLOCK_TYPE = symbolFor('react.server.block');\\n  REACT_FUNDAMENTAL_TYPE = symbolFor('react.fundamental');\\n  REACT_SCOPE_TYPE = symbolFor('react.scope');\\n  REACT_OPAQUE_ID_TYPE = symbolFor('react.opaque.id');\\n  REACT_DEBUG_TRACING_MODE_TYPE = symbolFor('react.debug_trace_mode');\\n  REACT_OFFSCREEN_TYPE = symbolFor('react.offscreen');\\n  REACT_LEGACY_HIDDEN_TYPE = symbolFor('react.legacy_hidden');\\n}\\n\\nvar MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;\\nvar FAUX_ITERATOR_SYMBOL = '@@iterator';\\nfunction getIteratorFn(maybeIterable) {\\n  if (maybeIterable === null || typeof maybeIterable !== 'object') {\\n    return null;\\n  }\\n\\n  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];\\n\\n  if (typeof maybeIterator === 'function') {\\n    return maybeIterator;\\n  }\\n\\n  return null;\\n}\\n\\nvar ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\\n\\nfunction error(format) {\\n  {\\n    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\\n      args[_key2 - 1] = arguments[_key2];\\n    }\\n\\n    printWarning('error', format, args);\\n  }\\n}\\n\\nfunction printWarning(level, format, args) {\\n  // When changing this logic, you might want to also\\n  // update consoleWithStackDev.www.js as well.\\n  {\\n    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\\n    var stack = ReactDebugCurrentFrame.getStackAddendum();\\n\\n    if (stack !== '') {\\n      format += '%s';\\n      args = args.concat([stack]);\\n    }\\n\\n    var argsWithFormat = args.map(function (item) {\\n      return '' + item;\\n    }); // Careful: RN currently depends on this prefix\\n\\n    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it\\n    // breaks IE9: https://github.com/facebook/react/issues/13610\\n    // eslint-disable-next-line react-internal/no-production-logging\\n\\n    Function.prototype.apply.call(console[level], console, argsWithFormat);\\n  }\\n}\\n\\n// Filter certain DOM attributes (e.g. src, href) if their values are empty strings.\\n\\nvar enableScopeAPI = false; // Experimental Create Event Handle API.\\n\\nfunction isValidElementType(type) {\\n  if (typeof type === 'string' || typeof type === 'function') {\\n    return true;\\n  } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).\\n\\n\\n  if (type === exports.Fragment || type === REACT_PROFILER_TYPE || type === REACT_DEBUG_TRACING_MODE_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_LEGACY_HIDDEN_TYPE || enableScopeAPI ) {\\n    return true;\\n  }\\n\\n  if (typeof type === 'object' && type !== null) {\\n    if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_BLOCK_TYPE || type[0] === REACT_SERVER_BLOCK_TYPE) {\\n      return true;\\n    }\\n  }\\n\\n  return false;\\n}\\n\\nfunction getWrappedName(outerType, innerType, wrapperName) {\\n  var functionName = innerType.displayName || innerType.name || '';\\n  return outerType.displayName || (functionName !== '' ? wrapperName + \\\"(\\\" + functionName + \\\")\\\" : wrapperName);\\n}\\n\\nfunction getContextName(type) {\\n  return type.displayName || 'Context';\\n}\\n\\nfunction getComponentName(type) {\\n  if (type == null) {\\n    // Host root, text node or just invalid type.\\n    return null;\\n  }\\n\\n  {\\n    if (typeof type.tag === 'number') {\\n      error('Received an unexpected object in getComponentName(). ' + 'This is likely a bug in React. Please file an issue.');\\n    }\\n  }\\n\\n  if (typeof type === 'function') {\\n    return type.displayName || type.name || null;\\n  }\\n\\n  if (typeof type === 'string') {\\n    return type;\\n  }\\n\\n  switch (type) {\\n    case exports.Fragment:\\n      return 'Fragment';\\n\\n    case REACT_PORTAL_TYPE:\\n      return 'Portal';\\n\\n    case REACT_PROFILER_TYPE:\\n      return 'Profiler';\\n\\n    case REACT_STRICT_MODE_TYPE:\\n      return 'StrictMode';\\n\\n    case REACT_SUSPENSE_TYPE:\\n      return 'Suspense';\\n\\n    case REACT_SUSPENSE_LIST_TYPE:\\n      return 'SuspenseList';\\n  }\\n\\n  if (typeof type === 'object') {\\n    switch (type.$$typeof) {\\n      case REACT_CONTEXT_TYPE:\\n        var context = type;\\n        return getContextName(context) + '.Consumer';\\n\\n      case REACT_PROVIDER_TYPE:\\n        var provider = type;\\n        return getContextName(provider._context) + '.Provider';\\n\\n      case REACT_FORWARD_REF_TYPE:\\n        return getWrappedName(type, type.render, 'ForwardRef');\\n\\n      case REACT_MEMO_TYPE:\\n        return getComponentName(type.type);\\n\\n      case REACT_BLOCK_TYPE:\\n        return getComponentName(type._render);\\n\\n      case REACT_LAZY_TYPE:\\n        {\\n          var lazyComponent = type;\\n          var payload = lazyComponent._payload;\\n          var init = lazyComponent._init;\\n\\n          try {\\n            return getComponentName(init(payload));\\n          } catch (x) {\\n            return null;\\n          }\\n        }\\n    }\\n  }\\n\\n  return null;\\n}\\n\\n// Helpers to patch console.logs to avoid logging during side-effect free\\n// replaying on render function. This currently only patches the object\\n// lazily which won't cover if the log function was extracted eagerly.\\n// We could also eagerly patch the method.\\nvar disabledDepth = 0;\\nvar prevLog;\\nvar prevInfo;\\nvar prevWarn;\\nvar prevError;\\nvar prevGroup;\\nvar prevGroupCollapsed;\\nvar prevGroupEnd;\\n\\nfunction disabledLog() {}\\n\\ndisabledLog.__reactDisabledLog = true;\\nfunction disableLogs() {\\n  {\\n    if (disabledDepth === 0) {\\n      /* eslint-disable react-internal/no-production-logging */\\n      prevLog = console.log;\\n      prevInfo = console.info;\\n      prevWarn = console.warn;\\n      prevError = console.error;\\n      prevGroup = console.group;\\n      prevGroupCollapsed = console.groupCollapsed;\\n      prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099\\n\\n      var props = {\\n        configurable: true,\\n        enumerable: true,\\n        value: disabledLog,\\n        writable: true\\n      }; // $FlowFixMe Flow thinks console is immutable.\\n\\n      Object.defineProperties(console, {\\n        info: props,\\n        log: props,\\n        warn: props,\\n        error: props,\\n        group: props,\\n        groupCollapsed: props,\\n        groupEnd: props\\n      });\\n      /* eslint-enable react-internal/no-production-logging */\\n    }\\n\\n    disabledDepth++;\\n  }\\n}\\nfunction reenableLogs() {\\n  {\\n    disabledDepth--;\\n\\n    if (disabledDepth === 0) {\\n      /* eslint-disable react-internal/no-production-logging */\\n      var props = {\\n        configurable: true,\\n        enumerable: true,\\n        writable: true\\n      }; // $FlowFixMe Flow thinks console is immutable.\\n\\n      Object.defineProperties(console, {\\n        log: _assign({}, props, {\\n          value: prevLog\\n        }),\\n        info: _assign({}, props, {\\n          value: prevInfo\\n        }),\\n        warn: _assign({}, props, {\\n          value: prevWarn\\n        }),\\n        error: _assign({}, props, {\\n          value: prevError\\n        }),\\n        group: _assign({}, props, {\\n          value: prevGroup\\n        }),\\n        groupCollapsed: _assign({}, props, {\\n          value: prevGroupCollapsed\\n        }),\\n        groupEnd: _assign({}, props, {\\n          value: prevGroupEnd\\n        })\\n      });\\n      /* eslint-enable react-internal/no-production-logging */\\n    }\\n\\n    if (disabledDepth < 0) {\\n      error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');\\n    }\\n  }\\n}\\n\\nvar ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;\\nvar prefix;\\nfunction describeBuiltInComponentFrame(name, source, ownerFn) {\\n  {\\n    if (prefix === undefined) {\\n      // Extract the VM specific prefix used by each line.\\n      try {\\n        throw Error();\\n      } catch (x) {\\n        var match = x.stack.trim().match(/\\\\n( *(at )?)/);\\n        prefix = match && match[1] || '';\\n      }\\n    } // We use the prefix to ensure our stacks line up with native stack frames.\\n\\n\\n    return '\\\\n' + prefix + name;\\n  }\\n}\\nvar reentry = false;\\nvar componentFrameCache;\\n\\n{\\n  var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;\\n  componentFrameCache = new PossiblyWeakMap();\\n}\\n\\nfunction describeNativeComponentFrame(fn, construct) {\\n  // If something asked for a stack inside a fake render, it should get ignored.\\n  if (!fn || reentry) {\\n    return '';\\n  }\\n\\n  {\\n    var frame = componentFrameCache.get(fn);\\n\\n    if (frame !== undefined) {\\n      return frame;\\n    }\\n  }\\n\\n  var control;\\n  reentry = true;\\n  var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.\\n\\n  Error.prepareStackTrace = undefined;\\n  var previousDispatcher;\\n\\n  {\\n    previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function\\n    // for warnings.\\n\\n    ReactCurrentDispatcher.current = null;\\n    disableLogs();\\n  }\\n\\n  try {\\n    // This should throw.\\n    if (construct) {\\n      // Something should be setting the props in the constructor.\\n      var Fake = function () {\\n        throw Error();\\n      }; // $FlowFixMe\\n\\n\\n      Object.defineProperty(Fake.prototype, 'props', {\\n        set: function () {\\n          // We use a throwing setter instead of frozen or non-writable props\\n          // because that won't throw in a non-strict mode function.\\n          throw Error();\\n        }\\n      });\\n\\n      if (typeof Reflect === 'object' && Reflect.construct) {\\n        // We construct a different control for this case to include any extra\\n        // frames added by the construct call.\\n        try {\\n          Reflect.construct(Fake, []);\\n        } catch (x) {\\n          control = x;\\n        }\\n\\n        Reflect.construct(fn, [], Fake);\\n      } else {\\n        try {\\n          Fake.call();\\n        } catch (x) {\\n          control = x;\\n        }\\n\\n        fn.call(Fake.prototype);\\n      }\\n    } else {\\n      try {\\n        throw Error();\\n      } catch (x) {\\n        control = x;\\n      }\\n\\n      fn();\\n    }\\n  } catch (sample) {\\n    // This is inlined manually because closure doesn't do it for us.\\n    if (sample && control && typeof sample.stack === 'string') {\\n      // This extracts the first frame from the sample that isn't also in the control.\\n      // Skipping one frame that we assume is the frame that calls the two.\\n      var sampleLines = sample.stack.split('\\\\n');\\n      var controlLines = control.stack.split('\\\\n');\\n      var s = sampleLines.length - 1;\\n      var c = controlLines.length - 1;\\n\\n      while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {\\n        // We expect at least one stack frame to be shared.\\n        // Typically this will be the root most one. However, stack frames may be\\n        // cut off due to maximum stack limits. In this case, one maybe cut off\\n        // earlier than the other. We assume that the sample is longer or the same\\n        // and there for cut off earlier. So we should find the root most frame in\\n        // the sample somewhere in the control.\\n        c--;\\n      }\\n\\n      for (; s >= 1 && c >= 0; s--, c--) {\\n        // Next we find the first one that isn't the same which should be the\\n        // frame that called our sample function and the control.\\n        if (sampleLines[s] !== controlLines[c]) {\\n          // In V8, the first line is describing the message but other VMs don't.\\n          // If we're about to return the first line, and the control is also on the same\\n          // line, that's a pretty good indicator that our sample threw at same line as\\n          // the control. I.e. before we entered the sample frame. So we ignore this result.\\n          // This can happen if you passed a class to function component, or non-function.\\n          if (s !== 1 || c !== 1) {\\n            do {\\n              s--;\\n              c--; // We may still have similar intermediate frames from the construct call.\\n              // The next one that isn't the same should be our match though.\\n\\n              if (c < 0 || sampleLines[s] !== controlLines[c]) {\\n                // V8 adds a \\\"new\\\" prefix for native classes. Let's remove it to make it prettier.\\n                var _frame = '\\\\n' + sampleLines[s].replace(' at new ', ' at ');\\n\\n                {\\n                  if (typeof fn === 'function') {\\n                    componentFrameCache.set(fn, _frame);\\n                  }\\n                } // Return the line we found.\\n\\n\\n                return _frame;\\n              }\\n            } while (s >= 1 && c >= 0);\\n          }\\n\\n          break;\\n        }\\n      }\\n    }\\n  } finally {\\n    reentry = false;\\n\\n    {\\n      ReactCurrentDispatcher.current = previousDispatcher;\\n      reenableLogs();\\n    }\\n\\n    Error.prepareStackTrace = previousPrepareStackTrace;\\n  } // Fallback to just using the name if we couldn't make it throw.\\n\\n\\n  var name = fn ? fn.displayName || fn.name : '';\\n  var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';\\n\\n  {\\n    if (typeof fn === 'function') {\\n      componentFrameCache.set(fn, syntheticFrame);\\n    }\\n  }\\n\\n  return syntheticFrame;\\n}\\nfunction describeFunctionComponentFrame(fn, source, ownerFn) {\\n  {\\n    return describeNativeComponentFrame(fn, false);\\n  }\\n}\\n\\nfunction shouldConstruct(Component) {\\n  var prototype = Component.prototype;\\n  return !!(prototype && prototype.isReactComponent);\\n}\\n\\nfunction describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {\\n\\n  if (type == null) {\\n    return '';\\n  }\\n\\n  if (typeof type === 'function') {\\n    {\\n      return describeNativeComponentFrame(type, shouldConstruct(type));\\n    }\\n  }\\n\\n  if (typeof type === 'string') {\\n    return describeBuiltInComponentFrame(type);\\n  }\\n\\n  switch (type) {\\n    case REACT_SUSPENSE_TYPE:\\n      return describeBuiltInComponentFrame('Suspense');\\n\\n    case REACT_SUSPENSE_LIST_TYPE:\\n      return describeBuiltInComponentFrame('SuspenseList');\\n  }\\n\\n  if (typeof type === 'object') {\\n    switch (type.$$typeof) {\\n      case REACT_FORWARD_REF_TYPE:\\n        return describeFunctionComponentFrame(type.render);\\n\\n      case REACT_MEMO_TYPE:\\n        // Memo may contain any component type so we recursively resolve it.\\n        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);\\n\\n      case REACT_BLOCK_TYPE:\\n        return describeFunctionComponentFrame(type._render);\\n\\n      case REACT_LAZY_TYPE:\\n        {\\n          var lazyComponent = type;\\n          var payload = lazyComponent._payload;\\n          var init = lazyComponent._init;\\n\\n          try {\\n            // Lazy may contain any component type so we recursively resolve it.\\n            return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);\\n          } catch (x) {}\\n        }\\n    }\\n  }\\n\\n  return '';\\n}\\n\\nvar loggedTypeFailures = {};\\nvar ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\\n\\nfunction setCurrentlyValidatingElement(element) {\\n  {\\n    if (element) {\\n      var owner = element._owner;\\n      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\\n      ReactDebugCurrentFrame.setExtraStackFrame(stack);\\n    } else {\\n      ReactDebugCurrentFrame.setExtraStackFrame(null);\\n    }\\n  }\\n}\\n\\nfunction checkPropTypes(typeSpecs, values, location, componentName, element) {\\n  {\\n    // $FlowFixMe This is okay but Flow doesn't know it.\\n    var has = Function.call.bind(Object.prototype.hasOwnProperty);\\n\\n    for (var typeSpecName in typeSpecs) {\\n      if (has(typeSpecs, typeSpecName)) {\\n        var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to\\n        // fail the render phase where it didn't fail before. So we log it.\\n        // After these have been cleaned up, we'll let them throw.\\n\\n        try {\\n          // This is intentionally an invariant that gets caught. It's the same\\n          // behavior as without this statement except with a better message.\\n          if (typeof typeSpecs[typeSpecName] !== 'function') {\\n            var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');\\n            err.name = 'Invariant Violation';\\n            throw err;\\n          }\\n\\n          error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');\\n        } catch (ex) {\\n          error$1 = ex;\\n        }\\n\\n        if (error$1 && !(error$1 instanceof Error)) {\\n          setCurrentlyValidatingElement(element);\\n\\n          error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error$1);\\n\\n          setCurrentlyValidatingElement(null);\\n        }\\n\\n        if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {\\n          // Only monitor this failure once because there tends to be a lot of the\\n          // same error.\\n          loggedTypeFailures[error$1.message] = true;\\n          setCurrentlyValidatingElement(element);\\n\\n          error('Failed %s type: %s', location, error$1.message);\\n\\n          setCurrentlyValidatingElement(null);\\n        }\\n      }\\n    }\\n  }\\n}\\n\\nvar ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;\\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\\nvar RESERVED_PROPS = {\\n  key: true,\\n  ref: true,\\n  __self: true,\\n  __source: true\\n};\\nvar specialPropKeyWarningShown;\\nvar specialPropRefWarningShown;\\nvar didWarnAboutStringRefs;\\n\\n{\\n  didWarnAboutStringRefs = {};\\n}\\n\\nfunction hasValidRef(config) {\\n  {\\n    if (hasOwnProperty.call(config, 'ref')) {\\n      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;\\n\\n      if (getter && getter.isReactWarning) {\\n        return false;\\n      }\\n    }\\n  }\\n\\n  return config.ref !== undefined;\\n}\\n\\nfunction hasValidKey(config) {\\n  {\\n    if (hasOwnProperty.call(config, 'key')) {\\n      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;\\n\\n      if (getter && getter.isReactWarning) {\\n        return false;\\n      }\\n    }\\n  }\\n\\n  return config.key !== undefined;\\n}\\n\\nfunction warnIfStringRefCannotBeAutoConverted(config, self) {\\n  {\\n    if (typeof config.ref === 'string' && ReactCurrentOwner.current && self && ReactCurrentOwner.current.stateNode !== self) {\\n      var componentName = getComponentName(ReactCurrentOwner.current.type);\\n\\n      if (!didWarnAboutStringRefs[componentName]) {\\n        error('Component \\\"%s\\\" contains the string ref \\\"%s\\\". ' + 'Support for string refs will be removed in a future major release. ' + 'This case cannot be automatically converted to an arrow function. ' + 'We ask you to manually fix this case by using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', getComponentName(ReactCurrentOwner.current.type), config.ref);\\n\\n        didWarnAboutStringRefs[componentName] = true;\\n      }\\n    }\\n  }\\n}\\n\\nfunction defineKeyPropWarningGetter(props, displayName) {\\n  {\\n    var warnAboutAccessingKey = function () {\\n      if (!specialPropKeyWarningShown) {\\n        specialPropKeyWarningShown = true;\\n\\n        error('%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);\\n      }\\n    };\\n\\n    warnAboutAccessingKey.isReactWarning = true;\\n    Object.defineProperty(props, 'key', {\\n      get: warnAboutAccessingKey,\\n      configurable: true\\n    });\\n  }\\n}\\n\\nfunction defineRefPropWarningGetter(props, displayName) {\\n  {\\n    var warnAboutAccessingRef = function () {\\n      if (!specialPropRefWarningShown) {\\n        specialPropRefWarningShown = true;\\n\\n        error('%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);\\n      }\\n    };\\n\\n    warnAboutAccessingRef.isReactWarning = true;\\n    Object.defineProperty(props, 'ref', {\\n      get: warnAboutAccessingRef,\\n      configurable: true\\n    });\\n  }\\n}\\n/**\\n * Factory method to create a new React element. This no longer adheres to\\n * the class pattern, so do not use new to call it. Also, instanceof check\\n * will not work. Instead test $$typeof field against Symbol.for('react.element') to check\\n * if something is a React Element.\\n *\\n * @param {*} type\\n * @param {*} props\\n * @param {*} key\\n * @param {string|object} ref\\n * @param {*} owner\\n * @param {*} self A *temporary* helper to detect places where `this` is\\n * different from the `owner` when React.createElement is called, so that we\\n * can warn. We want to get rid of owner and replace string `ref`s with arrow\\n * functions, and as long as `this` and owner are the same, there will be no\\n * change in behavior.\\n * @param {*} source An annotation object (added by a transpiler or otherwise)\\n * indicating filename, line number, and/or other information.\\n * @internal\\n */\\n\\n\\nvar ReactElement = function (type, key, ref, self, source, owner, props) {\\n  var element = {\\n    // This tag allows us to uniquely identify this as a React Element\\n    $$typeof: REACT_ELEMENT_TYPE,\\n    // Built-in properties that belong on the element\\n    type: type,\\n    key: key,\\n    ref: ref,\\n    props: props,\\n    // Record the component responsible for creating this element.\\n    _owner: owner\\n  };\\n\\n  {\\n    // The validation flag is currently mutative. We put it on\\n    // an external backing store so that we can freeze the whole object.\\n    // This can be replaced with a WeakMap once they are implemented in\\n    // commonly used development environments.\\n    element._store = {}; // To make comparing ReactElements easier for testing purposes, we make\\n    // the validation flag non-enumerable (where possible, which should\\n    // include every environment we run tests in), so the test framework\\n    // ignores it.\\n\\n    Object.defineProperty(element._store, 'validated', {\\n      configurable: false,\\n      enumerable: false,\\n      writable: true,\\n      value: false\\n    }); // self and source are DEV only properties.\\n\\n    Object.defineProperty(element, '_self', {\\n      configurable: false,\\n      enumerable: false,\\n      writable: false,\\n      value: self\\n    }); // Two elements created in two different places should be considered\\n    // equal for testing purposes and therefore we hide it from enumeration.\\n\\n    Object.defineProperty(element, '_source', {\\n      configurable: false,\\n      enumerable: false,\\n      writable: false,\\n      value: source\\n    });\\n\\n    if (Object.freeze) {\\n      Object.freeze(element.props);\\n      Object.freeze(element);\\n    }\\n  }\\n\\n  return element;\\n};\\n/**\\n * https://github.com/reactjs/rfcs/pull/107\\n * @param {*} type\\n * @param {object} props\\n * @param {string} key\\n */\\n\\nfunction jsxDEV(type, config, maybeKey, source, self) {\\n  {\\n    var propName; // Reserved names are extracted\\n\\n    var props = {};\\n    var key = null;\\n    var ref = null; // Currently, key can be spread in as a prop. This causes a potential\\n    // issue if key is also explicitly declared (ie. <div {...props} key=\\\"Hi\\\" />\\n    // or <div key=\\\"Hi\\\" {...props} /> ). We want to deprecate key spread,\\n    // but as an intermediary step, we will use jsxDEV for everything except\\n    // <div {...props} key=\\\"Hi\\\" />, because we aren't currently able to tell if\\n    // key is explicitly declared to be undefined or not.\\n\\n    if (maybeKey !== undefined) {\\n      key = '' + maybeKey;\\n    }\\n\\n    if (hasValidKey(config)) {\\n      key = '' + config.key;\\n    }\\n\\n    if (hasValidRef(config)) {\\n      ref = config.ref;\\n      warnIfStringRefCannotBeAutoConverted(config, self);\\n    } // Remaining properties are added to a new props object\\n\\n\\n    for (propName in config) {\\n      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\\n        props[propName] = config[propName];\\n      }\\n    } // Resolve default props\\n\\n\\n    if (type && type.defaultProps) {\\n      var defaultProps = type.defaultProps;\\n\\n      for (propName in defaultProps) {\\n        if (props[propName] === undefined) {\\n          props[propName] = defaultProps[propName];\\n        }\\n      }\\n    }\\n\\n    if (key || ref) {\\n      var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;\\n\\n      if (key) {\\n        defineKeyPropWarningGetter(props, displayName);\\n      }\\n\\n      if (ref) {\\n        defineRefPropWarningGetter(props, displayName);\\n      }\\n    }\\n\\n    return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);\\n  }\\n}\\n\\nvar ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;\\nvar ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;\\n\\nfunction setCurrentlyValidatingElement$1(element) {\\n  {\\n    if (element) {\\n      var owner = element._owner;\\n      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\\n      ReactDebugCurrentFrame$1.setExtraStackFrame(stack);\\n    } else {\\n      ReactDebugCurrentFrame$1.setExtraStackFrame(null);\\n    }\\n  }\\n}\\n\\nvar propTypesMisspellWarningShown;\\n\\n{\\n  propTypesMisspellWarningShown = false;\\n}\\n/**\\n * Verifies the object is a ReactElement.\\n * See https://reactjs.org/docs/react-api.html#isvalidelement\\n * @param {?object} object\\n * @return {boolean} True if `object` is a ReactElement.\\n * @final\\n */\\n\\nfunction isValidElement(object) {\\n  {\\n    return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;\\n  }\\n}\\n\\nfunction getDeclarationErrorAddendum() {\\n  {\\n    if (ReactCurrentOwner$1.current) {\\n      var name = getComponentName(ReactCurrentOwner$1.current.type);\\n\\n      if (name) {\\n        return '\\\\n\\\\nCheck the render method of `' + name + '`.';\\n      }\\n    }\\n\\n    return '';\\n  }\\n}\\n\\nfunction getSourceInfoErrorAddendum(source) {\\n  {\\n    if (source !== undefined) {\\n      var fileName = source.fileName.replace(/^.*[\\\\\\\\\\\\/]/, '');\\n      var lineNumber = source.lineNumber;\\n      return '\\\\n\\\\nCheck your code at ' + fileName + ':' + lineNumber + '.';\\n    }\\n\\n    return '';\\n  }\\n}\\n/**\\n * Warn if there's no key explicitly set on dynamic arrays of children or\\n * object keys are not valid. This allows us to keep track of children between\\n * updates.\\n */\\n\\n\\nvar ownerHasKeyUseWarning = {};\\n\\nfunction getCurrentComponentErrorInfo(parentType) {\\n  {\\n    var info = getDeclarationErrorAddendum();\\n\\n    if (!info) {\\n      var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;\\n\\n      if (parentName) {\\n        info = \\\"\\\\n\\\\nCheck the top-level render call using <\\\" + parentName + \\\">.\\\";\\n      }\\n    }\\n\\n    return info;\\n  }\\n}\\n/**\\n * Warn if the element doesn't have an explicit key assigned to it.\\n * This element is in an array. The array could grow and shrink or be\\n * reordered. All children that haven't already been validated are required to\\n * have a \\\"key\\\" property assigned to it. Error statuses are cached so a warning\\n * will only be shown once.\\n *\\n * @internal\\n * @param {ReactElement} element Element that requires a key.\\n * @param {*} parentType element's parent's type.\\n */\\n\\n\\nfunction validateExplicitKey(element, parentType) {\\n  {\\n    if (!element._store || element._store.validated || element.key != null) {\\n      return;\\n    }\\n\\n    element._store.validated = true;\\n    var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);\\n\\n    if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {\\n      return;\\n    }\\n\\n    ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a\\n    // property, it may be the creator of the child that's responsible for\\n    // assigning it a key.\\n\\n    var childOwner = '';\\n\\n    if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) {\\n      // Give the component that originally created this child.\\n      childOwner = \\\" It was passed a child from \\\" + getComponentName(element._owner.type) + \\\".\\\";\\n    }\\n\\n    setCurrentlyValidatingElement$1(element);\\n\\n    error('Each child in a list should have a unique \\\"key\\\" prop.' + '%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);\\n\\n    setCurrentlyValidatingElement$1(null);\\n  }\\n}\\n/**\\n * Ensure that every element either is passed in a static location, in an\\n * array with an explicit keys property defined, or in an object literal\\n * with valid key property.\\n *\\n * @internal\\n * @param {ReactNode} node Statically passed child of any type.\\n * @param {*} parentType node's parent's type.\\n */\\n\\n\\nfunction validateChildKeys(node, parentType) {\\n  {\\n    if (typeof node !== 'object') {\\n      return;\\n    }\\n\\n    if (Array.isArray(node)) {\\n      for (var i = 0; i < node.length; i++) {\\n        var child = node[i];\\n\\n        if (isValidElement(child)) {\\n          validateExplicitKey(child, parentType);\\n        }\\n      }\\n    } else if (isValidElement(node)) {\\n      // This element was passed in a valid location.\\n      if (node._store) {\\n        node._store.validated = true;\\n      }\\n    } else if (node) {\\n      var iteratorFn = getIteratorFn(node);\\n\\n      if (typeof iteratorFn === 'function') {\\n        // Entry iterators used to provide implicit keys,\\n        // but now we print a separate warning for them later.\\n        if (iteratorFn !== node.entries) {\\n          var iterator = iteratorFn.call(node);\\n          var step;\\n\\n          while (!(step = iterator.next()).done) {\\n            if (isValidElement(step.value)) {\\n              validateExplicitKey(step.value, parentType);\\n            }\\n          }\\n        }\\n      }\\n    }\\n  }\\n}\\n/**\\n * Given an element, validate that its props follow the propTypes definition,\\n * provided by the type.\\n *\\n * @param {ReactElement} element\\n */\\n\\n\\nfunction validatePropTypes(element) {\\n  {\\n    var type = element.type;\\n\\n    if (type === null || type === undefined || typeof type === 'string') {\\n      return;\\n    }\\n\\n    var propTypes;\\n\\n    if (typeof type === 'function') {\\n      propTypes = type.propTypes;\\n    } else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.\\n    // Inner props are checked in the reconciler.\\n    type.$$typeof === REACT_MEMO_TYPE)) {\\n      propTypes = type.propTypes;\\n    } else {\\n      return;\\n    }\\n\\n    if (propTypes) {\\n      // Intentionally inside to avoid triggering lazy initializers:\\n      var name = getComponentName(type);\\n      checkPropTypes(propTypes, element.props, 'prop', name, element);\\n    } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {\\n      propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:\\n\\n      var _name = getComponentName(type);\\n\\n      error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', _name || 'Unknown');\\n    }\\n\\n    if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) {\\n      error('getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.');\\n    }\\n  }\\n}\\n/**\\n * Given a fragment, validate that it can only be provided with fragment props\\n * @param {ReactElement} fragment\\n */\\n\\n\\nfunction validateFragmentProps(fragment) {\\n  {\\n    var keys = Object.keys(fragment.props);\\n\\n    for (var i = 0; i < keys.length; i++) {\\n      var key = keys[i];\\n\\n      if (key !== 'children' && key !== 'key') {\\n        setCurrentlyValidatingElement$1(fragment);\\n\\n        error('Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);\\n\\n        setCurrentlyValidatingElement$1(null);\\n        break;\\n      }\\n    }\\n\\n    if (fragment.ref !== null) {\\n      setCurrentlyValidatingElement$1(fragment);\\n\\n      error('Invalid attribute `ref` supplied to `React.Fragment`.');\\n\\n      setCurrentlyValidatingElement$1(null);\\n    }\\n  }\\n}\\n\\nfunction jsxWithValidation(type, props, key, isStaticChildren, source, self) {\\n  {\\n    var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to\\n    // succeed and there will likely be errors in render.\\n\\n    if (!validType) {\\n      var info = '';\\n\\n      if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {\\n        info += ' You likely forgot to export your component from the file ' + \\\"it's defined in, or you might have mixed up default and named imports.\\\";\\n      }\\n\\n      var sourceInfo = getSourceInfoErrorAddendum(source);\\n\\n      if (sourceInfo) {\\n        info += sourceInfo;\\n      } else {\\n        info += getDeclarationErrorAddendum();\\n      }\\n\\n      var typeString;\\n\\n      if (type === null) {\\n        typeString = 'null';\\n      } else if (Array.isArray(type)) {\\n        typeString = 'array';\\n      } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {\\n        typeString = \\\"<\\\" + (getComponentName(type.type) || 'Unknown') + \\\" />\\\";\\n        info = ' Did you accidentally export a JSX literal instead of a component?';\\n      } else {\\n        typeString = typeof type;\\n      }\\n\\n      error('React.jsx: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);\\n    }\\n\\n    var element = jsxDEV(type, props, key, source, self); // The result can be nullish if a mock or a custom function is used.\\n    // TODO: Drop this when these are no longer allowed as the type argument.\\n\\n    if (element == null) {\\n      return element;\\n    } // Skip key warning if the type isn't valid since our key validation logic\\n    // doesn't expect a non-string/function type and can throw confusing errors.\\n    // We don't want exception behavior to differ between dev and prod.\\n    // (Rendering will throw with a helpful message and as soon as the type is\\n    // fixed, the key warnings will appear.)\\n\\n\\n    if (validType) {\\n      var children = props.children;\\n\\n      if (children !== undefined) {\\n        if (isStaticChildren) {\\n          if (Array.isArray(children)) {\\n            for (var i = 0; i < children.length; i++) {\\n              validateChildKeys(children[i], type);\\n            }\\n\\n            if (Object.freeze) {\\n              Object.freeze(children);\\n            }\\n          } else {\\n            error('React.jsx: Static children should always be an array. ' + 'You are likely explicitly calling React.jsxs or React.jsxDEV. ' + 'Use the Babel transform instead.');\\n          }\\n        } else {\\n          validateChildKeys(children, type);\\n        }\\n      }\\n    }\\n\\n    if (type === exports.Fragment) {\\n      validateFragmentProps(element);\\n    } else {\\n      validatePropTypes(element);\\n    }\\n\\n    return element;\\n  }\\n} // These two functions exist to still get child warnings in dev\\n// even with the prod transform. This means that jsxDEV is purely\\n// opt-in behavior for better messages but that we won't stop\\n// giving you warnings if you use production apis.\\n\\nfunction jsxWithValidationStatic(type, props, key) {\\n  {\\n    return jsxWithValidation(type, props, key, true);\\n  }\\n}\\nfunction jsxWithValidationDynamic(type, props, key) {\\n  {\\n    return jsxWithValidation(type, props, key, false);\\n  }\\n}\\n\\nvar jsx =  jsxWithValidationDynamic ; // we may want to special case jsxs internally to take advantage of static children.\\n// for now we can ship identical prod functions\\n\\nvar jsxs =  jsxWithValidationStatic ;\\n\\nexports.jsx = jsx;\\nexports.jsxs = jsxs;\\n  })();\\n}\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///../../../node_modules/react/cjs/react-jsx-runtime.development.js\\n\");\n\n/***/ }),\n\n/***/ \"../../../node_modules/react/jsx-runtime.js\":\n/*!**************************************************!*\\\n  !*** ../../../node_modules/react/jsx-runtime.js ***!\n  \\**************************************************/\n/***/ ((module, __unused_webpack_exports, __webpack_require__) => {\n\neval(\"\\n\\nif (false) {} else {\\n  module.exports = __webpack_require__(/*! ./cjs/react-jsx-runtime.development.js */ \\\"../../../node_modules/react/cjs/react-jsx-runtime.development.js\\\");\\n}\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3JlYWN0L2pzeC1ydW50aW1lLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUdBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZGVyaXYvYWNjb3VudC8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcmVhY3QvanN4LXJ1bnRpbWUuanM/MDZhYyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtanN4LXJ1bnRpbWUucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtanN4LXJ1bnRpbWUuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///../../../node_modules/react/jsx-runtime.js\\n\");\n\n/***/ }),\n\n/***/ \"@deriv-com/analytics\":\n/*!***************************************!*\\\n  !*** external \"@deriv-com/analytics\" ***!\n  \\***************************************/\n/***/ ((module) => {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE__deriv_com_analytics__;\n\n/***/ }),\n\n/***/ \"@deriv-com/translations\":\n/*!******************************************!*\\\n  !*** external \"@deriv-com/translations\" ***!\n  \\******************************************/\n/***/ ((module) => {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE__deriv_com_translations__;\n\n/***/ }),\n\n/***/ \"@deriv-com/utils\":\n/*!***********************************!*\\\n  !*** external \"@deriv-com/utils\" ***!\n  \\***********************************/\n/***/ ((module) => {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE__deriv_com_utils__;\n\n/***/ }),\n\n/***/ \"@deriv/api\":\n/*!*****************************!*\\\n  !*** external \"@deriv/api\" ***!\n  \\*****************************/\n/***/ ((module) => {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE__deriv_api__;\n\n/***/ }),\n\n/***/ \"@deriv/components\":\n/*!************************************!*\\\n  !*** external \"@deriv/components\" ***!\n  \\************************************/\n/***/ ((module) => {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE__deriv_components__;\n\n/***/ }),\n\n/***/ \"@deriv/hooks\":\n/*!*******************************!*\\\n  !*** external \"@deriv/hooks\" ***!\n  \\*******************************/\n/***/ ((module) => {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE__deriv_hooks__;\n\n/***/ }),\n\n/***/ \"@deriv/quill-icons\":\n/*!*************************************!*\\\n  !*** external \"@deriv/quill-icons\" ***!\n  \\*************************************/\n/***/ ((module) => {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE__deriv_quill_icons__;\n\n/***/ }),\n\n/***/ \"@deriv/shared\":\n/*!********************************!*\\\n  !*** external \"@deriv/shared\" ***!\n  \\********************************/\n/***/ ((module) => {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE__deriv_shared__;\n\n/***/ }),\n\n/***/ \"@deriv/shared/src/utils/routes/routes\":\n/*!********************************************************!*\\\n  !*** external \"@deriv/shared/src/utils/routes/routes\" ***!\n  \\********************************************************/\n/***/ ((module) => {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE__deriv_shared_src_utils_routes_routes__;\n\n/***/ }),\n\n/***/ \"@deriv/stores\":\n/*!********************************!*\\\n  !*** external \"@deriv/stores\" ***!\n  \\********************************/\n/***/ ((module) => {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE__deriv_stores__;\n\n/***/ }),\n\n/***/ \"@deriv/translations\":\n/*!**************************************!*\\\n  !*** external \"@deriv/translations\" ***!\n  \\**************************************/\n/***/ ((module) => {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE__deriv_translations__;\n\n/***/ }),\n\n/***/ \"@deriv/utils\":\n/*!*******************************!*\\\n  !*** external \"@deriv/utils\" ***!\n  \\*******************************/\n/***/ ((module) => {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE__deriv_utils__;\n\n/***/ }),\n\n/***/ \"formik\":\n/*!*************************!*\\\n  !*** external \"formik\" ***!\n  \\*************************/\n/***/ ((module) => {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE_formik__;\n\n/***/ }),\n\n/***/ \"react\":\n/*!************************!*\\\n  !*** external \"react\" ***!\n  \\************************/\n/***/ ((module) => {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE_react__;\n\n/***/ }),\n\n/***/ \"react-dom\":\n/*!****************************!*\\\n  !*** external \"react-dom\" ***!\n  \\****************************/\n/***/ ((module) => {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE_react_dom__;\n\n/***/ }),\n\n/***/ \"react-router\":\n/*!*******************************!*\\\n  !*** external \"react-router\" ***!\n  \\*******************************/\n/***/ ((module) => {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE_react_router__;\n\n/***/ }),\n\n/***/ \"react-router-dom\":\n/*!***********************************!*\\\n  !*** external \"react-router-dom\" ***!\n  \\***********************************/\n/***/ ((module) => {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE_react_router_dom__;\n\n/***/ })\n\n/******/ \t});\n/************************************************************************/\n/******/ \t// The module cache\n/******/ \tvar __webpack_module_cache__ = {};\n/******/ \t\n/******/ \t// The require function\n/******/ \tfunction __nested_webpack_require_120346__(moduleId) {\n/******/ \t\t// Check if module is in cache\n/******/ \t\tvar cachedModule = __webpack_module_cache__[moduleId];\n/******/ \t\tif (cachedModule !== undefined) {\n/******/ \t\t\treturn cachedModule.exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = __webpack_module_cache__[moduleId] = {\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/ \t\n/******/ \t\t// Execute the module function\n/******/ \t\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __nested_webpack_require_120346__);\n/******/ \t\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/ \t\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/ \t\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__nested_webpack_require_120346__.m = __webpack_modules__;\n/******/ \t\n/************************************************************************/\n/******/ \t/* webpack/runtime/compat get default export */\n/******/ \t(() => {\n/******/ \t\t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t\t__nested_webpack_require_120346__.n = (module) => {\n/******/ \t\t\tvar getter = module && module.__esModule ?\n/******/ \t\t\t\t() => (module['default']) :\n/******/ \t\t\t\t() => (module);\n/******/ \t\t\t__nested_webpack_require_120346__.d(getter, { a: getter });\n/******/ \t\t\treturn getter;\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/define property getters */\n/******/ \t(() => {\n/******/ \t\t// define getter functions for harmony exports\n/******/ \t\t__nested_webpack_require_120346__.d = (exports, definition) => {\n/******/ \t\t\tfor(var key in definition) {\n/******/ \t\t\t\tif(__nested_webpack_require_120346__.o(definition, key) && !__nested_webpack_require_120346__.o(exports, key)) {\n/******/ \t\t\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n/******/ \t\t\t\t}\n/******/ \t\t\t}\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/ensure chunk */\n/******/ \t(() => {\n/******/ \t\t__nested_webpack_require_120346__.f = {};\n/******/ \t\t// This file contains only the entry chunk.\n/******/ \t\t// The chunk loading function for additional chunks\n/******/ \t\t__nested_webpack_require_120346__.e = (chunkId) => {\n/******/ \t\t\treturn Promise.all(Object.keys(__nested_webpack_require_120346__.f).reduce((promises, key) => {\n/******/ \t\t\t\t__nested_webpack_require_120346__.f[key](chunkId, promises);\n/******/ \t\t\t\treturn promises;\n/******/ \t\t\t}, []));\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/get javascript chunk filename */\n/******/ \t(() => {\n/******/ \t\t// This function allow to reference async chunks\n/******/ \t\t__nested_webpack_require_120346__.u = (chunkId) => {\n/******/ \t\t\t// return url for filenames based on template\n/******/ \t\t\treturn \"account/js/account.\" + chunkId + \".\" + {\"404\":\"daee706d7a563fa21ae0\",\"vendors-node_modules_binary-com_binary-document-uploader_DocumentUploader_js-node_modules_day-ab5b6c\":\"d82e70f1b16a22135fcc\",\"account-app\":\"05ac0fd664eafcd896e3\",\"Sections_Security_Passwords_index_ts\":\"01d698af4ea130ce4706\",\"Sections_Profile_PhoneVerification_index_ts\":\"e983cb87b5ff69d0648a\",\"Sections_Security_Passkeys_index_ts\":\"e0134075b30b685bdd45\",\"Sections_Security_AccountLimits_index_ts\":\"a67e679ffd6bd88a7ce8\",\"Sections_Security_AccountClosed_index_ts\":\"84ee9ce0afb84c89dbcc\",\"Sections_Profile_LanguageSettings_index_ts\":\"d3d4e66e8561642c6eb0\",\"Sections_Security_LoginHistory_index_ts\":\"dd6dc05eddda3070bb26\",\"Sections_Security_ConnectedApps_index_ts\":\"55d01944d3f8d183f1e9\",\"Sections_Assessment_FinancialAssessment_index_ts\":\"a1ba37636550589d059b\",\"Sections_Assessment_TradingAssessment_index_js\":\"3bafcd3b58eeee72b6f6\",\"Sections_Security_ApiToken_index_ts\":\"7fe67190b4d7553f8493\",\"Sections_Security_TwoFactorAuthentication_index_ts\":\"b1e072b98576c683594a\",\"Sections_Security_SelfExclusion_index_ts\":\"7fd88e5b69f8ebe438eb\",\"Sections_Security_ClosingAccount_index_ts\":\"e689a27d03edf6fca1f8\"}[chunkId] + \".js\";\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/get mini-css chunk filename */\n/******/ \t(() => {\n/******/ \t\t// This function allow to reference all chunks\n/******/ \t\t__nested_webpack_require_120346__.miniCssF = (chunkId) => {\n/******/ \t\t\t// return url for filenames based on template\n/******/ \t\t\treturn \"account/css/\" + chunkId + \".\" + {\"vendors-node_modules_binary-com_binary-document-uploader_DocumentUploader_js-node_modules_day-ab5b6c\":\"057b672316d5fa5c56d2\",\"account-app\":\"2408b53384613400e7b5\",\"Sections_Profile_PhoneVerification_index_ts\":\"1d6d242cb587553cf48a\",\"Sections_Security_Passkeys_index_ts\":\"3f061b6c2b00e7c706c3\",\"Sections_Security_AccountLimits_index_ts\":\"9f459816e065263eb8ce\",\"Sections_Security_ConnectedApps_index_ts\":\"e8253590812dcb19bdb8\",\"Sections_Assessment_FinancialAssessment_index_ts\":\"4c36899b1061377e3d8b\",\"Sections_Security_ApiToken_index_ts\":\"0c2c46431901171c2574\",\"Sections_Security_TwoFactorAuthentication_index_ts\":\"20bc7f996cbf9576ebe2\",\"Sections_Security_SelfExclusion_index_ts\":\"2613bac4467f18963068\"}[chunkId] + \".css\";\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/global */\n/******/ \t(() => {\n/******/ \t\t__nested_webpack_require_120346__.g = (function() {\n/******/ \t\t\tif (typeof globalThis === 'object') return globalThis;\n/******/ \t\t\ttry {\n/******/ \t\t\t\treturn this || new Function('return this')();\n/******/ \t\t\t} catch (e) {\n/******/ \t\t\t\tif (typeof window === 'object') return window;\n/******/ \t\t\t}\n/******/ \t\t})();\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/hasOwnProperty shorthand */\n/******/ \t(() => {\n/******/ \t\t__nested_webpack_require_120346__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/load script */\n/******/ \t(() => {\n/******/ \t\tvar inProgress = {};\n/******/ \t\tvar dataWebpackPrefix = \"@deriv/account:\";\n/******/ \t\t// loadScript function to load a script via script tag\n/******/ \t\t__nested_webpack_require_120346__.l = (url, done, key, chunkId) => {\n/******/ \t\t\tif(inProgress[url]) { inProgress[url].push(done); return; }\n/******/ \t\t\tvar script, needAttach;\n/******/ \t\t\tif(key !== undefined) {\n/******/ \t\t\t\tvar scripts = document.getElementsByTagName(\"script\");\n/******/ \t\t\t\tfor(var i = 0; i < scripts.length; i++) {\n/******/ \t\t\t\t\tvar s = scripts[i];\n/******/ \t\t\t\t\tif(s.getAttribute(\"src\") == url || s.getAttribute(\"data-webpack\") == dataWebpackPrefix + key) { script = s; break; }\n/******/ \t\t\t\t}\n/******/ \t\t\t}\n/******/ \t\t\tif(!script) {\n/******/ \t\t\t\tneedAttach = true;\n/******/ \t\t\t\tscript = document.createElement('script');\n/******/ \t\t\n/******/ \t\t\t\tscript.charset = 'utf-8';\n/******/ \t\t\t\tscript.timeout = 120;\n/******/ \t\t\t\tif (__nested_webpack_require_120346__.nc) {\n/******/ \t\t\t\t\tscript.setAttribute(\"nonce\", __nested_webpack_require_120346__.nc);\n/******/ \t\t\t\t}\n/******/ \t\t\t\tscript.setAttribute(\"data-webpack\", dataWebpackPrefix + key);\n/******/ \t\t\n/******/ \t\t\t\tscript.src = url;\n/******/ \t\t\t}\n/******/ \t\t\tinProgress[url] = [done];\n/******/ \t\t\tvar onScriptComplete = (prev, event) => {\n/******/ \t\t\t\t// avoid mem leaks in IE.\n/******/ \t\t\t\tscript.onerror = script.onload = null;\n/******/ \t\t\t\tclearTimeout(timeout);\n/******/ \t\t\t\tvar doneFns = inProgress[url];\n/******/ \t\t\t\tdelete inProgress[url];\n/******/ \t\t\t\tscript.parentNode && script.parentNode.removeChild(script);\n/******/ \t\t\t\tdoneFns && doneFns.forEach((fn) => (fn(event)));\n/******/ \t\t\t\tif(prev) return prev(event);\n/******/ \t\t\t}\n/******/ \t\t\tvar timeout = setTimeout(onScriptComplete.bind(null, undefined, { type: 'timeout', target: script }), 120000);\n/******/ \t\t\tscript.onerror = onScriptComplete.bind(null, script.onerror);\n/******/ \t\t\tscript.onload = onScriptComplete.bind(null, script.onload);\n/******/ \t\t\tneedAttach && document.head.appendChild(script);\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/make namespace object */\n/******/ \t(() => {\n/******/ \t\t// define __esModule on exports\n/******/ \t\t__nested_webpack_require_120346__.r = (exports) => {\n/******/ \t\t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n/******/ \t\t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n/******/ \t\t\t}\n/******/ \t\t\tObject.defineProperty(exports, '__esModule', { value: true });\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/node module decorator */\n/******/ \t(() => {\n/******/ \t\t__nested_webpack_require_120346__.nmd = (module) => {\n/******/ \t\t\tmodule.paths = [];\n/******/ \t\t\tif (!module.children) module.children = [];\n/******/ \t\t\treturn module;\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/publicPath */\n/******/ \t(() => {\n/******/ \t\t__nested_webpack_require_120346__.p = \"/\";\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/css loading */\n/******/ \t(() => {\n/******/ \t\tvar createStylesheet = (chunkId, fullhref, resolve, reject) => {\n/******/ \t\t\tvar linkTag = document.createElement(\"link\");\n/******/ \t\t\n/******/ \t\t\tlinkTag.rel = \"stylesheet\";\n/******/ \t\t\tlinkTag.type = \"text/css\";\n/******/ \t\t\tvar onLinkComplete = (event) => {\n/******/ \t\t\t\t// avoid mem leaks.\n/******/ \t\t\t\tlinkTag.onerror = linkTag.onload = null;\n/******/ \t\t\t\tif (event.type === 'load') {\n/******/ \t\t\t\t\tresolve();\n/******/ \t\t\t\t} else {\n/******/ \t\t\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n/******/ \t\t\t\t\tvar realHref = event && event.target && event.target.href || fullhref;\n/******/ \t\t\t\t\tvar err = new Error(\"Loading CSS chunk \" + chunkId + \" failed.\\n(\" + realHref + \")\");\n/******/ \t\t\t\t\terr.code = \"CSS_CHUNK_LOAD_FAILED\";\n/******/ \t\t\t\t\terr.type = errorType;\n/******/ \t\t\t\t\terr.request = realHref;\n/******/ \t\t\t\t\tlinkTag.parentNode.removeChild(linkTag)\n/******/ \t\t\t\t\treject(err);\n/******/ \t\t\t\t}\n/******/ \t\t\t}\n/******/ \t\t\tlinkTag.onerror = linkTag.onload = onLinkComplete;\n/******/ \t\t\tlinkTag.href = fullhref;\n/******/ \t\t\n/******/ \t\t\tdocument.head.appendChild(linkTag);\n/******/ \t\t\treturn linkTag;\n/******/ \t\t};\n/******/ \t\tvar findStylesheet = (href, fullhref) => {\n/******/ \t\t\tvar existingLinkTags = document.getElementsByTagName(\"link\");\n/******/ \t\t\tfor(var i = 0; i < existingLinkTags.length; i++) {\n/******/ \t\t\t\tvar tag = existingLinkTags[i];\n/******/ \t\t\t\tvar dataHref = tag.getAttribute(\"data-href\") || tag.getAttribute(\"href\");\n/******/ \t\t\t\tif(tag.rel === \"stylesheet\" && (dataHref === href || dataHref === fullhref)) return tag;\n/******/ \t\t\t}\n/******/ \t\t\tvar existingStyleTags = document.getElementsByTagName(\"style\");\n/******/ \t\t\tfor(var i = 0; i < existingStyleTags.length; i++) {\n/******/ \t\t\t\tvar tag = existingStyleTags[i];\n/******/ \t\t\t\tvar dataHref = tag.getAttribute(\"data-href\");\n/******/ \t\t\t\tif(dataHref === href || dataHref === fullhref) return tag;\n/******/ \t\t\t}\n/******/ \t\t};\n/******/ \t\tvar loadStylesheet = (chunkId) => {\n/******/ \t\t\treturn new Promise((resolve, reject) => {\n/******/ \t\t\t\tvar href = __nested_webpack_require_120346__.miniCssF(chunkId);\n/******/ \t\t\t\tvar fullhref = __nested_webpack_require_120346__.p + href;\n/******/ \t\t\t\tif(findStylesheet(href, fullhref)) return resolve();\n/******/ \t\t\t\tcreateStylesheet(chunkId, fullhref, resolve, reject);\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t\t// object to store loaded CSS chunks\n/******/ \t\tvar installedCssChunks = {\n/******/ \t\t\t\"account\": 0\n/******/ \t\t};\n/******/ \t\t\n/******/ \t\t__nested_webpack_require_120346__.f.miniCss = (chunkId, promises) => {\n/******/ \t\t\tvar cssChunks = {\"vendors-node_modules_binary-com_binary-document-uploader_DocumentUploader_js-node_modules_day-ab5b6c\":1,\"account-app\":1,\"Sections_Profile_PhoneVerification_index_ts\":1,\"Sections_Security_Passkeys_index_ts\":1,\"Sections_Security_AccountLimits_index_ts\":1,\"Sections_Security_ConnectedApps_index_ts\":1,\"Sections_Assessment_FinancialAssessment_index_ts\":1,\"Sections_Security_ApiToken_index_ts\":1,\"Sections_Security_TwoFactorAuthentication_index_ts\":1,\"Sections_Security_SelfExclusion_index_ts\":1};\n/******/ \t\t\tif(installedCssChunks[chunkId]) promises.push(installedCssChunks[chunkId]);\n/******/ \t\t\telse if(installedCssChunks[chunkId] !== 0 && cssChunks[chunkId]) {\n/******/ \t\t\t\tpromises.push(installedCssChunks[chunkId] = loadStylesheet(chunkId).then(() => {\n/******/ \t\t\t\t\tinstalledCssChunks[chunkId] = 0;\n/******/ \t\t\t\t}, (e) => {\n/******/ \t\t\t\t\tdelete installedCssChunks[chunkId];\n/******/ \t\t\t\t\tthrow e;\n/******/ \t\t\t\t}));\n/******/ \t\t\t}\n/******/ \t\t};\n/******/ \t\t\n/******/ \t\t// no hmr\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/jsonp chunk loading */\n/******/ \t(() => {\n/******/ \t\t// no baseURI\n/******/ \t\t\n/******/ \t\t// object to store loaded and loading chunks\n/******/ \t\t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n/******/ \t\t// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\n/******/ \t\tvar installedChunks = {\n/******/ \t\t\t\"account\": 0\n/******/ \t\t};\n/******/ \t\t\n/******/ \t\t__nested_webpack_require_120346__.f.j = (chunkId, promises) => {\n/******/ \t\t\t\t// JSONP chunk loading for javascript\n/******/ \t\t\t\tvar installedChunkData = __nested_webpack_require_120346__.o(installedChunks, chunkId) ? installedChunks[chunkId] : undefined;\n/******/ \t\t\t\tif(installedChunkData !== 0) { // 0 means \"already installed\".\n/******/ \t\t\n/******/ \t\t\t\t\t// a Promise means \"currently loading\".\n/******/ \t\t\t\t\tif(installedChunkData) {\n/******/ \t\t\t\t\t\tpromises.push(installedChunkData[2]);\n/******/ \t\t\t\t\t} else {\n/******/ \t\t\t\t\t\tif(true) { // all chunks have JS\n/******/ \t\t\t\t\t\t\t// setup Promise in chunk cache\n/******/ \t\t\t\t\t\t\tvar promise = new Promise((resolve, reject) => (installedChunkData = installedChunks[chunkId] = [resolve, reject]));\n/******/ \t\t\t\t\t\t\tpromises.push(installedChunkData[2] = promise);\n/******/ \t\t\n/******/ \t\t\t\t\t\t\t// start chunk loading\n/******/ \t\t\t\t\t\t\tvar url = __nested_webpack_require_120346__.p + __nested_webpack_require_120346__.u(chunkId);\n/******/ \t\t\t\t\t\t\t// create error before stack unwound to get useful stacktrace later\n/******/ \t\t\t\t\t\t\tvar error = new Error();\n/******/ \t\t\t\t\t\t\tvar loadingEnded = (event) => {\n/******/ \t\t\t\t\t\t\t\tif(__nested_webpack_require_120346__.o(installedChunks, chunkId)) {\n/******/ \t\t\t\t\t\t\t\t\tinstalledChunkData = installedChunks[chunkId];\n/******/ \t\t\t\t\t\t\t\t\tif(installedChunkData !== 0) installedChunks[chunkId] = undefined;\n/******/ \t\t\t\t\t\t\t\t\tif(installedChunkData) {\n/******/ \t\t\t\t\t\t\t\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n/******/ \t\t\t\t\t\t\t\t\t\tvar realSrc = event && event.target && event.target.src;\n/******/ \t\t\t\t\t\t\t\t\t\terror.message = 'Loading chunk ' + chunkId + ' failed.\\n(' + errorType + ': ' + realSrc + ')';\n/******/ \t\t\t\t\t\t\t\t\t\terror.name = 'ChunkLoadError';\n/******/ \t\t\t\t\t\t\t\t\t\terror.type = errorType;\n/******/ \t\t\t\t\t\t\t\t\t\terror.request = realSrc;\n/******/ \t\t\t\t\t\t\t\t\t\tinstalledChunkData[1](error);\n/******/ \t\t\t\t\t\t\t\t\t}\n/******/ \t\t\t\t\t\t\t\t}\n/******/ \t\t\t\t\t\t\t};\n/******/ \t\t\t\t\t\t\t__nested_webpack_require_120346__.l(url, loadingEnded, \"chunk-\" + chunkId, chunkId);\n/******/ \t\t\t\t\t\t}\n/******/ \t\t\t\t\t}\n/******/ \t\t\t\t}\n/******/ \t\t};\n/******/ \t\t\n/******/ \t\t// no prefetching\n/******/ \t\t\n/******/ \t\t// no preloaded\n/******/ \t\t\n/******/ \t\t// no HMR\n/******/ \t\t\n/******/ \t\t// no HMR manifest\n/******/ \t\t\n/******/ \t\t// no on chunks loaded\n/******/ \t\t\n/******/ \t\t// install a JSONP callback for chunk loading\n/******/ \t\tvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n/******/ \t\t\tvar [chunkIds, moreModules, runtime] = data;\n/******/ \t\t\t// add \"moreModules\" to the modules object,\n/******/ \t\t\t// then flag all \"chunkIds\" as loaded and fire callback\n/******/ \t\t\tvar moduleId, chunkId, i = 0;\n/******/ \t\t\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n/******/ \t\t\t\tfor(moduleId in moreModules) {\n/******/ \t\t\t\t\tif(__nested_webpack_require_120346__.o(moreModules, moduleId)) {\n/******/ \t\t\t\t\t\t__nested_webpack_require_120346__.m[moduleId] = moreModules[moduleId];\n/******/ \t\t\t\t\t}\n/******/ \t\t\t\t}\n/******/ \t\t\t\tif(runtime) var result = runtime(__nested_webpack_require_120346__);\n/******/ \t\t\t}\n/******/ \t\t\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n/******/ \t\t\tfor(;i < chunkIds.length; i++) {\n/******/ \t\t\t\tchunkId = chunkIds[i];\n/******/ \t\t\t\tif(__nested_webpack_require_120346__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n/******/ \t\t\t\t\tinstalledChunks[chunkId][0]();\n/******/ \t\t\t\t}\n/******/ \t\t\t\tinstalledChunks[chunkId] = 0;\n/******/ \t\t\t}\n/******/ \t\t\n/******/ \t\t}\n/******/ \t\t\n/******/ \t\tvar chunkLoadingGlobal = self[\"webpackChunk_deriv_account\"] = self[\"webpackChunk_deriv_account\"] || [];\n/******/ \t\tchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\n/******/ \t\tchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));\n/******/ \t})();\n/******/ \t\n/************************************************************************/\n/******/ \t\n/******/ \t// startup\n/******/ \t// Load entry module and return exports\n/******/ \t// This entry module can't be inlined because the eval-source-map devtool is used.\n/******/ \tvar __nested_webpack_exports__ = __nested_webpack_require_120346__(\"./index.tsx\");\n/******/ \t__nested_webpack_exports__ = __nested_webpack_exports__[\"default\"];\n/******/ \t\n/******/ \treturn __nested_webpack_exports__;\n/******/ })()\n;\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../account/dist/account/js/account.js\n"
                );

                /***/
            },
    },
]);
