/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.da-self-exclusion {
    max-height: 100%;
    width: 100%;
}
@media (min-width: 768px) {
    .da-self-exclusion--app-settings {
        padding: 2.4rem;
    }
}
.da-self-exclusion .dc-dialog__content {
    max-width: 100%;
    width: 100%;
    height: 100%;
}
.da-self-exclusion .dc-input__label {
    background: var(--general-main-1);
}
.da-self-exclusion .dc-field--error {
    padding-left: 0;
}
@media (max-width: 1279px) {
    .da-self-exclusion-article__content {
        margin: 1.6rem;
    }
}
.da-self-exclusion-article__content--is-in-modal {
    max-width: 440px;
    margin: 2.4rem;
}
@media (max-width: 600px) {
    .da-self-exclusion-article__content--is-in-modal {
        max-height: 480px;
        margin: 1.6rem;
    }
}
.da-self-exclusion-article__content-header-container {
    display: flex;
    align-items: center;
    justify-content: space-between;
    border-bottom: 1px solid var(--border-normal);
    padding: 0.8rem;
}
.da-self-exclusion-article__content-icon {
    cursor: pointer;
}
.da-self-exclusion-article__content-list {
    list-style: disc;
    padding-left: 1.8rem;
}
.da-self-exclusion-article__content-list li::marker {
    font-size: var(--text-size-s);
}
.da-self-exclusion-article__content-list li:first-child {
    margin-top: 2.4rem;
}
.da-self-exclusion-article__content-list li + li {
    margin-top: 3.5rem;
}
.da-self-exclusion-article__content-button {
    margin-top: 3.5rem;
}
@media (max-width: 1279px) {
    .da-self-exclusion-article__content > :last-child {
        padding-bottom: 2.4rem;
    }
}
.da-self-exclusion__confirm-limits {
    display: flex;
    justify-content: center;
    flex-direction: column;
    align-items: center;
    padding: 2.4rem;
}
.da-self-exclusion__confirm-limits-header {
    margin: 3.3rem 0 0.8rem;
}
.da-self-exclusion__confirm-limits-desc {
    margin-bottom: 2.4rem;
}
.da-self-exclusion__confirm-limits-image {
    width: 12.8rem;
    height: 12.8rem;
}
.da-self-exclusion__confirm-limits-buttons {
    display: flex;
    flex-direction: column;
    align-items: center;
}
.da-self-exclusion__confirm-limits-buttons > button:first-child {
    width: -moz-fit-content;
    width: fit-content;
    margin-bottom: 1.6rem;
}
.da-self-exclusion__confirm-limits-error {
    margin-top: 1.6rem;
    font-size: 1.4rem;
    color: var(--text-loss-danger);
    font-weight: 700;
    text-transform: none;
    text-align: center;
    line-height: 1.5;
}
.da-self-exclusion__wrapper {
    display: flex;
    width: 100%;
    height: 100%;
}
@media (max-width: 600px) {
    .da-self-exclusion__wrapper:not(.da-self-exclusion__wrapper--show-article) {
        max-height: calc(100% - 72px);
    }
}
@media (max-width: 1279px) {
    .da-self-exclusion__wrapper {
        flex-direction: column;
        overflow-y: auto;
    }
}
.da-self-exclusion__error {
    margin-top: 1.6rem;
    margin-bottom: 1.6rem;
}
.da-self-exclusion__confirm {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
}
@media (max-width: 1279px) {
    .da-self-exclusion__confirm {
        padding: 1.6rem;
    }
}
.da-self-exclusion__confirm-header {
    margin-top: 3.6rem;
    margin-bottom: 1.4rem;
}
.da-self-exclusion__confirm-item {
    display: grid;
    grid-template-columns: 1fr 1fr;
    grid-gap: 1.6rem;
    padding: 1.6rem 0;
    border-bottom: 1px solid var(--border-normal);
    max-width: 40rem;
    width: 100%;
}
.da-self-exclusion__confirm-note {
    margin: 2.4rem 0;
    max-width: 67.2rem;
}
[dir='ltr'] .da-self-exclusion__back {
    text-align: left;
}
[dir='rtl'] .da-self-exclusion__back {
    text-align: right;
}
.da-self-exclusion__back {
    font-size: 1.4rem;
    color: var(--text-prominent);
    font-weight: 700;
    text-transform: none;
    line-height: 1.5;
    display: flex;
    align-items: center;
    cursor: pointer;
}
.da-self-exclusion__back:hover {
    text-decoration: underline;
}
.da-self-exclusion__back > svg {
    width: 1.6rem;
    height: 1.6rem;
    margin-right: 0.8rem;
}
.da-self-exclusion__form {
    margin-right: 1rem;
    height: 100%;
}
@media (max-width: 1279px) {
    .da-self-exclusion__form {
        margin: 1.6rem;
        padding-bottom: 1.6rem;
    }
}
[dir='ltr'] .da-self-exclusion__header {
    text-align: left;
}
[dir='rtl'] .da-self-exclusion__header {
    text-align: right;
}
.da-self-exclusion__header {
    font-size: 1.4rem;
    color: var(--text-prominent);
    font-weight: 700;
    text-transform: none;
    line-height: 1.5;
    margin-bottom: 1.6rem;
    margin-top: 2.4rem;
}
.da-self-exclusion__header-border {
    display: flex;
    white-space: nowrap;
}
.da-self-exclusion__header-border:after {
    border-top: 1px solid var(--general-section-1);
    content: '';
    height: 100%;
    width: 100%;
    margin-top: 0.8rem;
    display: block;
    margin-left: 0.8rem;
}
.da-self-exclusion__header:first-child {
    margin-top: 0;
}
.da-self-exclusion__item {
    background: var(--general-main-1);
    border: 1px solid var(--border-normal);
    padding: 1.6rem;
    border-radius: 4px;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
}
.da-self-exclusion__item-wrapper {
    display: grid;
    grid-template-columns: 1fr 1fr 1fr;
    grid-gap: 1.6rem;
}
@media (min-width: 601px) and (max-width: 1279px) {
    .da-self-exclusion__item-wrapper {
        grid-template-columns: 2fr 2fr;
    }
}
@media (max-width: 600px) {
    .da-self-exclusion__item-wrapper {
        grid-template-columns: 1fr;
    }
}
[dir='ltr'] .da-self-exclusion__item-title {
    text-align: left;
}
[dir='rtl'] .da-self-exclusion__item-title {
    text-align: right;
}
.da-self-exclusion__item-title {
    font-size: 1.4rem;
    color: var(--text-prominent);
    font-weight: 700;
    text-transform: none;
    line-height: 1.5;
    margin-bottom: 0.8rem;
}
.da-self-exclusion__item-field {
    margin-bottom: 1.4rem;
}
.da-self-exclusion__link {
    color: var(--text-general);
}
.da-self-exclusion__scrollbars {
    height: 100%;
    width: 100%;
    flex: 1;
}
@media (max-width: 1279px) {
    .da-self-exclusion__button {
        width: 100%;
    }
}
.da-self-exclusion__button-wrapper {
    position: sticky;
    bottom: 0;
    left: 0;
    width: 100%;
    height: 7.2rem;
    padding: 1.4rem 2.4rem;
    background-color: var(--general-main-1);
    border-top: 1px solid var(--border-normal);
    display: flex;
    align-items: center;
    justify-content: flex-end;
    margin-top: 2.4rem;
}
@media (max-width: 600px) {
    .da-self-exclusion__button-wrapper {
        position: absolute;
    }
}
@media (min-width: 601px) and (max-width: 1279px) {
    .da-self-exclusion__button-wrapper {
        padding: 0;
    }
}
.da-self-exclusion__warning {
    background-color: rgba(255, 173, 58, 0.3);
    border-radius: 4px;
    margin-top: 0.8rem;
    position: relative;
}
.da-self-exclusion__warning-icon {
    position: absolute;
    top: 0.8rem;
    left: 0.8rem;
}
.da-self-exclusion__warning-textbox {
    padding: 0.9rem 3.2rem;
}
.da-self-exclusion__warning-link {
    color: var(--text-general);
    cursor: pointer;
    font-weight: bold;
    text-decoration: none;
}
.da-self-exclusion__portal-footer {
    display: flex;
    justify-content: space-between;
    padding: 0 2.4rem;
    background-color: var(--general-main-2);
    width: 100%;
    align-items: center;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.da-article {
    background-color: var(--general-section-1);
    width: 25.6rem;
    padding: 1.6rem 2.4rem;
    height: -moz-fit-content;
    height: fit-content;
    border-radius: 8px;
}
@media (min-width: 1280px) {
    [dir='ltr'] .da-article {
        margin-left: 1.2rem;
    }
    [dir='rtl'] .da-article {
        margin-right: 1.2rem;
    }
}
@media (max-width: 1279px) {
    .da-article {
        width: calc(100% - 3.2rem);
        margin: 1.6rem;
    }
}
.da-article__header {
    margin-bottom: 0.8rem;
}
.da-article__list {
    list-style-type: disc;
    padding-left: 1.6rem;
}
.da-article__list s li::marker {
    font-size: var(--text-size-xs);
}
.da-article__list li + li {
    margin-top: 0.8rem;
}
.da-article__learn-more {
    cursor: pointer;
    margin-top: 1.6rem;
    display: flex;
    align-items: center;
}
.da-article__learn-more:hover {
    -webkit-text-decoration: underline var(--brand-red-coral);
    text-decoration: underline var(--brand-red-coral);
}
.da-article__learn-more-icon {
    margin-left: 0.4rem;
}
