/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-icon {
    --fill-color1: var(--text-general);
    --fill-color2: var(--text-less-prominent);
    --fill-color3: var(--general-section-1);
    --fill-color4: var(--icon-grey-background);
    --fill-color5: var(--text-prominent);
}

.dc-icon--disabled {
    --fill-color1: var(--text-disabled);
    --fill-color2: var(--text-disabled);
}

.dc-icon--active {
    --fill-color1: #ffffff;
    --fill-color2: #ffffff;
}

.dc-icon--green {
    --fill-color1: var(--text-profit-success);
    --fill-color2: var(--text-profit-success);
    --fill-color3: #ffffff;
}

.dc-icon--red {
    --fill-color1: var(--text-loss-danger);
    --fill-color2: var(--text-loss-danger);
    --fill-color3: #ffffff;
}

.dc-icon--secondary {
    --fill-color1: var(--text-less-prominent);
    --fill-color2: var(--text-less-prominent);
    --fill-color3: #ffffff;
}

.dc-icon--brand {
    --fill-color1: var(--brand-red-coral);
    --fill-color2: var(--brand-secondary);
    --fill-color3: #ffffff;
}

.dc-icon--black {
    --fill-color1: var(--icon-black-plus);
}

.dc-icon--orange {
    --fill-color1: var(--status-warning);
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
/* @define dc-accordion */
.dc-accordion__wrapper {
    /* postcss-bem-linter: ignore */
}

.dc-accordion__wrapper > div:last-child {
    border-bottom-right-radius: 4px;
    border-bottom-left-radius: 4px;
    border-bottom-width: 1px;
}

.dc-accordion__item {
    border: 1px solid var(--general-section-1);
    border-bottom-width: 0;
    color: var(--text-general);
    font-size: 1.4rem;
}

.dc-accordion__item--first {
    border-top-right-radius: 4px;
    border-top-left-radius: 4px;
}

.dc-accordion__item--open .dc-accordion__item-header {
    border-bottom: 1px solid var(--general-section-1);
}

.dc-accordion__item--open .dc-accordion__item-content {
    display: block;
}

.dc-accordion__item--close .dc-accordion__item-content {
    display: none;
}

.dc-accordion__item-header {
    cursor: pointer;
    line-height: 1.43;
    padding: 8px 16px;
}

.dc-accordion__item-header-icon {
    vertical-align: middle;
    /* postcss-bem-linter: ignore */
}

[dir='ltr'] .dc-accordion__item-header-icon-wrapper {
    float: right;
    padding-left: 16px;
}

[dir='rtl'] .dc-accordion__item-header-icon-wrapper {
    float: left;
    padding-right: 16px;
}

.dc-accordion__item-header-icon path,
.dc-accordion__item-header-icon rect {
    fill: var(--text-general);
}

.dc-accordion__item-content {
    padding: 16px;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-field {
    position: absolute;
    top: 4.1rem;
    font-size: var(--text-size-xxs);
    line-height: 1.25;
}

[dir='ltr'] .dc-field {
    text-align: left !important;
}

[dir='rtl'] .dc-field {
    text-align: right !important;
}

[dir='ltr'] .dc-field--error {
    text-align: left;
}

[dir='rtl'] .dc-field--error {
    text-align: right;
}

.dc-field--error {
    font-size: 1.2rem;
    color: var(--text-loss-danger);
    font-weight: 400;
    text-transform: none;
    line-height: 1.25;
    line-height: 1;
}

[dir='ltr'] .dc-field--error {
    padding-left: 1.1rem;
}

[dir='rtl'] .dc-field--error {
    padding-right: 1.1rem;
}

[dir='ltr'] .dc-field--warn {
    text-align: left;
}

[dir='rtl'] .dc-field--warn {
    text-align: right;
}

.dc-field--warn {
    padding-top: 0.4rem;
    font-size: 1.2rem;
    color: var(--text-general);
    font-weight: 400;
    text-transform: none;
    line-height: 1.25;
    color: #999999;
}

[dir='ltr'] .dc-field--warn {
    padding-left: 1.2rem;
}

[dir='rtl'] .dc-field--warn {
    padding-right: 1.2rem;
}

.dc-input__footer .dc-field {
    position: relative;
    top: auto;
    top: initial;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-input {
    position: relative;
    width: 100%;
    display: flex;
    flex-direction: column;
    margin-bottom: 3.2rem;
    line-height: 1.43;
}

.dc-input:hover:not(.dc-input--disabled) {
    border-color: var(--border-hover);
}

.dc-input[focus-within] {
    border-color: var(--brand-secondary);
}

.dc-input:focus-within {
    border-color: var(--brand-secondary);
}

.dc-input[focus-within]:hover {
    border-color: var(--brand-secondary);
}

.dc-input:focus-within:hover {
    border-color: var(--brand-secondary);
}

.dc-input--bottom-label-active {
    margin-bottom: 0;
    margin-bottom: initial;
}

.dc-input--bottom-label-active.dc-input--error {
    margin-bottom: calc(5rem - 12px);
}

.dc-input__bottom-label {
    margin-bottom: calc(3.2rem - 12px);
}

[dir='ltr'] .dc-input__bottom-label {
    margin-left: 1.2rem;
}

[dir='rtl'] .dc-input__bottom-label {
    margin-right: 1.2rem;
}

.dc-input--disabled {
    border-color: var(--border-normal);
}

.dc-input--disabled .dc-datepicker__display-text {
    color: var(--text-less-prominent);
}

@media (max-width: 992px) {
    .dc-input--error {
        margin-bottom: 5rem;
    }
}

.dc-input--error label {
    color: var(--brand-red-coral) !important;
}

.dc-input--error ::-moz-placeholder {
    color: var(--text-loss-danger) !important;
    opacity: 1 !important;
}

.dc-input--error ::placeholder {
    color: var(--text-loss-danger) !important;
    opacity: 1 !important;
}

.dc-input__container {
    display: flex;
    align-items: center;
    border-radius: 4px;
    border: 1px solid var(--border-normal);
    padding: 0.5rem 1.2rem;
    height: 4rem;
}

.dc-input__container:hover:not(.dc-input--disabled) {
    border-color: var(--general-disabled);
}

.dc-input__container[focus-within] {
    border-color: var(--brand-secondary);
}

.dc-input__container:focus-within {
    border-color: var(--brand-secondary);
}

.dc-input__container[focus-within]:hover {
    border-color: var(--brand-secondary);
}

.dc-input__container:focus-within:hover {
    border-color: var(--brand-secondary);
}

.dc-input__container--error {
    border-color: var(--brand-red-coral) !important;
}

.dc-input__container--disabled {
    border-color: var(--general-disabled);
}

.dc-input__field {
    background: none;
    color: var(--text-prominent);
    font-size: var(--text-size-xs);
    width: 100%;
    height: 100%;
    min-width: 0;
    /* Not empty fields */
    /* To get rid of ugly chrome autofill shadow dom-applied background color */
}

.dc-input__field::-moz-placeholder {
    line-height: 1.5;
    opacity: 0;
    -moz-transition: opacity 0.25s;
    transition: opacity 0.25s;
    /* To vertically align placeholder in Firefox */
}

.dc-input__field::placeholder {
    line-height: 1.5;
    opacity: 0;
    transition: opacity 0.25s;
    /* To vertically align placeholder in Firefox */
}

@-moz-document url-prefix("") {
    .dc-input__field::-moz-placeholder {
        line-height: 1.25;
    }
    .dc-input__field::placeholder {
        line-height: 1.25;
    }
}

.dc-input__field--placeholder-visible::-moz-placeholder {
    opacity: 0.4;
}

.dc-input__field--placeholder-visible::placeholder {
    opacity: 0.4;
}

.dc-input__field:focus,
.dc-input__field:not(:focus):not([value='']) {
    outline: none;
}

.dc-input__field:focus ~ label,
.dc-input__field:not(:focus):not([value='']) ~ label {
    transform: translate(0, -1.8rem) scale(0.75);
    padding: 0 4px;
}

.dc-input__field:disabled {
    -webkit-text-fill-color: var(--text-less-prominent);
    opacity: 1;
    color: var(--text-less-prominent);
    /* stylelint-disable */
    /* stylelint-enable */
}

.dc-input__field:disabled ~ label {
    color: var(--text-less-prominent) !important;
}

.dc-input__field:disabled ~ svg .color1-fill {
    fill: var(--text-less-prominent);
}

@media not all and (-webkit-min-device-pixel-ratio: 0), not all and (min-resolution: 0.001dpcm) {
    @supports (-webkit-appearance: none) {
        .dc-input__field:disabled {
            color: var(--text-prominent);
        }
    }
}

.dc-input__field:focus {
    outline: none;
}

.dc-input__field:focus ~ label {
    color: var(--brand-secondary);
}

.dc-input__field:focus::-moz-placeholder {
    opacity: 0.4;
}

.dc-input__field:focus::placeholder {
    opacity: 0.4;
}

.dc-input__field:not(.dc-input--no-placeholder):not(:focus):not([value='']) ~ label {
    color: var(--text-general);
}

.dc-input__field[type='number']::-webkit-inner-spin-button,
.dc-input__field[type='number']::-webkit-outer-spin-button {
    -webkit-appearance: none;
    margin: 0;
}

.dc-input__field[type='number'] {
    -moz-appearance: textfield;
}

.dc-input__field[type='textarea'] {
    height: 9.6rem;
    border: none;
    resize: none;
}

.dc-input__field[type='textarea'] ~ .dc-field--error {
    top: 10rem;
}

.dc-input__field:-webkit-autofill {
    -webkit-box-shadow: 0 0 0 30px var(--fill-normal) inset !important;
    -webkit-text-fill-color: var(--text-prominent) !important;
}

.dc-input__field:-webkit-autofill {
    border-radius: 4px;
}

.dc-input__field:-webkit-autofill:hover,
.dc-input__field:-webkit-autofill:focus,
.dc-input__field:-webkit-autofill:active {
    -webkit-box-shadow: 0 0 0 30px var(--fill-normal) inset !important;
}

.dc-input__field::-ms-reveal {
    display: none;
}

.dc-input__textarea:not(.dc-input--no-placeholder):not(:focus):empty ~ label {
    transform: none;
    color: var(--text-less-prominent);
    padding: 0 4px;
}

.dc-input__leading-icon {
    top: 1rem;
    position: absolute;
    pointer-events: none;
    cursor: text;
    font-size: var(--text-size-xs);
}

[dir='ltr'] .dc-input__leading-icon {
    margin-left: 1rem;
    left: 0;
}

[dir='rtl'] .dc-input__leading-icon {
    margin-right: 1rem;
    right: 0;
}

.dc-input__leading-icon.symbols {
    top: 0.9rem;
}

[dir='ltr'] .dc-input__leading-icon.symbols + .dc-input__field {
    padding-left: 4rem;
}

[dir='rtl'] .dc-input__leading-icon.symbols + .dc-input__field {
    padding-right: 4rem;
}

[dir='ltr'] .dc-input__leading-icon.symbols--usdc + .dc-input__field,
[dir='ltr'] .dc-input__leading-icon.symbols--ust + .dc-input__field {
    padding-left: 4.8rem;
}

[dir='rtl'] .dc-input__leading-icon.symbols--usdc + .dc-input__field,
[dir='rtl'] .dc-input__leading-icon.symbols--ust + .dc-input__field {
    padding-right: 4.8rem;
}

.dc-input__trailing-icon {
    font-size: var(--text-size-xs);
}

[dir='ltr'] .dc-input__trailing-icon {
    right: 0;
}

[dir='rtl'] .dc-input__trailing-icon {
    left: 0;
}

.dc-input__trailing-icon.symbols {
    top: 0.9rem;
}

[dir='ltr'] .dc-input__trailing-icon.symbols + .dc-input__field {
    padding-right: 4rem;
}

[dir='rtl'] .dc-input__trailing-icon.symbols + .dc-input__field {
    padding-left: 4rem;
}

.dc-input__trailing-icon.symbols--usd {
    top: 1rem;
    position: absolute;
}

[dir='ltr'] .dc-input__trailing-icon.symbols--usd {
    right: 1.1rem;
}

[dir='rtl'] .dc-input__trailing-icon.symbols--usd {
    left: 1.1rem;
}

[dir='ltr'] .dc-input__trailing-icon.symbols--usdc + .dc-input__field,
[dir='ltr'] .dc-input__trailing-icon.symbols--ust + .dc-input__field {
    padding-right: 4.8rem;
}

[dir='rtl'] .dc-input__trailing-icon.symbols--usdc + .dc-input__field,
[dir='rtl'] .dc-input__trailing-icon.symbols--ust + .dc-input__field {
    padding-left: 4.8rem;
}

.dc-input__label {
    white-space: nowrap;
    color: var(--text-less-prominent);
    font-size: var(--text-size-xs);
    background-color: var(--general-main-1);
    position: absolute;
    pointer-events: none;
    top: 1.1rem;
    transition: 0.25s ease all;
    text-overflow: ellipsis;
    overflow: hidden;
    max-width: calc(100% - 1.4rem);
}

[dir='ltr'] .dc-input__label {
    left: 1.1rem;
    transform-origin: top left;
}

[dir='rtl'] .dc-input__label {
    right: 1.1rem;
    transform-origin: top right;
}

.dc-input:not(.dc-input--no-placeholder) .dc-input:not(.dc-input--no-placeholder) __label {
    color: var(--text-general);
    transition: 0.25s ease all;
    transform: translateZ(0);
}

[dir='ltr'] .dc-input__hint {
    margin: 0.1rem 0 -1.9rem 1.3rem;
}

[dir='rtl'] .dc-input__hint {
    margin: 0.1rem 1.3rem -1.9rem 0;
}

.dc-input__hint--relative {
    position: relative;
    top: auto;
    top: initial;
}

[dir='ltr'] .dc-input__hint--relative {
    margin-left: 1.2rem;
}

[dir='rtl'] .dc-input__hint--relative {
    margin-right: 1.2rem;
}

.dc-input__counter {
    color: var(--text-less-prominent);
    font-size: 1.2rem;
}

[dir='ltr'] .dc-input__counter {
    margin-left: 1.2rem;
}

[dir='rtl'] .dc-input__counter {
    margin-right: 1.2rem;
}

.dc-input--no-placeholder label {
    transform: translate(0, -1.8rem) scale(0.75);
    color: var(--text-prominent);
    padding: 0 4px;
    background-color: var(--fill-normal);
}

.dc-input__footer {
    display: flex;
    flex-direction: row;
    margin-bottom: -1.6rem;
}

[dir='ltr'] .dc-input__footer > :not(.dc-input__counter) {
    margin-right: 1.2rem;
}

[dir='rtl'] .dc-input__footer > :not(.dc-input__counter) {
    margin-left: 1.2rem;
}

[dir='ltr'] .dc-input__footer > .dc-input__counter {
    margin-left: auto;
}

[dir='rtl'] .dc-input__footer > .dc-input__counter {
    margin-right: auto;
}

.dc-input__wrapper {
    margin-bottom: 1.6rem;
}

[dir='ltr'] .dc-input__input-group {
    border-right-style: none;
    border-radius: 4px 0 0 4px;
}

[dir='rtl'] .dc-input__input-group {
    border-left-style: none;
    border-radius: 0 4px 4px 0;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-text {
    font-size: var(--text-size);
    color: var(--text-color);
    line-height: var(--text-lh);
    font-weight: var(--text-weight);
    text-align: var(--text-align);
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.amount-input-wrapper {
    display: flex;
    flex-direction: column;
    padding: 0.8rem;
    height: auto;
}

.amount-input-container {
    position: relative;
    height: 2.8rem;
}

.amount-input-container .dc-input__field {
    color: var(--text-general);
}

.amount-input-container--error .dc-input__field {
    color: var(--text-loss-danger);
    -webkit-text-fill-color: var(--text-loss-danger);
}

.amount-input-container--disabled .dc-input__field {
    color: var(--text-disabled-1);
}

@media (min-width: 320px) and (max-width: 767px) {
    .amount-input-container {
        height: 2.4rem;
    }
}

.amount-input {
    position: absolute;
    border: none;
    flex: 1;
    margin: 0;
    padding: 0;
    height: 100%;
    width: 100%;
}

.amount-input input {
    font-size: var(--text-size-sm);
    font-weight: var(--text-weight-bold);
}

@media (min-width: 320px) and (max-width: 767px) {
    .amount-input input {
        font-size: var(--text-size-s);
    }
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-dropdown-list {
    position: absolute;
    margin-top: 4px;
    border-radius: 4px;
    z-index: 1;
    box-shadow: 0 4px 6px 0 rgba(0, 0, 0, 0.24);
    transform-origin: top;
    transition:
        transform 0.25s ease,
        opacity 0.25s linear;
    transform: scale(1, 0);
    cursor: pointer;
    background-color: var(--state-normal);
}

.dc-dropdown-list--enter,
.dc-dropdown-list--exit {
    transform: scale(1, 0);
    opacity: 0;
}

.dc-dropdown-list--enter-done {
    transform: scale(1, 1);
    opacity: 1;
}

.dc-dropdown-list__group-header {
    padding: 0.6rem;
    font-size: 1.4rem;
    font-weight: bold;
    color: var(--brand-red-coral);
    height: 3.6rem;
    display: flex;
    align-items: center;
    justify-content: center;
}

.dc-dropdown-list__item {
    min-height: 40px;
    display: flex;
    align-items: center;
    padding: 1rem 1.6rem;
    font-size: 1.4rem;
    color: var(--text-general);
}

.dc-dropdown-list__item:hover {
    background-color: var(--state-hover);
}

.dc-dropdown-list__item--active {
    background-color: var(--state-active);
}

[dir='ltr'] .dc-dropdown-list__item-icon {
    margin-right: 8px;
}

[dir='rtl'] .dc-dropdown-list__item-icon {
    margin-left: 8px;
}

.dc-dropdown-list__item--disabled {
    color: var(--text-disabled);
    cursor: not-allowed;
}

.dc-dropdown-list__separator {
    display: flex;
    width: calc(100% - 3.2rem);
    border-bottom: 1px solid var(--border-normal);
    margin: 1.6rem;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-autocomplete {
    width: 100%;
    position: relative;
}

.dc-autocomplete__trailing-icon {
    position: absolute;
    pointer-events: none;
    cursor: text;
    transition: transform 0.2s ease;
    transform: rotate(0deg);
    transform-origin: 50% 45%;
}

[dir='ltr'] .dc-autocomplete__trailing-icon {
    right: 0;
    margin-right: 1.1rem;
}

[dir='rtl'] .dc-autocomplete__trailing-icon {
    left: 0;
    margin-left: 1.1rem;
}

[dir='ltr'] .dc-autocomplete__trailing-icon--opened {
    transform: rotate(-180deg);
}

[dir='rtl'] .dc-autocomplete__trailing-icon--opened {
    transform: rotate(180deg);
}

.dc-autocomplete__trailing-icon--disabled {
    --fill-color1: var(--text-less-prominent) !important;
}

.dc-autocomplete__trailing-icon .color1-fill {
    fill: var(--text-less-prominent);
}

.dc-autocomplete .dc-input {
    margin-bottom: 0;
}

.dc-autocomplete .dc-input--error .dc-autocomplete__trailing-icon .color1-fill {
    fill: var(--text-loss-danger);
}

.dc-autocomplete .dc-input__field {
    white-space: nowrap;
    text-overflow: ellipsis;
}

.dc-autocomplete .dc-dropdown-list {
    box-shadow: 0 8px 16px 0 var(--shadow-menu);
    background: var(--general-main-2);
}

.dc-autocomplete:focus,
.dc-autocomplete[focus-within],
.dc-autocomplete:active {
    outline: 0;
}

.dc-autocomplete:focus,
.dc-autocomplete:focus-within,
.dc-autocomplete:active {
    outline: 0;
}

.dc-autocomplete:focus .dc-input:not(.dc-input--error) .dc-autocomplete__trailing-icon .color1-fill,
.dc-autocomplete[focus-within] .dc-input:not(.dc-input--error) .dc-autocomplete__trailing-icon .color1-fill,
.dc-autocomplete:active .dc-input:not(.dc-input--error) .dc-autocomplete__trailing-icon .color1-fill {
    fill: var(--brand-secondary);
}

.dc-autocomplete:focus .dc-input:not(.dc-input--error) .dc-autocomplete__trailing-icon .color1-fill,
.dc-autocomplete:focus-within .dc-input:not(.dc-input--error) .dc-autocomplete__trailing-icon .color1-fill,
.dc-autocomplete:active .dc-input:not(.dc-input--error) .dc-autocomplete__trailing-icon .color1-fill {
    fill: var(--brand-secondary);
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.skeleton {
    width: 100%;
    height: 100%;
    background-color: var(--semantic-color-monochrome-surface-normal-lowest);
    border-radius: var(--semantic-borderRadius-md);
}

.skeleton.animated {
    animation: var(--motion-duration-moderate) ease-out alternate infinite pulsate;
}

@keyframes pulsate {
    to {
        background-color: var(--semantic-color-monochrome-surface-normal-low);
    }
}

.skeleton.icon {
    width: var(--size-generic-md);
    height: var(--size-generic-md);
}

.skeleton-paragraph {
    display: flex;
    flex-direction: column;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
/** @define barspinner */
.barspinner {
    margin: auto;
    width: 6rem;
    height: 2rem;
    white-space: nowrap;
}

.barspinner__rect {
    margin: 0.4rem;
    border-radius: 20px;
    height: 60%;
    width: 0.6rem;
    display: inline-block;
    animation: sk-stretchdelay 1.2s infinite ease-in-out;
}

.barspinner__rect--1 {
    animation-delay: -1.2s;
}

.barspinner__rect--2 {
    animation-delay: -1.1s;
}

.barspinner__rect--3 {
    animation-delay: -1s;
}

.barspinner__rect--4 {
    animation-delay: -0.9s;
}

.barspinner__rect--5 {
    animation-delay: -0.8s;
}

.barspinner--dark .barspinner__rect {
    background-color: var(--brand-secondary);
}

@keyframes sk-stretchdelay {
    0%,
    40%,
    100% {
        transform: scaleY(1);
    }

    20% {
        transform: scaleY(2);
    }
}
/** @define initial-loader */
.initial-loader {
    width: 100%;
    height: 100%;
    justify-content: center;
    align-items: center;
    flex-direction: column;
    display: flex;
    background: transparent;
}

.initial-loader--fullscreen {
    width: 100vw;
    height: 100vh;
}

@media (min-width: 1024px) {
    .initial-loader--fullscreen {
        height: calc(100vh - 48px - 36px);
    }
}

@media (min-width: 320px) and (max-width: 767px) {
    .initial-loader--fullscreen {
        height: calc(100vh - 40px);
    }
}

.initial-loader__barspinner {
    margin: 5rem auto;
}

.initial-loader__barspinner--rect {
    background-color: var(--brand-secondary);
}

.loading-dtrader-v2__trade,
.loading-dtrader-v2__positions,
.loading-dtrader-v2__contract-details {
    display: flex;
    flex-direction: column;
    height: 100%;
}

.loading-dtrader-v2__trade {
    background-color: var(--semantic-color-slate-solid-surface-frame-mid);
    padding: 0 var(--core-spacing-400);
    gap: var(--semantic-spacing-general-sm);
    position: relative;
    overflow-x: hidden;
}

.loading-dtrader-v2__trade .skeleton-box,
.loading-dtrader-v2__trade .skeleton-box__trade-types,
.loading-dtrader-v2__trade .skeleton-box__trade-params,
.loading-dtrader-v2__trade .skeleton-box__chart {
    display: flex;
    flex-direction: column;
    border-radius: var(--semantic-borderRadius-md);
    background-color: var(--component-modal-bg);
}

[dir='ltr'] .loading-dtrader-v2__trade .skeleton-box__trade-types,
[dir='ltr'] .loading-dtrader-v2__trade .skeleton-box__trade-types__trade-types,
[dir='ltr'] .loading-dtrader-v2__trade .skeleton-box__trade-params__trade-types,
[dir='ltr'] .loading-dtrader-v2__trade .skeleton-box__chart__trade-types {
    left: calc(-1 * var(--semantic-spacing-general-sm));
}

[dir='rtl'] .loading-dtrader-v2__trade .skeleton-box__trade-types,
[dir='rtl'] .loading-dtrader-v2__trade .skeleton-box__trade-types__trade-types,
[dir='rtl'] .loading-dtrader-v2__trade .skeleton-box__trade-params__trade-types,
[dir='rtl'] .loading-dtrader-v2__trade .skeleton-box__chart__trade-types {
    right: calc(-1 * var(--semantic-spacing-general-sm));
}

.loading-dtrader-v2__trade .skeleton-box__trade-types,
.loading-dtrader-v2__trade .skeleton-box__trade-types__trade-types,
.loading-dtrader-v2__trade .skeleton-box__trade-params__trade-types,
.loading-dtrader-v2__trade .skeleton-box__chart__trade-types {
    position: relative;
    width: 100vw;
    flex-direction: row;
    flex-wrap: nowrap;
    border-radius: 0;
    border-radius: initial;
    padding: var(--semantic-spacing-general-sm) var(--semantic-spacing-general-md);
    gap: var(--semantic-spacing-general-sm);
}

.loading-dtrader-v2__trade .skeleton-box__trade-types .skeleton,
.loading-dtrader-v2__trade .skeleton-box__trade-types__trade-types .skeleton,
.loading-dtrader-v2__trade .skeleton-box__trade-params__trade-types .skeleton,
.loading-dtrader-v2__trade .skeleton-box__chart__trade-types .skeleton {
    flex-shrink: 0;
}

.loading-dtrader-v2__trade .skeleton-box__market,
.loading-dtrader-v2__trade .skeleton-box__trade-types__market,
.loading-dtrader-v2__trade .skeleton-box__trade-params__market,
.loading-dtrader-v2__trade .skeleton-box__chart__market {
    padding: 0 var(--semantic-spacing-general-sm);
}

.loading-dtrader-v2__trade .skeleton-box__trade-params,
.loading-dtrader-v2__trade .skeleton-box__trade-types__trade-params,
.loading-dtrader-v2__trade .skeleton-box__trade-params__trade-params,
.loading-dtrader-v2__trade .skeleton-box__chart__trade-params {
    padding: var(--semantic-spacing-general-md);
    gap: var(--semantic-spacing-general-md);
}

.loading-dtrader-v2__trade .skeleton-box__trade-params-row,
.loading-dtrader-v2__trade .skeleton-box__trade-types__trade-params-row,
.loading-dtrader-v2__trade .skeleton-box__trade-params__trade-params-row,
.loading-dtrader-v2__trade .skeleton-box__chart__trade-params-row {
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.loading-dtrader-v2__trade .skeleton-box__trade-params-column,
.loading-dtrader-v2__trade .skeleton-box__trade-types__trade-params-column,
.loading-dtrader-v2__trade .skeleton-box__trade-params__trade-params-column,
.loading-dtrader-v2__trade .skeleton-box__chart__trade-params-column {
    display: flex;
    flex-direction: column;
    gap: var(--semantic-spacing-general-sm);
}

.loading-dtrader-v2__trade .skeleton-box__chart,
.loading-dtrader-v2__trade .skeleton-box__trade-types__chart,
.loading-dtrader-v2__trade .skeleton-box__trade-params__chart,
.loading-dtrader-v2__trade .skeleton-box__chart__chart {
    min-height: 400px;
    padding: var(--semantic-spacing-general-sm);
}

.loading-dtrader-v2__positions {
    width: 100%;
    background-color: var(--semantic-color-slate-solid-surface-frame-mid);
}

.loading-dtrader-v2__positions .skeleton-box__filters,
.loading-dtrader-v2__positions .skeleton-box__total-pnl-or-date {
    display: flex;
    gap: var(--semantic-spacing-gap-md);
    margin: var(--semantic-spacing-gap-md) 0;
    padding: 0 var(--semantic-spacing-gap-md);
}

.loading-dtrader-v2__positions .skeleton-box__tabs {
    display: flex;
    background-color: var(--component-modal-bg);
    width: 100%;
    justify-content: space-around;
    padding: 1.3rem 0;
}

.loading-dtrader-v2__positions .skeleton-box__total-pnl-or-date {
    justify-content: space-between;
}

.loading-dtrader-v2__positions .skeleton-box__contract-cards {
    width: 100%;
    display: flex;
    flex-direction: column;
    gap: var(--semantic-spacing-gap-md);
    padding: 0 var(--semantic-spacing-gap-md);
}

.loading-dtrader-v2__contract-details {
    background-color: var(--semantic-color-slate-solid-surface-frame-mid);
    padding: var(--core-spacing-400);
    gap: var(--semantic-spacing-general-sm);
}

.loading-dtrader-v2__contract-details .skeleton-box,
.loading-dtrader-v2__contract-details .skeleton-box__chart,
.loading-dtrader-v2__contract-details .skeleton-box__details {
    display: flex;
    flex-direction: column;
    border-radius: var(--semantic-borderRadius-md);
    background-color: var(--component-modal-bg);
}

.loading-dtrader-v2__contract-details .skeleton-box__chart,
.loading-dtrader-v2__contract-details .skeleton-box__chart__chart,
.loading-dtrader-v2__contract-details .skeleton-box__details__chart {
    min-height: 360px;
    padding: var(--semantic-spacing-general-sm);
}

.loading-dtrader-v2__contract-details .skeleton-box__details,
.loading-dtrader-v2__contract-details .skeleton-box__chart__details,
.loading-dtrader-v2__contract-details .skeleton-box__details__details {
    padding: var(--semantic-spacing-general-md);
    gap: var(--semantic-spacing-general-md);
}

.loading-dtrader-v2__contract-details .skeleton-box__details-row,
.loading-dtrader-v2__contract-details .skeleton-box__chart__details-row,
.loading-dtrader-v2__contract-details .skeleton-box__details__details-row {
    display: flex;
    justify-content: space-between;
    padding-top: var(--semantic-spacing-general-sm);
}

.loading-dtrader-v2__contract-details .skeleton-box__details-row:first-child,
.loading-dtrader-v2__contract-details .skeleton-box__chart__details-row:first-child,
.loading-dtrader-v2__contract-details .skeleton-box__details__details-row:first-child {
    padding-top: 0;
    padding-top: initial;
}

.loading-dtrader-v2__contract-details .skeleton-box__details-row:not(:last-child),
.loading-dtrader-v2__contract-details .skeleton-box__chart__details-row:not(:last-child),
.loading-dtrader-v2__contract-details .skeleton-box__details__details-row:not(:last-child) {
    border-bottom: 1px solid var(--semantic-color-monochrome-border-normal-mid);
    padding-bottom: var(--semantic-spacing-general-sm);
}

.loading-dtrader-v2__contract-details .skeleton-box__details-column,
.loading-dtrader-v2__contract-details .skeleton-box__chart__details-column,
.loading-dtrader-v2__contract-details .skeleton-box__details__details-column {
    display: flex;
    flex-direction: column;
    align-items: flex-end;
    gap: var(--semantic-spacing-general-2xs);
}

.loading-dtrader-v2__contract-card {
    width: 100%;
    height: 10.4rem;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    gap: var(--semantic-spacing-gap-md);
    flex-shrink: 0;
    padding: var(--semantic-spacing-general-md);
    border-radius: var(--semantic-borderRadius-md);
    background-color: var(--component-modal-bg);
}

.loading-dtrader-v2__contract-card .details,
.loading-dtrader-v2__contract-card .status-and-profit {
    display: flex;
    gap: var(--core-spacing-400);
    align-items: center;
}

.loading-dtrader-v2__contract-card .status-and-profit {
    justify-content: space-between;
}

.loading-dtrader-v2__contract-card .title {
    display: flex;
    flex-direction: column;
    flex-grow: 1;
    gap: var(--semantic-spacing-general-xs);
}

.loading-dtrader-v2__contract-card .stake {
    align-self: flex-end;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-btn {
    text-transform: none !important;
}
.dc-btn {
    vertical-align: middle;
    align-items: center;
    justify-content: center;
    touch-action: manipulation;
    cursor: pointer;
    white-space: nowrap;
    padding: 0 1.6rem;
    display: inline-flex;
    border: 0;
    height: 3.2rem;
    border-radius: 4px;
    transition: all 0.2s cubic-bezier(0.65, 0.05, 0.36, 1);
    outline: 0;
    position: relative;
    text-decoration: none;
    -webkit-user-select: none;
    -moz-user-select: none;
    user-select: none;
    -webkit-touch-callout: none;
    -webkit-tap-highlight-color: transparent;
    /*
   * Text will be transformed to sentence case in JS
   * text-transform is declared in .dc-btn instead of .dc-btn__text
   * to ensure consistency (even for children) as per styleguide
   */
    /* TODO: confirm this button with designer are we still using this? */
    /* TODO: confirm this button with designer are we still using this? */
    /* postcss-bem-linter: ignore */
}

.dc-btn__toggle {
    height: auto;
    padding: 0.8rem 2.5rem;
}

.dc-btn__text,
.dc-btn__icon {
    display: flex;
    pointer-events: none;
}

.dc-btn__icon {
    font-size: 1.4rem;
    color: var(--text-general);
    font-weight: 700;
    text-transform: inherit;
    text-align: center;
    line-height: 1.5;
    color: var(--text-general);
    pointer-events: none;
}

[dir='ltr'] .dc-btn__icon {
    padding-right: 0.8rem;
}

[dir='rtl'] .dc-btn__icon {
    padding-left: 0.8rem;
}

[dir='ltr'] .dc-btn__icon--circle {
    padding-right: 0;
}

[dir='rtl'] .dc-btn__icon--circle {
    padding-left: 0;
}

.dc-btn:not([disabled]):hover {
    text-decoration: none;
}

.dc-btn__rounded {
    border-radius: 24px;
}

.dc-btn--plus {
    height: 2.4rem !important;
    border: 1px solid var(--border-hover) !important;
    padding: 0 !important;
}

.dc-btn--plus {
    width: 2.4rem;
    background: inherit;
    background-repeat: no-repeat;
    background-position: center;
}

.dc-btn--circle {
    width: 3.2rem !important;
}

.dc-btn--circle {
    height: 3.2rem;
    border-radius: 50%;
}

.dc-btn--circular {
    border-radius: 100px;
}

.dc-btn--transparent {
    background: transparent;
}

.dc-btn--primary {
    background: var(--button-primary-default);
    color: var(--text-colored-background);
}

.dc-btn--primary:hover:not([disabled]) {
    background: var(--button-primary-hover);
}

.dc-btn--primary:active:not([disabled]) {
    background: var(--button-primary-default);
}

.dc-btn--primary:disabled,
.dc-btn--primary[disabled] {
    cursor: not-allowed !important;
}

.dc-btn--primary:disabled,
.dc-btn--primary[disabled] {
    opacity: 0.32;
}

.dc-btn--primary .dc-btn__text,
.dc-btn--primary .dc-btn__icon {
    color: var(--text-colored-background);
}

.dc-btn--primary__light {
    background: var(--button-primary-light-default);
}

.dc-btn--primary__light:hover:not([disabled]) {
    background: var(--button-primary-light-hover);
}

.dc-btn--primary__light:active:not([disabled]) {
    background: var(--button-primary-light-default);
}

.dc-btn--primary__light:disabled,
.dc-btn--primary__light[disabled] {
    cursor: not-allowed !important;
}

.dc-btn--primary__light:disabled,
.dc-btn--primary__light[disabled] {
    opacity: 0.32;
}

.dc-btn--primary__light .dc-btn__text,
.dc-btn--primary__light .dc-btn__icon {
    color: var(--brand-red-coral);
}

.dc-btn--secondary {
    background: transparent;
    border: 1px solid var(--button-secondary-default);
}

.dc-btn--secondary:hover:not([disabled]) {
    background: var(--button-secondary-hover);
}

.dc-btn--secondary:active:not([disabled]) {
    border: 1px solid var(--button-secondary-default);
}

.dc-btn--secondary:disabled,
.dc-btn--secondary[disabled] {
    cursor: not-allowed !important;
}

.dc-btn--secondary:disabled,
.dc-btn--secondary[disabled] {
    opacity: 0.32;
}

.dc-btn--secondary .dc-btn__text,
.dc-btn--secondary .dc-btn__icon {
    color: var(--text-prominent);
}

.dc-btn--tertiary {
    background: var(--button-tertiary-default);
}

.dc-btn--tertiary:hover:not([disabled]) {
    background: var(--button-tertiary-hover);
}

.dc-btn--tertiary:active:not([disabled]) {
    background: var(--button-tertiary-default);
}

.dc-btn--tertiary .dc-btn__text,
.dc-btn--tertiary .dc-btn__icon {
    color: var(--brand-red-coral);
}

.dc-btn--tertiary:disabled,
.dc-btn--tertiary[disabled] {
    cursor: not-allowed !important;
}

.dc-btn--tertiary:disabled,
.dc-btn--tertiary[disabled] {
    opacity: 0.32;
}

.dc-btn--alternate {
    background: var(--button-tertiary-default);
    border: 2px solid var(--button-primary-default);
}

.dc-btn--alternate:hover:not([disabled]) {
    background: var(--button-primary-default);
}

.dc-btn--alternate:hover:not([disabled]) .dc-btn__text {
    color: var(--text-colored-background);
}

.dc-btn--alternate .dc-btn__text,
.dc-btn--alternate .dc-btn__icon {
    color: var(--brand-red-coral);
}

.dc-btn--green {
    background: var(--status-success);
}

.dc-btn--green:hover:not([disabled]) {
    background: var(--transparent-success);
}

.dc-btn--green:active:not([disabled]) {
    background: var(--status-success);
}

.dc-btn--green .dc-btn__text,
.dc-btn--green .dc-btn__icon {
    color: var(--text-colored-background);
}

.dc-btn--black {
    background: var(--button-get-started-bg);
}

.dc-btn--black:hover:not([disabled]) {
    opacity: 0.7;
}

.dc-btn--black:active:not([disabled]) {
    opacity: 0.7;
}

.dc-btn--black .dc-btn__text,
.dc-btn--black .dc-btn__icon {
    color: var(--general-main-1);
}

.dc-btn__small {
    height: 2.4rem;
    min-width: 4.8rem;
    border-width: 1px;
}

.dc-btn__small .dc-btn__text {
    font-size: 1.2rem;
}

.dc-btn__medium {
    height: 3.2rem;
    min-width: 5.6rem;
    border-width: 1px;
}

.dc-btn__medium .dc-btn__text {
    font-size: 1.4rem;
}

.dc-btn__large {
    height: 4rem;
    min-width: 6.4rem;
    border-width: 2px;
}

.dc-btn__large .dc-btn__text {
    font-size: 1.4rem;
}

.dc-btn__wide {
    width: 100%;
    height: 4rem;
}

.dc-btn__effect:focus:not(:active):after {
    content: '';
    position: absolute;
    top: -0.1em;
    left: -0.1em;
    bottom: -0.1em;
    right: -0.1em;
    border-radius: inherit;
    border: 0 solid var(--brand-secondary);
    opacity: 0.4;
    animation: buttonEffect 0.4s;
    animation-fill-mode: forwards;
    display: block;
}

.dc-btn__group {
    white-space: nowrap;
}

[dir='ltr'] .dc-btn__group .dc-btn + .dc-btn {
    margin-left: 8px;
}

[dir='rtl'] .dc-btn__group .dc-btn + .dc-btn {
    margin-right: 8px;
}

[dir='ltr'] .dc-btn__button-group {
    border-radius: 0 4px 4px 0;
}

[dir='rtl'] .dc-btn__button-group {
    border-radius: 4px 0 0 4px;
}

.dc-btn .initial-loader--btn {
    background-color: transparent;
    background-color: initial;
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */
}

.dc-btn .initial-loader--btn .initial-loader__barspinner--rect {
    background-color: var(--text-colored-background);
}

[dir='ltr'] .dc-btn .initial-loader--btn .barspinner {
    margin: 0.6rem 4px 0 -4px;
}

[dir='rtl'] .dc-btn .initial-loader--btn .barspinner {
    margin: 0.6rem -4px 0 4px;
}

.dc-btn .initial-loader--btn .barspinner__rect {
    height: 35%;
}

@keyframes buttonEffect {
    to {
        opacity: 0;
        top: -0.6em;
        left: -0.6em;
        bottom: -0.6em;
        right: -0.6em;
        border-width: 6px;
    }
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-badge {
    display: inline-flex;
    justify-content: center;
    align-items: center;
    color: #ffffff;
}

.dc-badge--contained {
    border: none;
}

.dc-badge--bordered {
    border: 1px solid var(--text-prominent);
    color: var(--text-prominent);
}

.dc-badge--blue {
    background-color: #377cfc;
}

.dc-badge--orange {
    background-color: #ff6444;
}

.dc-badge--red {
    background-color: #ff444f;
}

.dc-badge--gray {
    background-color: #d6dadb;
}

.dc-badge--full-rounded {
    border-radius: 2px;
}

[dir='ltr'] .dc-badge--two-rounded {
    border-bottom-left-radius: 8px;
    border-top-right-radius: 8px;
}

[dir='rtl'] .dc-badge--two-rounded {
    border-bottom-right-radius: 8px;
    border-top-left-radius: 8px;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
/** @define dc-button-menu */
.dc-button-menu {
    display: flex;
    justify-content: center;
    width: 100%;
    position: relative;
}

.dc-button-menu__button:first-child {
    border-top-left-radius: 4px;
    border-bottom-left-radius: 4px;
}

[dir='ltr'] .dc-button-menu__button:last-child {
    border-top-right-radius: 4px;
    border-bottom-right-radius: 4px;
}

[dir='rtl'] .dc-button-menu__button:last-child {
    border-top-left-radius: 4px;
    border-bottom-left-radius: 4px;
}

.dc-button-menu__button {
    margin: 0;
    border: none;
    border-radius: 0px;
    width: 50%;
    background-color: var(--state-normal);
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */
}

.dc-button-menu__button .dc-btn__text {
    display: contents;
}

@media (min-width: 1024px) {
    .dc-button-menu__button:hover:not(.dc-button-menu__button--active) {
        background-color: var(--state-hover) !important;
    }
}

[dir='ltr'] .dc-button-menu__button span {
    text-align: left;
}

[dir='rtl'] .dc-button-menu__button span {
    text-align: right;
}

.dc-button-menu__button span {
    font-size: 1.4rem;
    color: var(--text-general);
    font-weight: 400;
    text-transform: inherit;
    line-height: 1.5;
    color: var(--text-general);
}

.dc-button-menu__button--active {
    background-color: var(--state-active) !important;
}

.dc-button-menu__button--active {
    cursor: auto;
    cursor: initial;
}

[dir='ltr'] .dc-button-menu__button--active span {
    text-align: left;
}

[dir='rtl'] .dc-button-menu__button--active span {
    text-align: right;
}

.dc-button-menu__button--active span {
    font-size: 1.4rem;
    color: var(--text-colored-background);
    font-weight: 700;
    text-transform: inherit;
    line-height: 1.5;
    color: var(--text-prominent);
}

.dc-button-menu__toggle {
    margin: 0;
    border: none;
    border-radius: 6px;
    width: 50%;
    background-color: var(--general-section-1);
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */
}

.dc-button-menu__toggle .dc-btn__text {
    display: contents;
}

@media (min-width: 1024px) {
    .dc-button-menu__toggle:hover:not(.dc-button-menu__button--active) {
        background-color: var(--state-hover) !important;
    }
}

[dir='ltr'] .dc-button-menu__toggle span {
    text-align: left;
}

[dir='rtl'] .dc-button-menu__toggle span {
    text-align: right;
}

.dc-button-menu__toggle span {
    font-size: 1.4rem;
    color: var(--text-general);
    font-weight: 400;
    text-transform: inherit;
    line-height: 1.5;
    color: var(--text-less-prominent);
}

.dc-button-menu__toggle--active {
    background-color: var(--state-normal) !important;
}

.dc-button-menu__toggle--active {
    cursor: auto;
    cursor: initial;
}

[dir='ltr'] .dc-button-menu__toggle--active span {
    text-align: left;
}

[dir='rtl'] .dc-button-menu__toggle--active span {
    text-align: right;
}

.dc-button-menu__toggle--active span {
    font-size: 1.4rem;
    color: var(--text-colored-background);
    font-weight: 700;
    text-transform: inherit;
    line-height: 1.5;
    color: var(--text-prominent);
}

[dir='ltr'] .dc-button-menu__counter {
    margin-left: 0.4rem;
}

[dir='rtl'] .dc-button-menu__counter {
    margin-right: 0.4rem;
}

.dc-button-menu__wrapper {
    position: relative;
    border-radius: 4px;
    width: 100%;
    background-color: var(--state-normal);
    display: flex;
}

.dc-button-menu__wrapper .dc-button-menu__button,
.dc-button-menu__wrapper .dc-button-menu__button--active {
    background-color: rgba(0, 0, 0, 0) !important;
}

.dc-button-menu__wrapper .dc-button-menu__button,
.dc-button-menu__wrapper .dc-button-menu__button--active {
    z-index: 1;
    padding: 0.8rem 0.6rem;
    white-space: normal;
}

.dc-button-menu__wrapper .dc-button-menu__button .dc-btn__text,
.dc-button-menu__wrapper .dc-button-menu__button--active .dc-btn__text {
    line-height: normal;
}

.dc-button-menu__wrapper .dc-button-menu__button:nth-last-child(2) {
    border-top-right-radius: 4px;
    border-bottom-right-radius: 4px;
}

.dc-button-menu--highlight {
    display: block;
    position: absolute;
    content: '';
    height: 100%;
    top: 0;
    left: 0;
    z-index: 0;
    transition: transform 0.25s ease;
    pointer-events: none;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-icon,
.dc-popover__target__icon .info:hover {
    --fill-color1: var(--text-general);
    --fill-color2: var(--text-less-prominent);
    --fill-color3: var(--general-section-1);
    --fill-color4: var(--icon-grey-background);
    --fill-color5: var(--text-prominent);
}

.dc-icon--disabled,
.dc-popover__target__icon--disabled .info:hover,
.dc-popover__target__icon--disabled .info {
    --fill-color1: var(--text-disabled);
    --fill-color2: var(--text-disabled);
}

.dc-icon--active {
    --fill-color1: #ffffff;
    --fill-color2: #ffffff;
}

.dc-icon--green {
    --fill-color1: var(--text-profit-success);
    --fill-color2: var(--text-profit-success);
    --fill-color3: #ffffff;
}

.dc-icon--red {
    --fill-color1: var(--text-loss-danger);
    --fill-color2: var(--text-loss-danger);
    --fill-color3: #ffffff;
}

.dc-icon--secondary,
.dc-popover__target__icon .info {
    --fill-color1: var(--text-less-prominent);
    --fill-color2: var(--text-less-prominent);
    --fill-color3: #ffffff;
}

.dc-icon--brand {
    --fill-color1: var(--brand-red-coral);
    --fill-color2: var(--brand-secondary);
    --fill-color3: #ffffff;
}

.dc-icon--black {
    --fill-color1: var(--icon-black-plus);
}

.dc-icon--orange {
    --fill-color1: var(--status-warning);
}

.dc-popover__wrapper {
    position: relative;
}

.dc-popover__container {
    position: absolute;
    left: 0;
    top: 0;
    width: 280px;
}

.dc-popover__container-relative {
    position: relative;
}

.dc-popover__target__icon .counter {
    color: var(--brand-red-coral);
    font-size: 10px;
    font-weight: bold;
    line-height: 1.4em;
    position: absolute;
    top: 50%;
    transform: translateY(-65%);
}

.dc-popover__bubble {
    font-size: 1.2rem;
    color: var(--text-colored-background);
    font-weight: 400;
    text-transform: none;
    text-align: center;
    line-height: 1.25;
    cursor: help;
    position: relative;
    padding: 0.8rem;
    max-width: 31.7rem;
    border-radius: 4px;
    display: flex;
    flex-direction: row;
    background: var(--general-active);
    color: var(--text-prominent);
    z-index: 1;
}

.dc-popover__bubble__icon {
    flex-grow: 1;
    padding-top: 3px;
}

[dir='ltr'] .dc-popover__bubble__icon {
    margin-right: 0.7em;
}

[dir='rtl'] .dc-popover__bubble__icon {
    margin-left: 0.7em;
}

.dc-popover__bubble__text {
    flex-grow: 2;
}

[dir='ltr'] .dc-popover__bubble__text {
    direction: ltr;
}

[dir='rtl'] .dc-popover__bubble__text {
    direction: rtl;
}

.dc-popover__bubble--error {
    background-color: var(--status-danger);
}

[dir='ltr'] .dc-popover__bubble--error {
    direction: ltr;
}

[dir='rtl'] .dc-popover__bubble--error {
    direction: rtl;
}

@media (min-width: 320px) and (max-width: 767px) {
    .dc-popover__trade-params {
        max-width: calc(100vw - 6.7rem);
    }
}

.mobile-widget__item-popover,
.accu-info-display__popover {
    max-width: 28rem;
}

@media (min-width: 320px) and (max-width: 767px) {
    .accu-info-display__popover {
        max-width: 33rem;
    }

    [dir='ltr'] .accu-info-display__popover {
        margin-right: 1rem;
    }

    [dir='rtl'] .accu-info-display__popover {
        margin-left: 1rem;
    }
}

.react-tiny-popover-container--disabled-pointer-event {
    pointer-events: none;
}

.react-tiny-popover-cursor-option {
    cursor: pointer;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
/** @define dc-calendar */
.dc-calendar {
    outline: 0;
    border-radius: 5px;
    z-index: 999;
    box-sizing: border-box;
    font-size: 1rem;
    background: var(--general-main-2);
    box-shadow: 0 2px 8px 0 var(--shadow-menu);
}

.dc-calendar__header,
.dc-calendar__footer {
    position: relative;
    display: flex;
    align-items: center;
    height: 5rem;
    border-radius: 5px;
    padding: 1.6rem;
    box-sizing: border-box;
}

.dc-calendar__header {
    justify-content: center;
}

[dir='ltr'] .dc-calendar__footer :last-child:not(:only-child),
[dir='ltr'] .dc-calendar__footer .dc-calendar__btn--today {
    margin-left: auto;
}

[dir='rtl'] .dc-calendar__footer :last-child:not(:only-child),
[dir='rtl'] .dc-calendar__footer .dc-calendar__btn--today {
    margin-right: auto;
}

.dc-calendar__body {
    border-top: 0.1rem solid var(--general-section-2);
    border-bottom: 0.1rem solid var(--general-section-2);
}

.dc-calendar__body--date,
.dc-calendar__body--month,
.dc-calendar__body--year,
.dc-calendar__body--decade {
    display: grid;
    grid-gap: 1.2rem;
    padding: 0.8rem 2rem;
}

.dc-calendar__body--date .dc-calendar__cell,
.dc-calendar__body--month .dc-calendar__cell,
.dc-calendar__body--year .dc-calendar__cell,
.dc-calendar__body--decade .dc-calendar__cell {
    display: flex;
    justify-content: center;
    align-items: center;
    border-radius: 5px;
}

.dc-calendar__body--date {
    grid-template-columns: repeat(7, 2.4rem);
    grid-auto-rows: 2.4rem;
}

.dc-calendar__body--date .dc-calendar__cell {
    width: 100%;
    height: 100%;
}

.dc-calendar__body--month,
.dc-calendar__body--year,
.dc-calendar__body--decade {
    grid-template-columns: repeat(3, minmax(7.2rem, 1fr));
    grid-auto-rows: minmax(4.2rem, auto);
}

.dc-calendar__body--month .dc-calendar__cell,
.dc-calendar__body--year .dc-calendar__cell,
.dc-calendar__body--decade .dc-calendar__cell {
    width: 5.6rem;
    height: 3.2rem;
}

.dc-calendar__body--month
    .dc-calendar__cell--other:not(.dc-calendar__cell--today):not(.dc-calendar__cell--active):not(
        .dc-calendar__cell--disabled
    ),
.dc-calendar__body--year
    .dc-calendar__cell--other:not(.dc-calendar__cell--today):not(.dc-calendar__cell--active):not(
        .dc-calendar__cell--disabled
    ),
.dc-calendar__body--decade
    .dc-calendar__cell--other:not(.dc-calendar__cell--today):not(.dc-calendar__cell--active):not(
        .dc-calendar__cell--disabled
    ) {
    color: var(--text-general);
}

.dc-calendar__body--decade .dc-calendar__cell {
    width: 100%;
}

.dc-calendar__icon {
    cursor: pointer;
}

[dir='ltr'] .dc-calendar__icon {
    right: 5%;
}

[dir='rtl'] .dc-calendar__icon {
    left: 5%;
}

.dc-calendar__icon--today:hover {
    cursor: pointer;
}

.dc-calendar__btn {
    text-align: center;
    padding: 0 0.2rem;
    font-weight: bold;
    cursor: pointer;
    border: none;
    outline: none;
    background: none;
}

.dc-calendar__btn--disabled {
    cursor: default;
    transition: none;
}

.dc-calendar__btn--disabled .dc-calendar__icon {
    cursor: default;
}

.dc-calendar__btn--is-hidden {
    display: none;
}

[dir='ltr'] .dc-calendar__btn--select {
    text-align: left;
}

[dir='rtl'] .dc-calendar__btn--select {
    text-align: right;
}

.dc-calendar__btn--select {
    font-size: 1.4rem;
    color: var(--text-general);
    font-weight: 700;
    text-transform: none;
    line-height: 1.5;
    color: var(--text-prominent);
}

.dc-calendar__btn--prev-year,
.dc-calendar__btn--next-year,
.dc-calendar__btn--prev-month,
.dc-calendar__btn--next-month {
    position: absolute;
    padding: 0 0.5em;
    height: 1.4em;
}

[dir='ltr'] .dc-calendar__btn--prev-year {
    left: 7%;
}

[dir='rtl'] .dc-calendar__btn--prev-year {
    right: 7%;
}

[dir='ltr'] .dc-calendar__btn--next-year {
    right: 7%;
}

[dir='rtl'] .dc-calendar__btn--next-year {
    left: 7%;
}

[dir='ltr'] .dc-calendar__btn--prev-month {
    left: 14%;
}

[dir='rtl'] .dc-calendar__btn--prev-month {
    right: 14%;
}

[dir='ltr'] .dc-calendar__btn--next-month {
    right: 14%;
}

[dir='rtl'] .dc-calendar__btn--next-month {
    left: 14%;
}

[dir='ltr'] .dc-calendar__cell {
    text-align: left;
}

[dir='rtl'] .dc-calendar__cell {
    text-align: right;
}

.dc-calendar__cell {
    font-size: 1.2rem;
    color: var(--text-general);
    font-weight: 400;
    text-transform: none;
    line-height: 1.25;
    align-self: center;
    justify-self: center;
    position: relative;
    cursor: pointer;
    color: var(--text-general);
    box-sizing: border-box;
}

.dc-calendar__cell--hover {
    color: var(--text-general);
    background: var(--state-hover);
}

.dc-calendar__cell:nth-child(7n):before {
    padding: 0;
    border-radius: 4px;
}

.dc-calendar__cell:nth-child(7n + 1):before {
    border-radius: 4px;
}

[dir='ltr'] .dc-calendar__cell:nth-child(7n + 1):before {
    left: 0;
}

[dir='rtl'] .dc-calendar__cell:nth-child(7n + 1):before {
    right: 0;
}

.dc-calendar__cell:nth-child(7n + 1):after {
    content: none;
}

[dir='ltr'] .dc-calendar__cell--bold {
    text-align: left;
}

[dir='rtl'] .dc-calendar__cell--bold {
    text-align: right;
}

.dc-calendar__cell--bold {
    font-size: 1.4rem;
    color: var(--text-general);
    font-weight: 700;
    text-transform: none;
    line-height: 1.5;
    color: var(--text-prominent);
}

.dc-calendar__cell--disabled:not(.dc-calendar__cell--today):not(.dc-calendar__cell--between),
.dc-calendar__cell--other:not(.dc-calendar__cell--today):not(.dc-calendar__cell--active):not(
        .dc-calendar__cell--between
    ) {
    color: var(--text-disabled);
    transition: none;
    cursor: default;
}

.dc-calendar__cell--is-hidden {
    display: none;
}

.dc-calendar__cell--today {
    font-weight: bold;
    color: var(--text-prominent);
    border: 1px solid var(--state-active);
}

.dc-calendar__cell--today-duration {
    background: var(--state-active);
}

.dc-calendar__cell--active {
    font-weight: bold;
    color: var(--text-prominent);
    background: var(--state-active);
}

.dc-calendar__cell--active:hover {
    background: var(--state-active);
}

.dc-calendar__cell--active-duration {
    background: var(--state-active);
}

.dc-calendar__cell--active-duration:after {
    position: absolute;
    content: '';
    width: 100%;
    top: 0;
    z-index: -1;
    height: 100%;
    background: var(--state-active);
}

[dir='ltr'] .dc-calendar__cell--active-duration:after {
    right: 50%;
    padding-left: 1rem;
}

[dir='rtl'] .dc-calendar__cell--active-duration:after {
    left: 50%;
    padding-right: 1rem;
}

.dc-calendar__cell--between {
    font-weight: bold;
    color: var(--text-prominent);
    background: var(--state-active);
}

.dc-calendar__cell--between-hover:before {
    position: absolute;
    content: '';
    width: 100%;
    z-index: -2;
    height: 100%;
    background: var(--state-hover);
}

[dir='ltr'] .dc-calendar__cell--between-hover:before {
    padding-left: 3.2rem;
}

[dir='rtl'] .dc-calendar__cell--between-hover:before {
    padding-right: 3.2rem;
}

.dc-calendar__cell--between:hover {
    background: var(--state-active);
}

.dc-calendar__cell--between:before {
    position: absolute;
    content: '';
    width: 100%;
    z-index: -1;
    height: 100%;
    background: var(--state-active);
}

[dir='ltr'] .dc-calendar__cell--between:before {
    padding-left: 3.2rem;
}

[dir='rtl'] .dc-calendar__cell--between:before {
    padding-right: 3.2rem;
}

.dc-calendar__cell-tooltip {
    position: absolute;
    display: inline-grid;
    cursor: pointer;
    height: 0;
    top: 0;
    justify-content: center;
    width: 100%;
}

[dir='ltr'] .dc-calendar__cell-tooltip {
    left: 0;
}

[dir='rtl'] .dc-calendar__cell-tooltip {
    right: 0;
}

.dc-calendar__cell-tooltip-icon {
    margin-top: 0.1rem;
    display: inherit;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
[dir='ltr'] .dc-card {
    text-align: left;
}
[dir='rtl'] .dc-card {
    text-align: right;
}
.dc-card {
    font-size: 1.4rem;
    color: var(--text-general);
    font-weight: 400;
    text-transform: none;
    line-height: 1.5;
    border: 1px solid var(--border-normal);
    padding: 1.6rem;
    border-radius: 4px;
}

.dc-card__wrapper {
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    height: auto;
    margin: 1.6rem;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-carousel {
    height: 100%;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
}

.dc-carousel--mt5 {
    justify-content: initial;
}

.dc-carousel__container {
    display: flex;
    flex-direction: row;
    align-items: center;
    justify-content: center;
}

.dc-carousel__box {
    overflow: hidden;
}

.dc-carousel__box--mt5 {
    margin: 0 -1.4rem;
}

.dc-carousel__wrapper {
    display: flex;
    flex-direction: row;
    transition: transform 0.3s linear;
    width: -moz-fit-content;
    width: fit-content;
    padding: 0.5rem 0;
    height: 100%;
}

.dc-carousel__wrapper--mt5 {
    padding-top: 0;
    padding-top: initial;
}

.dc-carousel__card {
    display: flex;
    flex-direction: column;
    padding-bottom: 0.8rem;
}

.dc-carousel__nav {
    align-items: center;
    box-sizing: border-box;
    display: flex;
    width: 100%;
    padding: 0 2.4rem;
    overflow: hidden;
    margin-bottom: 2.4rem;
    justify-content: space-between;
}

.dc-carousel__nav--upper {
    margin-bottom: 0;
}

.dc-carousel__nav-list {
    display: inline-block;
    text-align: center;
    margin: 0 auto;
    position: relative;
}

.dc-carousel__nav--lower {
    margin-bottom: 0;
}

.dc-carousel__nav-item {
    width: 0.8rem;
    height: 0.8rem;
    border-radius: 50%;
    display: inline-block;
    margin: 0 0.8rem;
    cursor: pointer;
}

.dc-carousel__nav-item--active {
    position: absolute;
    top: 0;
    cursor: auto;
    cursor: initial;
    transition: transform 0.3s linear;
}

[dir='ltr'] .dc-carousel__nav-item--active {
    left: 0;
}

[dir='rtl'] .dc-carousel__nav-item--active {
    right: 0;
}

.dc-carousel__icon {
    cursor: pointer;
}

.dc-carousel__icon--left {
    position: relative;
}

[dir='ltr'] .dc-carousel__icon--left {
    right: 5.2rem;
}

[dir='rtl'] .dc-carousel__icon--left {
    left: 5.2rem;
}

.dc-carousel__icon--mt5 {
    background: var(--icon-grey-background);
    width: 6rem;
    height: 6rem;
    border-radius: 50%;
    transform: scale(0.5);
    line-height: 6rem;
    text-align: center;
    justify-content: space-between;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.cfd-compare-accounts-carousel {
    position: relative;
    --slide-spacing: 1rem;
    --slide-size: 50%;
    --slide-height: 19rem;
    overflow: hidden;
}

.cfd-compare-accounts-carousel__viewport {
    width: 100%;
    height: 100%;
}

@media (max-width: 1279px) {
    .cfd-compare-accounts-carousel__viewport {
        padding-bottom: 6rem;
    }
}

.cfd-compare-accounts-carousel__container {
    backface-visibility: hidden;
    display: flex;
    touch-action: pan-y;
    flex-direction: row;
    max-height: auto;
    margin: 1.6rem;
    transition: transform 0s ease-in-out;
}

@media (max-width: 1279px) {
    .cfd-compare-accounts-carousel__container {
        justify-content: safe center;
    }
}

.cfd-compare-accounts-carousel__slide {
    flex: 0 0 var(--slide-size);
    min-width: 0;
    position: relative;
}

[dir='ltr'] .cfd-compare-accounts-carousel__slide {
    padding-left: var(--slide-spacing);
}

[dir='rtl'] .cfd-compare-accounts-carousel__slide {
    padding-right: var(--slide-spacing);
}

.cfd-compare-accounts-carousel__slide__img {
    display: block;
    height: var(--slide-height);
    width: 100%;
    -o-object-fit: cover;
    object-fit: cover;
}

.cfd-compare-accounts-carousel__button {
    background-color: var(--general-main-1);
    z-index: 1;
    color: var(--background-site);
    position: absolute;
    display: flex;
    align-items: center;
    justify-content: center;
    top: 50%;
    cursor: pointer;
    width: 4rem;
    height: 4rem;
    border: 1px solid var(--general-background-main);
    border-radius: 50%;
    box-shadow:
        0px 0px 24px rgba(0, 0, 0, 0.08),
        0px 24px 24px rgba(0, 0, 0, 0.08);
}

[dir='ltr'] .cfd-compare-accounts-carousel__button--prev {
    left: 1.6rem;
}

[dir='rtl'] .cfd-compare-accounts-carousel__button--prev {
    right: 1.6rem;
}

[dir='ltr'] .cfd-compare-accounts-carousel__button--next {
    right: 1.6rem;
}

[dir='rtl'] .cfd-compare-accounts-carousel__button--next {
    left: 1.6rem;
}

.cfd-compare-accounts-carousel__button:disabled {
    opacity: 0.3;
    display: none;
}

.cfd-compare-accounts-carousel__button__svg {
    width: 50%;
    height: 35%;
}

@media (min-width: 320px) and (max-width: 767px) {
    .cfd-compare-accounts-carousel__button {
        display: none;
    }
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-clipboard {
    cursor: pointer;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-checkbox {
    display: flex;
    justify-content: flex-start;
    cursor: pointer;
    align-items: center;
    -webkit-user-select: none;
    -moz-user-select: none;
    user-select: none;
    -webkit-touch-callout: none;
    -webkit-tap-highlight-color: transparent;
}

.dc-checkbox__input {
    display: none;
}

.dc-checkbox__box {
    outline: none !important;
}

.dc-checkbox__box {
    display: flex;
    width: 16px;
    height: 16px;
    transition: 0.3s ease-in-out;
    flex-shrink: 0;
    margin: 0 8px;
    border-radius: 2px;
    align-self: center;
    box-sizing: border-box;
    border: 2px solid var(--text-less-prominent);
}

.dc-checkbox__box--active {
    border: none;
    background-color: var(--brand-red-coral);
}

.dc-checkbox--active {
    border: none;
    background-color: var(--brand-red-coral);
}

.dc-checkbox--disabled {
    cursor: not-allowed !important;
}

.dc-checkbox--disabled {
    opacity: 0.5;
}

.dc-checkbox--grey-disabled {
    background-color: var(--checkbox-disabled-grey);
}

.dc-checkbox__label--error {
    color: var(--text-loss-danger) !important;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-checklist {
    max-width: 400px;
}

.dc-checklist__item {
    cursor: pointer;
    display: flex;
    justify-content: space-between;
    align-items: center;
    border-bottom: solid 1px var(--border-normal);
    padding: 12px;
}

[dir='ltr'] .dc-checklist__item-text {
    text-align: left;
}

[dir='rtl'] .dc-checklist__item-text {
    text-align: right;
}

.dc-checklist__item-text {
    max-width: 80%;
    font-size: 1.4rem;
    color: var(--text-general);
    font-weight: 400;
    text-transform: none;
    line-height: 1.5;
}

.dc-checklist__item-status {
    display: flex;
    justify-content: center;
    align-items: center;
    width: 32px;
    height: 32px;
}

.dc-checklist__item-status--action {
    cursor: pointer;
    background-color: var(--brand-red-coral);
    border-radius: 4px;
    display: flex;
    justify-content: center;
    align-items: center;
    width: 100%;
    height: 100%;
}

.dc-checklist__item-status--disabled {
    pointer-events: none;
}

.dc-checklist__item-status--button {
    width: auto;
}

.dc-checklist__item--disabled {
    opacity: 0.5;
    pointer-events: none;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-circular-progress {
    position: relative;
    line-height: 0;
    width: -moz-fit-content;
    width: fit-content;
}

.dc-circular-progress__bar {
    transform-origin: 50% 50%;
    transition: stroke-dashoffset 1s;
    stroke: var(--brand-secondary);
}

[dir='ltr'] .dc-circular-progress__bar {
    transform: scaleX(-1) rotate(-90deg);
}

[dir='rtl'] .dc-circular-progress__bar {
    transform: scaleX(-1) rotate(90deg);
}

.dc-circular-progress__bar--warning {
    stroke: var(--status-warning);
}

.dc-circular-progress__bar--danger {
    stroke: var(--status-danger);
}

[dir='ltr'] .dc-circular-progress--clockwise {
    transform: rotate(-90deg);
}

[dir='rtl'] .dc-circular-progress--clockwise {
    transform: rotate(90deg);
}

.dc-circular-progress__icon {
    position: absolute;
    width: 1.6rem;
    height: 100%;
    top: 50%;
}

[dir='ltr'] .dc-circular-progress__icon {
    left: 50%;
    transform: translate(-50%, -50%);
}

[dir='rtl'] .dc-circular-progress__icon {
    right: 50%;
    transform: translate(50%, -50%);
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
/** Slideout Animation */
@keyframes SlideIn {
    from {
        opacity: 0;
        max-height: 0;
    }

    to {
        opacity: 1;
        height: auto;
        max-height: 100vh;
    }
}

@keyframes SlideOut {
    from {
        opacity: 1;
        max-height: 100vh;
    }

    to {
        opacity: 0;
        max-height: 0;
    }
}

.dc-collapsible {
    padding: 0.8rem;
    border-radius: 0.4rem;
    background-color: var(--general-section-1);
}

.dc-collapsible--has-collapsible-btn {
    padding-top: 0;
}

.dc-collapsible--has-title {
    padding-bottom: 0;
}

.dc-collapsible__button {
    display: flex;
    align-items: center;
    justify-content: center;
    height: 32px;
}

.dc-collapsible__button--handle {
    align-items: baseline;
    height: 3.8rem;
}

.dc-collapsible__icon {
    transition: transform 0.3s ease-in-out;
}

.dc-collapsible__icon--handle {
    width: 4rem;
    height: 0.4rem;
    margin-top: 0.8rem;
    border-radius: 0.2rem;
    background-color: var(--general-active);
}

[dir='ltr'] .dc-collapsible__icon--top {
    transform: rotate(180deg);
}

[dir='rtl'] .dc-collapsible__icon--top {
    transform: rotate(-180deg);
}

.dc-collapsible__icon--top.dc-collapsible__icon--is-open {
    transform: rotate(0deg);
}

[dir='ltr'] .dc-collapsible__icon--bottom.dc-collapsible__icon--is-open {
    transform: rotate(180deg);
}

[dir='rtl'] .dc-collapsible__icon--bottom.dc-collapsible__icon--is-open {
    transform: rotate(-180deg);
}

.dc-collapsible__item--collapsed {
    margin: 0 !important;
    margin: initial !important;
    padding: 0 !important;
    padding: initial !important;
}

.dc-collapsible__item--collapsed {
    opacity: 0;
    max-height: 0;
    overflow: hidden;
}

[dir='ltr'] .dc-collapsible__title {
    margin-left: 0;
    margin-right: auto;
}

[dir='rtl'] .dc-collapsible__title {
    margin-right: 0;
    margin-left: auto;
}

.dc-collapsible .trade-container__fieldset {
    flex: 1;
}

.dc-collapsible .trade-container__fieldset .dc-button-menu__wrapper {
    height: 4rem;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
.dc-content-expander__select-arrow {
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */
}

.dc-content-expander__select-arrow .color1-fill {
    fill: var(--text-general);
}

.dc-content-expander__select-arrow .color1-stroke {
    stroke: var(--text-general);
}

.dc-content-expander__select-arrow .color2-fill {
    fill: none;
}

.dc-content-expander__select-arrow .color2-stroke {
    stroke: none;
}
.active.dc-content-expander__select-arrow {
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */
}

.active.dc-content-expander__select-arrow .color1-fill {
    fill: var(--text-prominent);
}

.active.dc-content-expander__select-arrow .color1-stroke {
    stroke: var(--text-prominent);
}

.active.dc-content-expander__select-arrow .color2-fill {
    fill: none;
}

.active.dc-content-expander__select-arrow .color2-stroke {
    stroke: none;
}
.disabled.dc-content-expander__select-arrow {
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */
}

.disabled.dc-content-expander__select-arrow .color1-fill {
    fill: var(--text-disabled);
}

.disabled.dc-content-expander__select-arrow .color1-stroke {
    stroke: var(--text-disabled);
}

.disabled.dc-content-expander__select-arrow .color2-fill {
    fill: none;
}

.disabled.dc-content-expander__select-arrow .color2-stroke {
    stroke: none;
}
.white.dc-content-expander__select-arrow {
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */
}

.white.dc-content-expander__select-arrow .color1-fill {
    fill: var(--text-prominent);
}

.white.dc-content-expander__select-arrow .color1-stroke {
    stroke: var(--text-prominent);
}
.border_hover_color.dc-content-expander__select-arrow {
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */
}

.border_hover_color.dc-content-expander__select-arrow .color1-fill {
    fill: var(--text-prominent);
}

.border_hover_color.dc-content-expander__select-arrow .color1-stroke {
    stroke: var(--text-prominent);
}
.secondary.dc-content-expander__select-arrow {
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */
}

.secondary.dc-content-expander__select-arrow .color1-fill {
    fill: var(--text-less-prominent);
}

.secondary.dc-content-expander__select-arrow .color1-stroke {
    stroke: var(--text-less-prominent);
}

/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-content-expander {
    cursor: pointer;
    display: flex;
    align-items: center;
    padding: 0 0.8rem;
    height: 4rem;
    position: relative;
}

.dc-content-expander__content {
    transition: opacity 0.25s linear;
}

.dc-content-expander__content--enter {
    opacity: 0;
}

.dc-content-expander__content--enter-done {
    opacity: 1;
}

.dc-content-expander__content--exit {
    opacity: 0;
}

.dc-content-expander__title {
    display: block;
}

[dir='ltr'] .dc-content-expander__title {
    padding-right: 0.8rem;
}

[dir='rtl'] .dc-content-expander__title {
    padding-left: 0.8rem;
}

.dc-content-expander__title--spaced {
    flex: 1;
}

[dir='ltr'] .dc-content-expander--expanded .dc-content-expander__select-arrow {
    transform: rotate(180deg);
}

[dir='rtl'] .dc-content-expander--expanded .dc-content-expander__select-arrow {
    transform: rotate(-180deg);
}

.dc-content-expander--expanded .dc-content-expander__select-arrow--invert {
    transform: rotate(0deg);
}

.dc-content-expander__select-arrow {
    pointer-events: none;
    transform: rotate(0);
    transform-origin: 50% 45%;
    transition: transform 0.3s cubic-bezier(0.25, 0.1, 0.25, 1);
}

[dir='ltr'] .dc-content-expander__select-arrow--invert {
    transform: rotate(180deg);
}

[dir='rtl'] .dc-content-expander__select-arrow--invert {
    transform: rotate(-180deg);
}

.dc-content-expander__wrapper {
    display: flex;
    flex-direction: column;
    width: 100%;
    height: 100%;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-counter {
    align-items: center;
    background: var(--status-danger);
    border-radius: 0.8rem;
    color: var(--text-colored-background);
    display: inline-flex;
    font-size: 1rem;
    font-weight: bold;
    justify-content: center;
    line-height: 1;
    padding: 3px 5px;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.composite-checkbox {
    border-radius: 0.4rem;
    border: 1px solid var(--border-normal);
    padding: 1.6rem;
    height: 100%;
    cursor: pointer;
}

.composite-checkbox__description {
    margin: 1.2rem 0 0;
}

.composite-checkbox:hover:not(.composite-checkbox--active) {
    border: 1px solid var(--border-hover);
}

.composite-checkbox--active {
    border: 1px solid var(--border-active);
}

[dir='ltr'] .composite-checkbox .dc-checkbox__box {
    margin-left: 0;
}

[dir='rtl'] .composite-checkbox .dc-checkbox__box {
    margin-right: 0;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
/** @define dc-progress-slider */
.dc-progress-slider {
    position: relative;
    width: 100%;
    padding: 0;
    padding: initial;
    box-sizing: border-box;
    margin: 8px 0;
    border-bottom: 1px solid var(--general-section-1);
}

.dc-progress-slider--completed {
    border-bottom: 1px solid var(--general-section-6);
    margin: 0.4rem 0 0.8rem;
}

.dc-progress-slider__track {
    background: var(--text-disabled);
    position: relative;
    margin: 2px 0 8px;
    height: 6px;
    width: 100%;
    border-radius: 8px;
}

.dc-progress-slider__ticks {
    position: relative;
}

.dc-progress-slider__ticks-wrapper {
    position: relative;
    margin: 2px 0 8px;
    height: 6px;
    width: 100%;
    display: flex;
    flex-direction: row;
    justify-content: space-evenly;
}

.dc-progress-slider__ticks-step {
    height: 6px;
    width: 100%;
    margin: 0 2px;
    position: relative;
    background: var(--state-hover);
}

.dc-progress-slider__ticks-step:before {
    position: absolute;
    content: '';
    transition: transform 0.25s ease-in;
    transform: scale3d(0, 1, 1);
    top: 0;
    height: 6px;
    width: 100%;
    background-color: var(--brand-secondary);
}

[dir='ltr'] .dc-progress-slider__ticks-step:before {
    transform-origin: left;
    left: 0;
}

[dir='rtl'] .dc-progress-slider__ticks-step:before {
    transform-origin: right;
    right: 0;
}

.dc-progress-slider__ticks-step--marked:before {
    transform: scale3d(1, 1, 1);
}

[dir='ltr'] .dc-progress-slider__ticks-step:first-child {
    margin-left: 0;
}

[dir='rtl'] .dc-progress-slider__ticks-step:first-child {
    margin-right: 0;
}

[dir='ltr'] .dc-progress-slider__ticks-step:last-child {
    margin-right: 0;
}

[dir='rtl'] .dc-progress-slider__ticks-step:last-child {
    margin-left: 0;
}

[dir='ltr'] .dc-progress-slider__ticks-step:first-child,
[dir='ltr'] .dc-progress-slider__ticks-step:first-child:before {
    border-top-left-radius: 4px;
    border-bottom-left-radius: 4px;
}

[dir='rtl'] .dc-progress-slider__ticks-step:first-child,
[dir='rtl'] .dc-progress-slider__ticks-step:first-child:before {
    border-top-right-radius: 4px;
    border-bottom-right-radius: 4px;
}

[dir='ltr'] .dc-progress-slider__ticks-step:last-child,
[dir='ltr'] .dc-progress-slider__ticks-step:last-child:before {
    border-top-right-radius: 4px;
    border-bottom-right-radius: 4px;
}

[dir='rtl'] .dc-progress-slider__ticks-step:last-child,
[dir='rtl'] .dc-progress-slider__ticks-step:last-child:before {
    border-top-left-radius: 4px;
    border-bottom-left-radius: 4px;
}

.dc-progress-slider__ticks-caption {
    display: flex;
    justify-content: space-between;
}

.dc-progress-slider__line {
    background: var(--state-hover);
    position: absolute;
    top: 0;
    height: 100%;
    border-radius: 8px;
    pointer-events: none;
    transition: width 0.3s;
}

[dir='ltr'] .dc-progress-slider__line {
    left: 0;
}

[dir='rtl'] .dc-progress-slider__line {
    right: 0;
}

.dc-progress-slider__line--ticks {
    height: 2px;
}

.dc-progress-slider__line--green {
    background: var(--status-success) !important;
}

.dc-progress-slider__line--yellow {
    background: var(--status-warning) !important;
}

.dc-progress-slider__line--red {
    background: var(--status-danger) !important;
}

.dc-progress-slider__infinite-loader {
    position: relative;
    height: 4px;
    display: block;
    width: 100%;
    background-color: var(--state-hover);
    border-radius: 2px;
    background-clip: padding-box;
    margin: 0.5rem 0 1rem;
    overflow: hidden;
}

.dc-progress-slider__infinite-loader--indeterminate {
    background-color: var(--state-active);
}

.dc-progress-slider__infinite-loader--indeterminate:before,
.dc-progress-slider__infinite-loader--indeterminate:after {
    content: '';
    position: absolute;
    background-color: inherit;
    top: 0;
    bottom: 0;
    will-change: left, right;
}

[dir='ltr'] .dc-progress-slider__infinite-loader--indeterminate:before,
[dir='ltr'] .dc-progress-slider__infinite-loader--indeterminate:after {
    left: 0;
}

[dir='rtl'] .dc-progress-slider__infinite-loader--indeterminate:before,
[dir='rtl'] .dc-progress-slider__infinite-loader--indeterminate:after {
    right: 0;
}

.dc-progress-slider__infinite-loader--indeterminate:before {
    animation: indeterminate 2.1s cubic-bezier(0.65, 0.815, 0.735, 0.395) infinite;
}

.dc-progress-slider__infinite-loader--indeterminate:after {
    animation: indeterminate-short 2.1s cubic-bezier(0.165, 0.84, 0.44, 1) infinite;
    animation-delay: 1.15s;
}

@keyframes indeterminate {
    0% {
        left: -35%;
        right: 100%;
    }

    60% {
        left: 100%;
        right: -90%;
    }

    100% {
        left: 100%;
        right: -90%;
    }
}

@keyframes indeterminate-short {
    0% {
        left: -200%;
        right: 100%;
    }

    60% {
        left: 107%;
        right: -8%;
    }

    100% {
        left: 107%;
        right: -8%;
    }
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
/** @define .dc-currency-badge */
.dc-currency-badge {
    align-self: flex-start;
    padding: 0.3rem;
    background-color: #85acb0;
    border-radius: 4px;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-tick-progress {
    display: grid;
    grid-gap: 0.8rem;
}

.dc-tick-progress__tick {
    border-radius: 50%;
    width: 0.8rem;
    height: 0.8rem;
    background-color: var(--fill-disabled);
}

.dc-tick-progress__tick--on {
    background-color: var(--brand-secondary);
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-progress-slider-mobile {
    display: flex;
    flex-direction: column;
    align-items: center;
}

.dc-progress-slider-mobile__timer {
    margin: 0.2rem auto;
}

.dc-progress-slider-mobile__infinite-loader {
    position: relative;
    height: 4px;
    display: block;
    width: 100%;
    background-color: var(--state-hover);
    border-radius: 2px;
    background-clip: padding-box;
    margin: 0.5rem 0 1rem;
    overflow: hidden;
}

.dc-progress-slider-mobile__infinite-loader--indeterminate {
    background-color: var(--state-active);
}

.dc-progress-slider-mobile__infinite-loader--indeterminate:before,
.dc-progress-slider-mobile__infinite-loader--indeterminate:after {
    content: '';
    position: absolute;
    background-color: inherit;
    top: 0;
    bottom: 0;
    will-change: left, right;
}

[dir='ltr'] .dc-progress-slider-mobile__infinite-loader--indeterminate:before,
[dir='ltr'] .dc-progress-slider-mobile__infinite-loader--indeterminate:after {
    left: 0;
}

[dir='rtl'] .dc-progress-slider-mobile__infinite-loader--indeterminate:before,
[dir='rtl'] .dc-progress-slider-mobile__infinite-loader--indeterminate:after {
    right: 0;
}

.dc-progress-slider-mobile__infinite-loader--indeterminate:before {
    animation: indeterminate 2.1s cubic-bezier(0.65, 0.815, 0.735, 0.395) infinite;
}

.dc-progress-slider-mobile__infinite-loader--indeterminate:after {
    animation: indeterminate-short 2.1s cubic-bezier(0.165, 0.84, 0.44, 1) infinite;
    animation-delay: 1.15s;
}

@keyframes indeterminate {
    0% {
        left: -35%;
        right: 100%;
    }

    60% {
        left: 100%;
        right: -90%;
    }

    100% {
        left: 100%;
        right: -90%;
    }
}

@keyframes indeterminate-short {
    0% {
        left: -200%;
        right: 100%;
    }

    60% {
        left: 107%;
        right: -8%;
    }

    100% {
        left: 107%;
        right: -8%;
    }
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
/** @define dc-contract-card-dialog; weak */
.dc-contract-card-dialog {
    position: fixed;
    display: grid;
    background: var(--general-main-2);
    border-radius: 4px;
    box-shadow: 0 4px 8px 2px var(--shadow-menu);
    transition:
        transform 0.3s cubic-bezier(0.25, 0.1, 0.25, 1),
        opacity 0.25s linear;
    padding: 1.6rem;
    width: 240px;
    z-index: 99;
}

.dc-contract-card-dialog--enter-done {
    opacity: 1;
    transform: translate3d(0, 0, 0);
}

.dc-contract-card-dialog--enter,
.dc-contract-card-dialog--exit {
    opacity: 0;
}

[dir='ltr'] .dc-contract-card-dialog--enter,
[dir='ltr'] .dc-contract-card-dialog--exit {
    transform: translate3d(-20px, 0, 0);
}

[dir='rtl'] .dc-contract-card-dialog--enter,
[dir='rtl'] .dc-contract-card-dialog--exit {
    transform: translate3d(20px, 0, 0);
}

@media (max-width: 1279px) {
    .dc-contract-card-dialog__input {
        border-bottom: 1px solid var(--border-disabled);
        padding: 1rem 1.6rem;
    }

    .dc-contract-card-dialog__input .dc-popover {
        padding: 0.6rem 1rem;
    }
}

.dc-contract-card-dialog__input .dc-input-wrapper__input {
    border: 1px solid var(--border-normal);
    -webkit-appearance: none;
    -moz-appearance: none;
    appearance: none;
}

.dc-contract-card-dialog__input--currency {
    position: absolute;
    height: 3.2rem;
    align-items: center;
    justify-content: center;
    display: flex;
    background: transparent;
    border-color: transparent;
    z-index: 2;
    color: inherit;
}

[dir='ltr'] .dc-contract-card-dialog__input--currency {
    right: 4rem;
}

[dir='rtl'] .dc-contract-card-dialog__input--currency {
    left: 4rem;
}

.dc-contract-card-dialog__input--currency--symbol {
    padding-bottom: 0.2rem;
}

.dc-contract-card-dialog__input--currency:before {
    font-size: 1.4rem;
    color: var(--text-general);
    font-weight: 400;
    text-transform: none;
    text-align: center;
    line-height: 1.5;
    color: inherit;
}

.dc-contract-card-dialog__popover {
    margin-top: -50%;
}

.dc-contract-card-dialog__popover--accumulator {
    margin-top: -20%;
}
.dc-contract-card-dialog__popover-bubble {
    /* postcss-bem-linter: ignore */
}

.dc-contract-card-dialog__popover-bubble .dc-checkbox {
    margin-top: 0.8rem;
    /* postcss-bem-linter: ignore */
}

.dc-contract-card-dialog__popover-bubble .dc-checkbox__label {
    font-size: inherit;
}

.dc-contract-card-dialog__button {
    margin-top: 0.8rem;
}

.dc-contract-card-dialog__button .dc-btn {
    width: 100%;
}

@media (min-width: 320px) and (max-width: 767px) {
    .dc-contract-card-dialog__button .dc-btn {
        flex: 1;
        height: 4rem;
        margin: 0 1.6rem;
    }
}

.dc-contract-card-dialog__form {
    display: grid;
    flex: 1;
}

@media (max-width: 1279px) {
    .dc-contract-card-dialog__form {
        grid-template-rows: auto auto 1fr;
        margin: 0 0 1.6rem;
    }

    .dc-contract-card-dialog__form--no-stop-loss {
        grid-template-rows: auto 1fr;
    }
}

@media (min-width: 1280px) {
    .dc-contract-card-dialog__form {
        grid-gap: 0.8rem;
    }
}

[dir='ltr'] .dc-contract-card-dialog__form .dc-checkbox__box {
    margin-left: 0;
}

[dir='rtl'] .dc-contract-card-dialog__form .dc-checkbox__box {
    margin-right: 0;
}

.dc-contract-card-dialog__total-profit {
    height: 3.6rem;
    padding: 1.6rem;
    border-bottom: 1px solid var(--border-disabled);
    color: var(--text-general);
    display: flex;
    align-items: center;
    justify-content: space-between;
    font-size: 1.4rem;
}

/** @define dc-contract-card-dialog-toggle; */
.dc-contract-card-dialog-toggle {
    all: unset;
    position: absolute;
    display: flex;
    justify-content: end;
    width: calc(100% + 0.4rem);
    height: calc(100% + 0.4rem);
    right: 0.4rem;
    top: -0.4rem;
    border: 1px solid var(--general-section-1);
    border-radius: 4px;
}

@media (max-width: 1279px) {
    .dc-contract-card-dialog-toggle {
        width: 100%;
    }
}

.dc-contract-card-dialog-toggle__icon {
    float: right;
    margin: 3px;
}

.dc-contract-card-dialog-toggle:hover:not(:disabled):not(.dc-contract-card-dialog-toggle--disabled) {
    cursor: pointer;
    border-color: var(--button-secondary-default);
}

@media (min-width: 601px) and (max-width: 1279px) {
    .dc-mobile-dialog__contract-update {
        max-width: 568px;
        margin: 0 auto;
    }
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */

.dc-tooltip {
    text-decoration: none;
    font-size: inherit;
    color: var(--text-prominent);
}

.dc-tooltip:before {
    background: var(--status-default);
}

.dc-tooltip:after,
.dc-tooltip[data-tooltip-pos='top']:after {
    border-top-color: var(--status-default);
}

.dc-tooltip[data-tooltip-pos='right']:after {
    border-top-color: transparent;
    border-right-color: var(--status-default);
}

.dc-tooltip[data-tooltip-pos='left']:after {
    border-top-color: transparent;
    border-left-color: var(--status-default);
}

.dc-tooltip[data-tooltip-pos='bottom']:after {
    border-top-color: transparent;
    border-bottom-color: var(--status-default);
}

.dc-tooltip__balloon-icon {
    position: absolute;
    top: 0;
    left: -319px;
    z-index: 999;
    opacity: 0;
    transition: opacity 0.3s;
    pointer-events: none;
}

.dc-tooltip__balloon-icon--show {
    transition: opacity 0.3s 0.2s;
    opacity: 1;
}

.dc-tooltip[data-tooltip] {
    cursor: auto;
    cursor: initial;
    display: block;
}

.dc-tooltip[data-tooltip]:before {
    background: var(--status-default);
}

.dc-tooltip[data-tooltip]:after,
.dc-tooltip[data-tooltip][data-tooltip-pos='top']:after {
    border-top-color: var(--status-default);
}

.dc-tooltip[data-tooltip][data-tooltip-pos='right']:after {
    border-top-color: transparent;
    border-right-color: var(--status-default);
}

.dc-tooltip[data-tooltip][data-tooltip-pos='left']:after {
    border-top-color: transparent;
    border-left-color: var(--status-default);
}

.dc-tooltip[data-tooltip][data-tooltip-pos='bottom']:after {
    border-top-color: transparent;
    border-bottom-color: var(--status-default);
}

.dc-tooltip[data-tooltip]:hover:after,
.dc-tooltip[data-tooltip]:hover:before {
    opacity: 0.96;
    pointer-events: auto;
    transform: translate(-50%, 0);
}

.dc-tooltip[data-tooltip]:before,
.dc-tooltip[data-tooltip]:after {
    opacity: 0;
    pointer-events: none;
    transition: all 0.18s ease-out 0.18s;
    bottom: 100%;
    left: 50%;
    position: absolute;
    z-index: 1;
    transform: translate(-50%, 1em);
    transform-origin: top;
}

[dir='ltr'] .dc-tooltip[data-tooltip]:before {
    text-align: left;
}

[dir='rtl'] .dc-tooltip[data-tooltip]:before {
    text-align: right;
}

.dc-tooltip[data-tooltip]:before {
    font-size: 1.2rem;
    color: var(--text-colored-background);
    font-weight: 400;
    text-transform: none;
    line-height: 1.25;
    line-height: 1.5;
    text-decoration: none;
    letter-spacing: normal;
    border-radius: 4px;
    content: attr(data-tooltip);
    padding: 0.7em;
    margin-bottom: 10px;
    width: -moz-max-content;
    width: max-content;
    width: 220px;
    max-width: 280px;
}

.dc-tooltip[data-tooltip]:after {
    border: solid transparent;
    content: '';
    height: 0;
    width: 0;
    position: absolute;
    pointer-events: none;
    border-width: 6px;
    margin-bottom: -2px;
}

.dc-tooltip[data-tooltip][data-tooltip-pos='right']:before,
.dc-tooltip[data-tooltip][data-tooltip-pos='right']:after {
    bottom: auto;
    left: 100%;
    top: 50%;
    transform: translate(-1em, -50%);
}

.dc-tooltip[data-tooltip][data-tooltip-pos='right']:before {
    margin-left: 1em;
}

.dc-tooltip[data-tooltip][data-tooltip-pos='right']:hover:after,
.dc-tooltip[data-tooltip][data-tooltip-pos='right']:hover:before {
    transform: translate(0, -50%);
}

.dc-tooltip[data-tooltip][data-tooltip-pos='left']:before,
.dc-tooltip[data-tooltip][data-tooltip-pos='left']:after {
    bottom: auto;
    left: auto;
    right: 100%;
    top: 50%;
    transform: translate(1em, -50%);
}

.dc-tooltip[data-tooltip][data-tooltip-pos='left']:before {
    /*rtl:ignore*/
    margin-right: 1em;
}

.dc-tooltip[data-tooltip][data-tooltip-pos='left']:hover:after,
.dc-tooltip[data-tooltip][data-tooltip-pos='left']:hover:before {
    transform: translate(0, -50%);
}

.dc-tooltip[data-tooltip][data-tooltip-pos='bottom']:before,
.dc-tooltip[data-tooltip][data-tooltip-pos='bottom']:after {
    bottom: auto;
    left: 50%;
    top: 100%;
    transform: translate(-50%, -1em);
}

.dc-tooltip[data-tooltip][data-tooltip-pos='bottom']:before {
    margin-top: 1.1em;
}

.dc-tooltip[data-tooltip][data-tooltip-pos='bottom']:hover:after,
.dc-tooltip[data-tooltip][data-tooltip-pos='bottom']:hover:before {
    transform: translate(-50%, 0);
}

.dc-tooltip--with-label[data-tooltip]:before,
.dc-tooltip--with-label[data-tooltip]:after {
    margin-top: 1em;
}

.dc-tooltip--error[data-tooltip]:before {
    background: var(--status-danger);
}

.dc-tooltip--error[data-tooltip]:after,
.dc-tooltip--error[data-tooltip][data-tooltip-pos='top']:after {
    border-top-color: var(--status-danger);
}

.dc-tooltip--error[data-tooltip][data-tooltip-pos='right']:after {
    border-top-color: transparent;
    border-right-color: var(--status-danger);
}

.dc-tooltip--error[data-tooltip][data-tooltip-pos='left']:after {
    border-top-color: transparent;
    border-left-color: var(--status-danger);
}

.dc-tooltip--error[data-tooltip][data-tooltip-pos='bottom']:after {
    border-top-color: transparent;
    border-bottom-color: var(--status-danger);
}

.dc-tooltip--error[data-tooltip]:after,
.dc-tooltip--error[data-tooltip]:before,
.dc-tooltip--error[data-tooltip][data-tooltip-pos='left']:after,
.dc-tooltip--error[data-tooltip][data-tooltip-pos='left']:before {
    opacity: 0.96;
    pointer-events: auto;
    transform: translate(0, -50%);
}

.dc-tooltip--error[data-tooltip]:before,
.dc-tooltip--error[data-tooltip][data-tooltip-pos='left']:before {
    width: 180px;
}

.dc-tooltip--error-secondary[data-tooltip]:before {
    background: var(--status-danger);
}

.dc-tooltip--error-secondary[data-tooltip]:after,
.dc-tooltip--error-secondary[data-tooltip][data-tooltip-pos='top']:after {
    border-top-color: var(--status-danger);
}

.dc-tooltip--error-secondary[data-tooltip][data-tooltip-pos='right']:after {
    border-top-color: transparent;
    border-right-color: var(--status-danger);
}

.dc-tooltip--error-secondary[data-tooltip][data-tooltip-pos='left']:after {
    border-top-color: transparent;
    border-left-color: var(--status-danger);
}

.dc-tooltip--error-secondary[data-tooltip][data-tooltip-pos='bottom']:after {
    border-top-color: transparent;
    border-bottom-color: var(--status-danger);
}

.dc-tooltip--error-secondary[data-tooltip]:after,
.dc-tooltip--error-secondary[data-tooltip]:before,
.dc-tooltip--error-secondary[data-tooltip][data-tooltip-pos='left']:after,
.dc-tooltip--error-secondary[data-tooltip][data-tooltip-pos='left']:before {
    opacity: 0.96;
    pointer-events: auto;
    transform: translate(0, -50%);
    top: 55%;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
.dc-input-wrapper__icon,
button.dc-input-wrapper__icon {
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */
}

.dc-input-wrapper__icon .color1-fill,
button.dc-input-wrapper__icon .color1-fill {
    fill: var(--text-general);
}

.dc-input-wrapper__icon .color1-stroke,
button.dc-input-wrapper__icon .color1-stroke {
    stroke: var(--text-general);
}

.dc-input-wrapper__icon .color2-fill,
button.dc-input-wrapper__icon .color2-fill {
    fill: none;
}

.dc-input-wrapper__icon .color2-stroke,
button.dc-input-wrapper__icon .color2-stroke {
    stroke: none;
}
.active.dc-input-wrapper__icon,
button.active.dc-input-wrapper__icon {
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */
}

.active.dc-input-wrapper__icon .color1-fill,
button.active.dc-input-wrapper__icon .color1-fill {
    fill: var(--text-prominent);
}

.active.dc-input-wrapper__icon .color1-stroke,
button.active.dc-input-wrapper__icon .color1-stroke {
    stroke: var(--text-prominent);
}

.active.dc-input-wrapper__icon .color2-fill,
button.active.dc-input-wrapper__icon .color2-fill {
    fill: none;
}

.active.dc-input-wrapper__icon .color2-stroke,
button.active.dc-input-wrapper__icon .color2-stroke {
    stroke: none;
}
.disabled.dc-input-wrapper__icon,
button.disabled.dc-input-wrapper__icon {
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */
}

.disabled.dc-input-wrapper__icon .color1-fill,
button.disabled.dc-input-wrapper__icon .color1-fill {
    fill: var(--text-disabled);
}

.disabled.dc-input-wrapper__icon .color1-stroke,
button.disabled.dc-input-wrapper__icon .color1-stroke {
    stroke: var(--text-disabled);
}

.disabled.dc-input-wrapper__icon .color2-fill,
button.disabled.dc-input-wrapper__icon .color2-fill {
    fill: none;
}

.disabled.dc-input-wrapper__icon .color2-stroke,
button.disabled.dc-input-wrapper__icon .color2-stroke {
    stroke: none;
}
.white.dc-input-wrapper__icon,
button.white.dc-input-wrapper__icon {
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */
}

.white.dc-input-wrapper__icon .color1-fill,
button.white.dc-input-wrapper__icon .color1-fill {
    fill: var(--text-prominent);
}

.white.dc-input-wrapper__icon .color1-stroke,
button.white.dc-input-wrapper__icon .color1-stroke {
    stroke: var(--text-prominent);
}
.border_hover_color.dc-input-wrapper__icon,
button.border_hover_color.dc-input-wrapper__icon {
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */
}

.border_hover_color.dc-input-wrapper__icon .color1-fill,
button.border_hover_color.dc-input-wrapper__icon .color1-fill {
    fill: var(--text-prominent);
}

.border_hover_color.dc-input-wrapper__icon .color1-stroke,
button.border_hover_color.dc-input-wrapper__icon .color1-stroke {
    stroke: var(--text-prominent);
}
.secondary.dc-input-wrapper__icon,
button.secondary.dc-input-wrapper__icon {
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */
}

.secondary.dc-input-wrapper__icon .color1-fill,
button.secondary.dc-input-wrapper__icon .color1-fill {
    fill: var(--text-less-prominent);
}

.secondary.dc-input-wrapper__icon .color1-stroke,
button.secondary.dc-input-wrapper__icon .color1-stroke {
    stroke: var(--text-less-prominent);
}

/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
/** @define dc-input-field; weak */
.dc-input-field {
    margin: 0.8rem 0 0;
    position: relative;
}

[dir='ltr'] .dc-input-field__label {
    text-align: left;
}

[dir='rtl'] .dc-input-field__label {
    text-align: right;
}

.dc-input-field__label {
    font-size: 1.4rem;
    color: var(--text-general);
    font-weight: 400;
    text-transform: none;
    line-height: 1.5;
    color: var(--text-general);
    margin-bottom: 0.2rem;
    display: inline-block;
    text-align: center;
    width: 100%;
}

.dc-input-field .inline-icon {
    position: absolute;
    top: 8px;
    z-index: 1;
    cursor: pointer;
}

[dir='ltr'] .dc-input-field .inline-icon {
    left: 8px;
}

[dir='rtl'] .dc-input-field .inline-icon {
    right: 8px;
}

[dir='ltr'] .dc-input-field__helper {
    text-align: left;
}

[dir='rtl'] .dc-input-field__helper {
    text-align: right;
}

.dc-input-field__helper {
    font-size: 1.2rem;
    color: var(--text-less-prominent);
    font-weight: 300;
    text-transform: none;
    line-height: 1.25;
}

/** @define dc-input-wrapper */
.dc-input-wrapper,
button.dc-input-wrapper {
    position: relative;
}

.dc-input-wrapper__input::-ms-clear,
button.dc-input-wrapper__input::-ms-clear {
    display: none;
}

.dc-input-wrapper__button,
button.dc-input-wrapper__button {
    position: absolute !important;
}

.dc-input-wrapper__button,
button.dc-input-wrapper__button {
    z-index: 1;
    top: 2px;
    height: 28px;
    border: none;
    padding: 0;
    margin: 0;
    margin: initial;
    min-width: 3.2rem;
    border-radius: 3px;
    background-color: transparent;
    background-color: initial;
    display: flex;
    justify-content: center;
    align-items: center;
}

.dc-input-wrapper__button--increment,
button.dc-input-wrapper__button--increment {
    right: 2px;
}

.dc-input-wrapper__button--decrement,
button.dc-input-wrapper__button--decrement {
    left: 2px;
}

.dc-input-wrapper__button:hover,
button.dc-input-wrapper__button:hover {
    background: var(--state-hover);
    cursor: pointer;
}

.dc-input-wrapper__button:disabled:hover,
button.dc-input-wrapper__button:disabled:hover {
    cursor: not-allowed;
    background: transparent;
}

.dc-input-wrapper--disabled,
button.dc-input-wrapper--disabled {
    pointer-events: none;
    color: var(--text-disabled);
}

.dc-input-wrapper--inline,
button.dc-input-wrapper--inline {
    display: flex;
    justify-content: space-between;
    align-items: center;
}

/** @define input */
.input {
    font-size: 1.4rem;
    color: var(--text-general);
    font-weight: 400;
    text-transform: none;
    text-align: center;
    line-height: 1.5;
    list-style: none;
    position: relative;
    display: inline-block;
    width: 100%;
    height: 32px;
    border-radius: 4px;
    transition: transform 0.3s;
    background-color: var(--fill-normal);
    border: 1px solid var(--fill-normal);
    color: var(--text-prominent);
}

[dir='ltr'] .input {
    padding-left: 0.8rem;
}

[dir='rtl'] .input {
    padding-right: 0.8rem;
}

.input[type='checkbox'] {
    font-size: 1.2rem;
    cursor: pointer;
    display: inline-block;
    vertical-align: middle;
    width: 16px;
    height: 16px;
    border-radius: 0;
    padding: 0;
    background-color: var(--general-section-1);
    border: 1px solid var(--text-less-prominent);
}

.input[type='checkbox']:active {
    border-radius: 0;
    box-shadow: none;
    border-color: var(--brand-red-coral);
}

.input[type='checkbox']:hover {
    border-color: var(--border-hover);
}

.input[type='checkbox']:focus {
    border-radius: 0;
    box-shadow: none;
    border-color: var(--border-active);
}

.input[type='checkbox']:checked {
    background: var(--brand-red-coral);
    border-color: var(--brand-red-coral);
}

.input[type='checkbox']:checked:after {
    display: inline-block;
}

.input[type='checkbox']:checked:hover {
    border-color: var(--brand-red-coral);
}

.input[type='checkbox']::-ms-check {
    background: transparent;
    border-color: transparent;
    color: #ffffff;
}

[dir='ltr'] .input[type='checkbox']:after {
    text-align: left;
}

[dir='rtl'] .input[type='checkbox']:after {
    text-align: right;
}

.input[type='checkbox']:after {
    font-size: 1.2rem;
    color: var(--text-colored-background);
    font-weight: 400;
    text-transform: none;
    line-height: 1.25;
    content: 'L';
    position: absolute;
    top: -10%;
    display: none;
}

[dir='ltr'] .input[type='checkbox']:after {
    transform: scaleX(-1) rotate(-40deg);
    left: 25%;
}

[dir='rtl'] .input[type='checkbox']:after {
    transform: scaleX(-1) rotate(40deg);
    right: 25%;
}

.input:not([type='range']) {
    touch-action: manipulation;
}

.input[readonly] {
    cursor: pointer;
}

.input::-moz-placeholder {
    border-color: var(--border-normal);
}

.input::placeholder {
    border-color: var(--border-normal);
}

.input:hover,
.input-hover,
.dc-input-wrapper__button:hover ~ .dc-input-wrapper__input,
button.dc-input-wrapper__button:hover ~ .dc-input-wrapper__input {
    border-color: var(--border-hover);
}

.input:active,
.input:focus {
    outline: 0;
    border-radius: 4px;
    border-color: var(--border-active);
    color: var(--text-prominent);
}

.input--has-inline-prefix {
    border-radius: 4px !important;
}

[dir='ltr'] .input--has-inline-prefix {
    padding-right: 40px !important;
}

[dir='rtl'] .input--has-inline-prefix {
    padding-left: 40px !important;
}

.input--error {
    border: 1px solid #e31c4b !important;
}

.input--error {
    color: #e31c4b;
}

.input:disabled {
    color: var(--text-disabled);
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
/** @define dc-input-wrapper */
.dc-input-wrapper {
    position: relative;
}

.dc-input-wrapper--inline {
    display: flex;
    justify-content: space-between;
    align-items: center;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
/** @define dc-themed-scrollbars */
.dc-themed-scrollbars {
    overflow-y: auto;
    overflow-x: hidden;
    position: relative;
    scroll-behavior: smooth;
    /* Firefox only */
    scrollbar-color: var(--state-active) var(--general-main-1);
    scrollbar-width: thin;
}

.dc-themed-scrollbars__autohide::-webkit-scrollbar-thumb {
    display: none;
}

.dc-themed-scrollbars__autohide--is-hovered::-webkit-scrollbar-thumb {
    display: inline;
    display: initial;
}

.dc-themed-scrollbars--has-horizontal {
    overflow-x: auto;
}

.dc-themed-scrollbars--hidden-scrollbar::-webkit-scrollbar {
    display: none !important;
}

.dc-themed-scrollbars--only-horizontal {
    overflow-y: hidden;
    overflow-x: auto;
}

.dc-themed-scrollbars--only-horizontal-overlay {
    overflow-y: hidden;
    overflow-x: overlay;
}

.dc-themed-scrollbars-wrapper {
    display: flex;
    justify-content: space-between;
    margin-bottom: -3rem;
    padding-bottom: 3rem;
    white-space: nowrap;
}

.dc-themed-scrollbars-wrapper li {
    display: inline-block;
    box-sizing: border-box;
    padding: 0 3rem;
    vertical-align: middle;
    width: auto;
    width: initial;
    height: 40px;
}

@media (min-width: 320px) and (max-width: 767px) {
    .dc-themed-scrollbars-wrapper li {
        padding: 0 1.1rem;
    }
}

.dc-themed-scrollbars::-webkit-scrollbar {
    width: 5px;
    height: 5px;
    background-color: transparent;
    border-radius: 10px;
}

.dc-themed-scrollbars::-webkit-scrollbar-track {
    background-color: transparent;
}

.dc-themed-scrollbars::-webkit-scrollbar-thumb {
    border-radius: 10px;
    background-color: var(--state-active);
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
/** @define dc-mobile-dialog; weak */
.dc-mobile-dialog {
    box-sizing: border-box;
    position: fixed;
    top: 0;
    width: 100vw;
    height: 100vh;
    z-index: 999;
    overflow: auto;
    transition: opacity 0.2s;
    opacity: 0;
    pointer-events: none;
    background: var(--fill-normal);
}

[dir='ltr'] .dc-mobile-dialog {
    left: 0;
}

[dir='rtl'] .dc-mobile-dialog {
    right: 0;
}

.dc-mobile-dialog--enter,
.dc-mobile-dialog--exit {
    opacity: 0;
    pointer-events: none;
}

.dc-mobile-dialog--enter .dc-mobile-dialog__content,
.dc-mobile-dialog--exit .dc-mobile-dialog__content {
    transform: scale(0);
}

.dc-mobile-dialog--enter .dc-mobile-dialog__header,
.dc-mobile-dialog--exit .dc-mobile-dialog__header {
    transform: translateY(-100%);
}

.dc-mobile-dialog--enter-done {
    opacity: 1;
    pointer-events: auto;
}

.dc-mobile-dialog--enter-done .dc-mobile-dialog__content {
    transform: scale(1);
}

.dc-mobile-dialog--enter-done .dc-mobile-dialog__header {
    transform: translateY(0);
}

.dc-mobile-dialog__content {
    margin-top: 0.4rem;
    box-sizing: border-box;
    position: relative;
    padding-top: 3.6rem;
    z-index: 1;
    background: var(--fill-normal);
    transition: all 0.2s ease-out;
}

.dc-mobile-dialog__content--is-full-height {
    height: calc(100% - 0.4rem);
}

.dc-mobile-dialog__content > div {
    height: 100%;
}

.dc-mobile-dialog__header {
    box-sizing: border-box;
    display: flex;
    flex-direction: row;
    justify-content: space-between;
    align-items: center;
    width: 100%;
    position: fixed;
    top: 0;
    padding: 1rem;
    height: 40px;
    z-index: 4;
    background: var(--fill-normal);
    transition: all 0.2s ease-out;
    transition-delay: 0.2s;
    border-bottom: 1px solid var(--border-disabled);
}

.dc-mobile-dialog__container--has-scroll {
    overflow-x: hidden;
    overflow-y: auto;
}

.dc-mobile-dialog__container--has-info-banner .dc-mobile-dialog__header {
    position: relative;
    top: auto;
    top: initial;
    z-index: auto;
    z-index: initial;
    background: transparent none repeat 0 0 / auto auto padding-box border-box scroll;
    background: initial;
}

.dc-mobile-dialog__container--has-info-banner .dc-mobile-dialog__header-wrapper {
    position: sticky;
    top: 0;
    z-index: 4;
    background: var(--fill-normal);
    width: 100%;
    border-bottom: 0.01rem solid transparent;
}

.dc-mobile-dialog__container--has-info-banner .dc-mobile-dialog__header-wrapper .inline-message__information {
    margin: 1.6rem 0.8rem -0.8rem;
}

.dc-mobile-dialog__container--has-info-banner .dc-mobile-dialog__header-wrapper .learn-more {
    height: 5rem;
    width: calc(100% - 1.6rem);
    margin: 1.6rem 0.8rem 0.8rem;
    padding: 1.6rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
    border: none;
    background-color: var(--general-section-1);
    cursor: pointer;
    border-radius: 4px;
}

.dc-mobile-dialog__container--has-info-banner .dc-mobile-dialog__content {
    margin-top: 0;
    margin-top: initial;
    padding-top: 0;
    padding-top: initial;
}

.dc-mobile-dialog__footer {
    position: fixed;
    width: 100%;
    bottom: 0px;
    z-index: 4;
}

.dc-mobile-dialog__title {
    margin: 0;
}

[dir='ltr'] .dc-mobile-dialog__title {
    padding: 1.2rem 1.2rem 1.2rem 0.4rem;
}

[dir='rtl'] .dc-mobile-dialog__title {
    padding: 1.2rem 0.4rem 1.2rem 1.2rem;
}

.dc-mobile-dialog__close-btn-icon {
    --fill-color1: var(--text-prominent) !important;
}

.dc-mobile-dialog__close-btn-icon {
    margin: 1.2rem 0.4rem;
    width: 1.6rem;
    height: 1.6rem;
    /* postcss-bem-linter: ignore */
}
@charset "UTF-8";
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
/** @define dc-result */
.dc-result__content {
    display: flex;
    justify-items: center;
    align-items: center;
    flex-direction: column;
    gap: 0.4rem;
}

.dc-result__caption {
    text-transform: capitalize;
    font-size: 1.4em;
    font-weight: bold;
    display: flex;
    justify-content: center;
    align-items: center;
    transition: opacity 0.25s ease;
    gap: 0.4rem;
}

.dc-result__caption--won {
    color: var(--text-profit-success);
}

.dc-result__caption--lost {
    color: var(--text-loss-danger);
}

.dc-result__caption-wrapper {
    cursor: pointer;
    width: 100%;
    height: calc(100% - 24px);
    text-decoration: none;
    position: absolute;
    top: 24px;
    z-index: 2;
    display: flex;
    justify-content: center;
    align-items: center;
}

@media (min-width: 320px) and (max-width: 767px) {
    .dc-result__caption {
        pointer-events: none;
    }
}

.dc-result__close-btn {
    position: absolute;
    top: 2px;
    right: 8px;
    cursor: pointer;
    visibility: visible;
}

.dc-result__close-btn:after {
    content: '×';
    font-size: 24px;
    font-weight: 300;
    color: var(--text-general);
}

.dc-result__positions-overlay {
    max-width: 218px;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-contract-card {
    box-sizing: border-box;
    border-radius: 4px;
    display: flex;
    flex-direction: column;
    text-decoration: none;
    position: relative;
    padding: 0.8rem;
    background-color: var(--general-main-1);
    color: var(--text-prominent);
    padding-bottom: 0.8rem;
}

.dc-contract-card:before {
    content: '';
    position: absolute;
    border-radius: 4px;
    height: 52px;
    width: 100%;
    top: 0;
}

[dir='ltr'] .dc-contract-card:before {
    left: 0;
}

[dir='rtl'] .dc-contract-card:before {
    right: 0;
}

.dc-contract-card--green:before {
    background-image: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(0, 148, 117, 0.16));
}

.dc-contract-card--red:before {
    background-image: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(227, 28, 75, 0.16));
}

.dc-contract-card--loss {
    color: var(--text-loss-danger);
}

.dc-contract-card--profit {
    color: var(--text-profit-success);
}

.dc-contract-card__grid {
    display: grid;
    grid-template-rows: 1fr auto;
    grid-gap: 4px;
    min-height: 4rem;
}

.dc-contract-card__grid-underlying-trade {
    grid-template-columns: 1fr 1fr;
    width: 100%;
}

@media (min-width: 1280px) {
    .dc-contract-card__grid-underlying-trade--trader {
        grid-template-columns: 1.2fr 1fr;
    }
}

.dc-contract-card__grid-underlying-trade--trader--accumulator {
    grid-gap: 1px;
}

@media (min-width: 1280px) {
    .dc-contract-card__grid-underlying-trade--trader--accumulator {
        display: flex;
    }
}

.dc-contract-card__grid-underlying-trade--trader--sold {
    padding-top: 1rem;
}

.dc-contract-card__grid-underlying-trade--mobile {
    grid-template-columns: 1fr 1fr 25%;
}

.dc-contract-card__grid-profit-payout {
    grid-template-columns: 1fr 1fr;
    padding: 8px 0;
    border-radius: 4px;
    margin-left: -4px;
    margin-right: -4px;
    background: var(--general-hover);
}

.dc-contract-card__grid-label {
    font-size: 1rem;
    align-self: flex-start;
    text-transform: none;
    line-height: 1.5;
    color: var(--text-general);
    white-space: nowrap;
}

.dc-contract-card__grid-value {
    font-size: 1.2rem;
    font-weight: bold;
    align-self: flex-start;
    line-height: 1.5;
}

.dc-contract-card__grid-items {
    grid-template-columns: 1fr 1fr;
    grid-gap: 0.8rem 0.4rem;
    padding: 0.8rem 0;
}

.dc-contract-card__result {
    position: absolute;
    top: 0;
    width: 100%;
    height: calc(100% - 1rem);
    border-radius: 4px;
    z-index: 2;
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: var(--overlay-inside-dialog);
}

.dc-contract-card__result--won,
.dc-contract-card__result--won:after {
    background-image: var(--gradient-success);
}

.dc-contract-card__result--lost,
.dc-contract-card__result--lost:after {
    background-image: var(--gradient-danger);
}

.dc-contract-card__result--lg {
    max-height: 100%;
}

[dir='ltr'] .dc-contract-card__result:hover {
    background: 0 !important;
}

[dir='rtl'] .dc-contract-card__result:hover {
    background: 100% !important;
}

.dc-contract-card__result:hover .dc-result__content {
    opacity: 0;
}

.dc-contract-card__result:after {
    top: 0;
    width: 100%;
    height: 100%;
    border-radius: 4px;
    z-index: 2;
}

[dir='ltr'] .dc-contract-card__result:after {
    left: 0;
}

[dir='rtl'] .dc-contract-card__result:after {
    right: 0;
}

.dc-contract-card__result--enter,
.dc-contract-card__result--exit {
    opacity: 0;
}

.dc-contract-card__result--enter-done {
    opacity: 1;
}

.dc-contract-card__wrapper {
    margin: 0 1em;
    min-width: 218px;
    max-width: 238px;
    width: -moz-min-content;
    width: min-content;
    border-radius: 4px;
    transition:
        transform 0.25s ease,
        opacity 0.25s linear;
    position: relative;
    background: var(--general-main-1);
}

.dc-contract-card__wrapper .currency-badge {
    margin-bottom: 5px;
}

.dc-contract-card__wrapper--active:before {
    content: '';
    top: -1px;
    width: calc(100% + 2px);
    height: calc(100% + 2px);
    position: absolute;
    box-shadow: 0 4px 6px 0 rgba(0, 0, 0, 0.24);
    border-radius: 4px;
    pointer-events: none;
}

[dir='ltr'] .dc-contract-card__wrapper--active:before {
    left: -1px;
}

[dir='rtl'] .dc-contract-card__wrapper--active:before {
    right: -1px;
}

.dc-contract-card__wrapper--enter-done {
    opacity: 1;
    transform: translateY(0);
}

.dc-contract-card__wrapper--enter,
.dc-contract-card__wrapper--exit {
    opacity: 0;
    transform: translateY(-16px);
}

.dc-contract-card .purchase-price-container,
.dc-contract-card .potential-payout-container {
    display: flex;
    flex-direction: column;
    justify-content: flex-start;
    align-items: center;
}

.dc-contract-card .purchase-price__label,
.dc-contract-card .potential-payout__label {
    font-size: 1rem;
    align-self: flex-start;
    text-transform: none;
    margin-bottom: 4px;
    color: var(--text-general);
    white-space: nowrap;
}

.dc-contract-card .purchase-price__value,
.dc-contract-card .potential-payout__value {
    font-size: 1em;
    font-weight: bold;
    align-self: flex-start;
}

[dir='ltr'] .dc-contract-card .potential-payout-container {
    padding-left: 4px;
}

[dir='rtl'] .dc-contract-card .potential-payout-container {
    padding-right: 4px;
}

.dc-contract-card .potential-payout-price__value {
    font-size: 1em;
    font-weight: bold;
    align-self: flex-start;
}

.dc-contract-card__separator {
    width: 100%;
    border-top: 1px solid var(--general-section-1);
    margin: 4px 0 0;
}

.dc-contract-card__underlying-name {
    display: flex;
    justify-content: flex-start;
    align-items: center;
    font-weight: bold;
    font-size: 1.2em;
    max-width: 18rem;
    min-width: 10rem;
}

.dc-contract-card__underlying-name--accumulator {
    max-width: 10rem;
}

.dc-contract-card__type {
    font-size: 1.2em;
    display: flex;
    justify-content: flex-start;
    font-weight: bold;
    /* postcss-bem-linter: ignore */
}

.dc-contract-card__type .category-type .color1-fill {
    fill: var(--brand-red-coral) !important;
}

.dc-contract-card__type .category-type .color2-fill {
    fill: var(--brand-secondary) !important;
}

.dc-contract-card__symbol {
    margin-left: 0.4rem;
}

.dc-contract-card__symbol--smarttrader-contract {
    width: 7rem;
}

@media (min-width: 320px) and (max-width: 767px) {
    .dc-contract-card__symbol--smarttrader-contract {
        width: auto;
        width: initial;
    }
}

.dc-contract-card__header {
    display: flex;
    justify-content: space-evenly;
    flex-direction: column;
    margin: 0.5em 0.2em;
}

@media (min-width: 320px) and (max-width: 767px) {
    .dc-contract-card__header {
        margin: 0 8px;
    }
}

.dc-contract-card__body {
    border-radius: 4px;
    width: 100%;
    padding: 0.8rem 0.4rem;
    color: var(--text-prominent);
    display: flex;
}

.dc-contract-card__body-wrapper {
    width: 100%;
}

@media (min-width: 320px) and (max-width: 767px) {
    .dc-contract-card__body {
        padding: 0 8px;
    }

    .dc-contract-card__body-wrapper {
        display: flex;
    }
}

.dc-contract-card-items-wrapper {
    display: grid;
    grid-template-columns: 1fr 1fr;
    grid-template-areas: 'stake current-stake' 'deal-cancel-fee limit-order-info' 'buy-price limit-order-info';
    grid-gap: 0.8rem 0.4rem;
    flex: 1;
    margin-top: 0.5rem;
}

.dc-contract-card-items-wrapper--mobile {
    display: grid;
    grid-template-columns: 1fr 1fr 1fr;
    grid-template-areas: 'stake current-stake limit-order-info' 'deal-cancel-fee buy-price limit-order-info';
    grid-gap: 0.8rem 0.4rem;
    flex: 1;
    padding: 0.4rem 0;
}

.dc-contract-card-items-wrapper--mobile .dc-contract-card-items-wrapper-group .dc-contract-card-item:first-child {
    margin-bottom: 0.8rem;
}

.dc-contract-card-items-wrapper--has-progress-slider {
    grid-template-columns: 1fr 1fr 1fr;
    grid-template-areas: 'stake current-stake date-expiry' 'deal-cancel-fee buy-price date-expiry' 'limit-order-info limit-order-info date-expiry';
}

.dc-contract-card-items-wrapper--has-progress-slider .dc-contract-card__limit-order-info {
    grid-template-columns: 1fr 1fr;
}

.dc-contract-card-items-wrapper--has-progress-slider .dc-contract-card__stop-loss {
    order: initial !important;
}

@media (min-width: 320px) and (max-width: 767px) {
    [dir='ltr'] .dc-contract-card--turbos .dc-contract-card-item__body,
    [dir='ltr'] .dc-contract-card--lookbacks .dc-contract-card-item__body {
        padding-left: 0;
    }

    [dir='rtl'] .dc-contract-card--turbos .dc-contract-card-item__body,
    [dir='rtl'] .dc-contract-card--lookbacks .dc-contract-card-item__body {
        padding-right: 0;
    }
}

.dc-contract-card--turbos .dc-contract-card__buy-price,
.dc-contract-card--lookbacks .dc-contract-card__buy-price {
    grid-column: 1/1;
    grid-row: 1/1;
    padding: 0.8rem 0 0;
}

.dc-contract-card--turbos .dc-contract-card__contract-value,
.dc-contract-card--lookbacks .dc-contract-card__contract-value {
    grid-column: 2/2;
    grid-row: 1/2;
    padding: 0.8rem 0 0;
}

.dc-contract-card--turbos .dc-contract-card__entry-spot,
.dc-contract-card--lookbacks .dc-contract-card__entry-spot {
    grid-column: 1/2;
    grid-row: 2/2;
}

.dc-contract-card--turbos .dc-contract-card__barrier-level,
.dc-contract-card--lookbacks .dc-contract-card__barrier-level {
    grid-column: 1/1;
    grid-row: 3/3;
}

.dc-contract-card--turbos .dc-contract-card__limit-order-info,
.dc-contract-card--lookbacks .dc-contract-card__limit-order-info {
    grid-row: 2/2;
    grid-column: 2/2;
}

.dc-contract-card--turbos .dc-contract-card__status,
.dc-contract-card--lookbacks .dc-contract-card__status {
    align-self: center;
    justify-self: center;
    grid-row: 1/3;
    grid-column: 3/3;
}

@media (min-width: 320px) and (max-width: 767px) {
    .dc-contract-card--turbos,
    .dc-contract-card--lookbacks {
        grid-template-columns: 1fr 1fr 1fr;
    }
}

.dc-contract-card__profit-loss {
    font-size: 1.2em;
    text-align: center;
    display: flex;
    justify-content: flex-start;
    align-items: center;
    font-weight: bold;
}

.dc-contract-card__profit-loss-label {
    font-size: 1em;
    margin-bottom: 4px;
    font-weight: normal;
    white-space: nowrap;
    max-width: 90px;
}

[dir='ltr'] .dc-contract-card__profit-loss--is-crypto {
    margin-left: -6px;
}

[dir='rtl'] .dc-contract-card__profit-loss--is-crypto {
    margin-right: -6px;
}

.dc-contract-card__profit-loss--negative {
    color: var(--text-loss-danger);
}

.dc-contract-card__profit-loss--negative:before {
    content: '-';
    color: inherit;
}

.dc-contract-card__profit-loss--positive {
    color: var(--text-profit-success);
}

.dc-contract-card__profit-loss--positive:before {
    content: '+';
    color: inherit;
}

.dc-contract-card-item__header {
    max-width: calc(100% - 2rem);
    line-height: 1.4;
}

@media (min-width: 320px) and (max-width: 767px) {
    .dc-contract-card-item__header {
        max-width: none;
        max-width: initial;
    }
}

[dir='ltr'] .dc-contract-card-item__body {
    text-align: left;
}

[dir='rtl'] .dc-contract-card-item__body {
    text-align: right;
}

.dc-contract-card-item__body {
    font-size: 1.2rem;
    color: var(--text-general);
    font-weight: 700;
    text-transform: none;
    line-height: 1.25;
    display: flex;
    align-self: flex-start;
    line-height: 1.5;
}

[dir='ltr'] .dc-contract-card-item__body--is-crypto {
    margin-left: -6px;
}

[dir='rtl'] .dc-contract-card-item__body--is-crypto {
    margin-right: -6px;
}

@media (min-width: 320px) and (max-width: 767px) {
    [dir='ltr'] .dc-contract-card-item__body {
        padding-left: 0.4rem;
    }

    [dir='rtl'] .dc-contract-card-item__body {
        padding-right: 0.4rem;
    }
}

.dc-contract-card-item__body--loss {
    color: var(--text-loss-danger) !important;
}

.dc-contract-card-item__body--loss:before {
    content: '-';
}

.dc-contract-card-item__body--profit {
    color: var(--text-profit-success) !important;
}

.dc-contract-card-item__body--profit:before {
    content: '+';
}

.dc-contract-card-item__total-profit-loss {
    padding: 0.8rem 0.8rem 0;
    border-top: 1px solid var(--general-section-1);
    display: flex;
    flex-direction: column;
    align-items: center;
    margin-top: 0.8rem;
}

.dc-contract-card-item__total-profit-loss .dc-contract-card-item__header,
.dc-contract-card-item__total-profit-loss .dc-contract-card-item__body {
    font-size: 1.4rem;
    line-height: 2rem;
    align-self: center;
}

@media (min-width: 320px) and (max-width: 767px) {
    .dc-contract-card-item__total-profit-loss {
        flex-direction: row;
        justify-content: center;
        grid-column: 1/4;
    }

    [dir='ltr'] .dc-contract-card-item__total-profit-loss-value {
        margin-left: 0.2rem;
    }

    [dir='rtl'] .dc-contract-card-item__total-profit-loss-value {
        margin-right: 0.2rem;
    }
}

.dc-contract-card-item__total-profit-loss-label,
.dc-contract-card-item__total-profit-loss-value {
    font-size: 1.4rem;
    line-height: 2rem;
}

.dc-contract-card-item__payout-limit {
    padding: 0.8rem 0 0;
    border-top: 1px solid var(--general-section-1);
    display: flex;
    flex-direction: column;
    align-items: center;
}

.dc-contract-card-item__payout-limit .dc-contract-card-item__body {
    align-self: center;
}

.dc-contract-card-item__footer .lookbacks--note {
    margin-top: 0.4rem;
}

.dc-contract-card__sell-button {
    display: flex;
    align-items: center;
    justify-content: center;
    transition:
        transform 0.25s ease,
        opacity 0.25s linear;
    padding-top: 0.4rem;
    margin-top: 0.8rem;
    border-top: 1px solid var(--general-section-1);
    min-height: 4rem;
}

.dc-contract-card__sell-button--positions {
    padding: 0.8rem 0;
    margin: 0 0.8rem;
}

.dc-contract-card__sell-button--enter-done {
    opacity: 1;
}

.dc-contract-card__sell-button--enter,
.dc-contract-card__sell-button--exit {
    opacity: 0;
    transform: translateY(-8px);
}

.dc-contract-card__sell-button--has-cancel-btn {
    gap: 0.8rem;
}

.dc-contract-card__sell-button--has-cancel-btn .dc-btn {
    padding: 0 0.5rem;
}

.dc-contract-card__sell-button--has-cancel-btn .dc-btn--cancel {
    width: 100%;
}

.dc-contract-card__sell-button .dc-remaining-time {
    border-radius: 0.4rem;
    font-size: 1.2rem;
}

[dir='ltr'] .dc-contract-card__sell-button .dc-remaining-time {
    margin-left: 0.8rem;
}

[dir='rtl'] .dc-contract-card__sell-button .dc-remaining-time {
    margin-right: 0.8rem;
}

.dc-contract-card__sell-button .dc-btn--sell,
.dc-contract-card__sell-button .dc-btn--cancel {
    height: 2.4rem;
}

.dc-contract-card__sell-button .dc-btn--sell .dc-btn__text,
.dc-contract-card__sell-button .dc-btn--cancel .dc-btn__text {
    font-size: 1.2rem;
}

@media (min-width: 320px) and (max-width: 767px) {
    .dc-contract-card__sell-button .dc-btn--sell,
    .dc-contract-card__sell-button .dc-btn--cancel {
        height: 3.2rem;
    }
}

.dc-contract-card__indicative--movement {
    width: 16px;
    height: 16px;
}

[dir='ltr'] .dc-contract-card__indicative--movement {
    margin-left: 2px;
}

[dir='rtl'] .dc-contract-card__indicative--movement {
    margin-right: 2px;
}

.dc-contract-card__indicative--movement:after {
    content: '';
    width: 16px;
}

.dc-contract-card__status {
    min-width: 25%;
    display: flex;
    align-items: center;
    justify-content: center;
}

[dir='ltr'] .dc-contract-card__status .result-icon,
[dir='ltr'] .dc-contract-card__status--accumulator-mobile-positions .dc-result__icon {
    margin-left: 0.4rem;
}

[dir='rtl'] .dc-contract-card__status .result-icon,
[dir='rtl'] .dc-contract-card__status--accumulator-mobile-positions .dc-result__icon {
    margin-right: 0.4rem;
}

.dc-contract-card__limit-order-info {
    grid-area: limit-order-info;
    display: grid;
    grid-gap: 0.4rem 0;
    position: relative;
}

.dc-contract-card__limit-order-info .dc-contract-card__stop-loss {
    padding-bottom: 0.4rem;
}

.dc-contract-card__take-profit {
    position: relative;
}

.dc-contract-card__buy-price {
    grid-area: buy-price;
}

.dc-contract-card__deal-cancel-fee {
    grid-area: deal-cancel-fee;
}

.dc-contract-card__deal-cancel-fee__disabled {
    color: var(--text-disabled-1);
}

.dc-contract-card__deal-cancel-fee__disabled .dc-contract-card-item__body {
    color: inherit;
}

.dc-contract-card__stake {
    grid-area: stake;
}

.dc-contract-card__date-expiry {
    grid-area: date-expiry;
}

.dc-contract-card__date-expiry .dc-contract-card-item__body {
    justify-content: flex-end;
}

.dc-contract-card__current-stake {
    grid-area: current-stake;
}

.dc-contract-card__sell-button-mobile {
    justify-self: center;
    align-self: center;
}

.dc-contract-card__sell-button-mobile .dc-btn--sell {
    height: 3.2rem !important;
}

.dc-contract-card__no-resale-msg {
    font-size: 1.1rem;
}

.dc-contract-card .contract-audit__wrapper {
    padding: 2px 0;
    width: 100%;
}

.dc-contract-card .contract-audit__wrapper--is-open {
    margin-top: 0.5em;
}

.dc-contract-card .contract-audit__toggle {
    margin: 0 0 -0.5em;
    width: 100%;
}

.dc-contract-card .contract-audit__label {
    font-size: 0.8em;
}

[dir='ltr'] .dc-contract-card .contract-audit__label {
    text-align: left;
}

[dir='rtl'] .dc-contract-card .contract-audit__label {
    text-align: right;
}

.dc-contract-card .contract-audit__value {
    font-size: 1em;
}

[dir='ltr'] .dc-contract-card .contract-audit__value {
    text-align: left;
}

[dir='rtl'] .dc-contract-card .contract-audit__value {
    text-align: right;
}

.dc-contract-card .dc-contract-type__type-wrapper {
    width: auto;
    width: initial;
    height: auto;
    height: initial;
}

/** @define dc-contract-type */
.dc-contract-type {
    display: flex;
    flex-direction: row;
    align-items: center;
    text-align: center;
}

[dir='ltr'] .dc-contract-type {
    margin-left: -4px;
}

[dir='rtl'] .dc-contract-type {
    margin-right: -4px;
}

.dc-contract-type__type-wrapper {
    margin: 0;
    padding: 0.5em 0.3em;
    display: flex;
    justify-content: center;
    align-items: center;
    /* postcss-bem-linter: ignore */
}

.dc-contract-type__type-wrapper .category-type {
    width: 20px;
    height: 20px;
}

.dc-contract-type__type-label {
    width: 3.8em;
    line-height: 1.5;
    text-align: left;
}

.dc-contract-type__type-label--smarttrader-contract,
.dc-contract-type__type-label--multipliers {
    width: 7rem;
}

@media (min-width: 320px) and (max-width: 767px) {
    .dc-contract-type__type-label--smarttrader-contract,
    .dc-contract-type__type-label--multipliers {
        width: 9rem;
    }
}

.dc-contract-type__type-label--lookbacks-contract {
    width: 5rem;
}

@media (min-width: 320px) and (max-width: 767px) {
    .dc-contract-type__type-label--lookbacks-contract {
        width: auto;
        width: initial;
    }
}

.dc-contract-type__type-label-trade-param {
    font-size: 1rem;
    line-height: 1rem;
    color: var(--text-less-prominent);
}

/** @define dc-btn; */
.dc-btn--sell {
    width: 100%;
}

/** @define dc-remaining-time; weak */
.dc-remaining-time {
    display: inline;
}

/** @define dc-tick-counter-bar; */
.dc-tick-counter-bar__container {
    grid-column-start: 1;
    grid-column-end: 3;
    position: relative;
    width: 100%;
    padding: 0;
    padding: initial;
    box-sizing: border-box;
    margin: 0.8rem 0;
    border-bottom: 1px solid var(--general-section-1);
}

@media (min-width: 320px) and (max-width: 767px) {
    .dc-tick-counter-bar__container {
        display: flex;
        flex-direction: column;
        align-items: center;
        border-bottom: 0;
        border-bottom: initial;
        margin: 0;
        margin: initial;
    }
}

.dc-tick-counter-bar__track {
    height: 1.8rem;
    background: var(--general-section-1);
    border-radius: 4px;
    position: relative;
    margin-bottom: 0.8rem;
    width: 100%;
}

@media (min-width: 320px) and (max-width: 767px) {
    .dc-tick-counter-bar__track {
        display: flex;
        flex-direction: column;
        align-items: center;
        border-bottom: 0;
        border-bottom: initial;
        margin: 0.2rem 0 0.4rem;
    }
}

.dc-tick-counter-bar__text {
    position: absolute;
    width: 100%;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
/** @define dc-datepicker; weak */
.dc-datepicker {
    position: relative;
    display: inline-block;
    width: 100%;
}

.dc-datepicker__container {
    display: flex;
    border: 1px solid var(--border-normal);
    border-radius: 4px;
    align-items: center;
}

.dc-datepicker__container:hover:not(.dc-input--disabled) {
    border-color: var(--border-hover);
}

.dc-datepicker__container[focus-within] {
    border-color: var(--brand-secondary);
}

.dc-datepicker__container:focus-within {
    border-color: var(--brand-secondary);
}

.dc-datepicker__container[focus-within]:hover {
    border-color: var(--brand-secondary);
}

.dc-datepicker__container:focus-within:hover {
    border-color: var(--brand-secondary);
}

.dc-datepicker__container--error {
    border-color: var(--brand-red-coral) !important;
}

.dc-datepicker__container--disabled {
    border-color: var(--general-disabled);
}

@media (max-width: 1279px) {
    .dc-datepicker__container input[type='date']::-webkit-calendar-picker-indicator {
        background: transparent;
        bottom: 0;
        color: transparent;
        cursor: pointer;
        height: auto;
        left: 0;
        position: absolute;
        right: 0;
        top: 0;
        width: auto;
    }
}

.dc-datepicker__hint {
    position: absolute;
    top: 4.1rem;
}

[dir='ltr'] .dc-datepicker__hint {
    margin-left: 1.3rem;
}

[dir='rtl'] .dc-datepicker__hint {
    margin-right: 1.3rem;
}

.dc-datepicker__hint--relative {
    position: relative;
    top: auto;
    top: initial;
}

[dir='ltr'] .dc-datepicker__hint--relative {
    margin-left: 1.2rem;
}

[dir='rtl'] .dc-datepicker__hint--relative {
    margin-right: 1.2rem;
}

.dc-datepicker__input .dc-input__field {
    width: 100%;
    border-radius: 4px;
    box-sizing: border-box;
    -webkit-appearance: none;
    -moz-appearance: none;
}

.dc-datepicker__input .dc-input__field:hover:not(:disabled) {
    cursor: pointer;
    border-color: var(--border-hover);
}

.dc-datepicker__input .dc-input__field:focus {
    outline: none;
}

.dc-datepicker__input .dc-input__field:active {
    border-color: var(--border-active);
}

.dc-datepicker__input .dc-input__field::-ms-clear {
    display: none;
}

.dc-datepicker__input .dc-input__field::-moz-placeholder {
    /* Fix value placeholder for datepicker for Firefox 19+ */
    line-height: 4rem;
}

.dc-datepicker__input--has-leading-icon .dc-input__field {
    text-align: center;
}

.dc-datepicker .dc-icon {
    margin-bottom: 0.3rem;
}

[dir='ltr'] .dc-datepicker .dc-icon {
    margin-right: -0.2rem;
}

[dir='rtl'] .dc-datepicker .dc-icon {
    margin-left: -0.2rem;
}

.dc-datepicker .dc-icon:not(.dc-icon--disabled) {
    cursor: pointer;
}

.dc-datepicker__picker {
    position: absolute;
    z-index: 2;
    transform: translate3d(0, 0, 0);
    opacity: 1;
}

.dc-datepicker__picker--left-enter,
.dc-datepicker__picker--left-exit {
    transform: translate3d(-275px, 0, 0);
    opacity: 0;
}

.dc-datepicker__picker--left-enter-done {
    transform: translate3d(-295px, 0, 0);
    opacity: 1;
}

.dc-datepicker__picker--left-enter-done,
.dc-datepicker__picker--left-exit {
    transition:
        transform 0.25s ease,
        opacity 0.25s linear;
}

.dc-datepicker__picker--top-enter,
.dc-datepicker__picker--top-exit {
    transform: translate3d(0, 0, 0);
    opacity: 0;
}

.dc-datepicker__picker--top-enter-done {
    transform: translate3d(0, -40px, 0);
    opacity: 1;
}

.dc-datepicker__picker--top-enter-done,
.dc-datepicker__picker--top-exit {
    transition:
        transform 0.25s ease,
        opacity 0.25s linear;
}

.dc-datepicker__picker--bottom-enter,
.dc-datepicker__picker--bottom-exit {
    transform: translate3d(0, 0, 0);
    opacity: 0;
}

.dc-datepicker__picker--bottom-enter-done {
    transform: translate3d(0, 40px, 0);
    opacity: 1;
}

.dc-datepicker__picker--bottom-enter-done,
.dc-datepicker__picker--bottom-exit {
    transition:
        transform 0.25s ease,
        opacity 0.25s linear;
}

@media (max-width: 1279px) {
    .dc-datepicker--hint {
        margin-bottom: 5rem;
    }

    .dc-datepicker__native {
        opacity: 0;
        width: 100%;
        min-width: calc(100% - 1rem);
        position: absolute;
        height: 38px;
    }

    .dc-datepicker__display {
        display: flex;
        align-items: center;
        justify-content: flex-start;
        height: 38px;
        position: relative;
        width: 100%;
        color: var(--text-prominent);
    }

    [dir='ltr'] .dc-datepicker__display {
        padding-left: 1rem;
    }

    [dir='rtl'] .dc-datepicker__display {
        padding-right: 1rem;
    }

    .dc-datepicker__display-text {
        background-color: inherit;
        padding-top: 0.2rem;
    }

    .dc-datepicker__display-text--has-error {
        padding-top: 0;
        padding-top: initial;
    }

    .dc-datepicker__calendar-icon {
        pointer-events: none;
    }

    [dir='ltr'] .dc-datepicker__calendar-icon {
        margin-right: 1rem;
    }

    [dir='rtl'] .dc-datepicker__calendar-icon {
        margin-left: 1rem;
    }

    .dc-datepicker__placeholder {
        color: var(--text-general);
        transform: none;
        transition: transform 0.25s linear;
        position: absolute;
        font-size: 1.4rem;
    }

    [dir='ltr'] .dc-datepicker__placeholder {
        left: 1.3rem;
    }

    [dir='rtl'] .dc-datepicker__placeholder {
        right: 1.3rem;
    }

    .dc-datepicker__placeholder--has-value {
        color: var(--text-general);
        background-color: var(--fill-normal);
    }

    [dir='ltr'] .dc-datepicker__placeholder--has-value {
        transform: translate3d(-14px, -20px, 0px) scale(0.7);
    }

    [dir='rtl'] .dc-datepicker__placeholder--has-value {
        transform: translate3d(14px, -20px, 0px) scale(0.7);
    }

    .dc-datepicker__placeholder--has-error {
        color: var(--brand-red-coral);
    }

    .dc-datepicker__placeholder--is-focused {
        color: var(--brand-secondary);
    }

    .dc-datepicker__error {
        display: flex;
        position: absolute;
        top: 4.5rem;
    }

    [dir='ltr'] .dc-datepicker__error {
        left: 1.3rem;
    }

    [dir='rtl'] .dc-datepicker__error {
        right: 1.3rem;
    }
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
/** @define data-list; weak */
.data-list {
    position: relative;
    height: 100%;
    display: flex;
    flex-direction: column;
}

.data-list__body {
    flex: 1;
}

.data-list__body-wrapper {
    display: flex;
    flex-direction: column;
    height: 100%;
}

.data-list__footer {
    width: 100%;
    background: var(--general-main-1);
    border-top: 2px solid var(--border-disabled);
    display: flex;
    align-items: center;
    position: relative;
}

.data-list__item {
    height: inherit;
}

.data-list__item--wrapper {
    height: inherit;
    text-decoration: none;
    -webkit-touch-callout: none;
    -webkit-tap-highlight-color: transparent;
}

@media (min-width: 320px) and (max-width: 767px) {
    .data-list__item {
        border-radius: 4px;
    }
}

.data-list__row {
    display: flex;
    flex-direction: row;
    padding: 4px 16px;
    width: 100%;
}

.data-list__row > * {
    flex: 1;
}

.data-list__row-content {
    font-size: 1.4rem;
    line-height: 2rem;
    color: var(--text-general);
}

.data-list__row-cell--amount {
    display: flex;
    flex-direction: column;
    align-items: flex-end;
    flex: none;
}

.data-list__row-title {
    font-size: 1.4rem;
    font-weight: bold;
    color: var(--text-prominent);
    line-height: 2rem;
}

@media (min-width: 320px) and (max-width: 767px) {
    .data-list__row-title {
        font-size: 1.2rem;
    }
}

.data-list__row-divider {
    margin: 0 1.6rem;
}

.data-list__row-divider:after {
    content: '';
    display: block;
    border-top: 1px solid var(--general-main-1);
}

.data-list__row--wrapper:not(.data-list__item--dynamic-height-wrapper) {
    height: 100%;
}

.data-list__row--timer {
    flex: none;
}

.data-list__desc--wrapper {
    height: inherit;
    display: flex;
    text-align: center;
    align-items: center;
    font-size: var(--text-size-xxs);
    color: var(--text-general);
    padding: 1rem;
}

/* stylelint-disable-next-line plugin/selector-bem-pattern */
.ReactVirtualized__List {
    outline: 0;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
/** @define dc-data-table */
.dc-data-table {
    display: flex;
    flex-direction: column;
}

/** @define table */
.table {
    display: flex;
    flex-direction: column;
    box-sizing: border-box;
    font-size: 1.4rem;
    color: var(--text-general);
    font-weight: 400;
    text-transform: default;
    text-align: center;
    line-height: 1.5;
    color: var(--text-general);
}

.table__cell {
    padding: 0.75em;
    display: flex;
    align-items: center;
}

[dir='ltr'] .table__cell:first-child {
    padding-left: 0;
}

[dir='rtl'] .table__cell:first-child {
    padding-right: 0;
}

[dir='ltr'] .table__cell:last-child {
    padding-right: 0;
}

[dir='rtl'] .table__cell:last-child {
    padding-left: 0;
}

.table__row {
    display: grid;
    grid-auto-rows: max-content;
    padding: 0 1.6em;
    box-sizing: border-box;
    text-decoration: none;
    position: relative;
}

.table__row,
.table__row:active,
.table__row:visited {
    color: var(--text-general);
}

.table__row--preloader {
    position: absolute;
    top: 0;
    height: 100%;
    max-height: 64px;
    width: 100%;
}

[dir='ltr'] .table__row--preloader {
    left: 0;
}

[dir='rtl'] .table__row--preloader {
    right: 0;
}

[dir='ltr'] .table__row--icon {
    margin-left: 1rem;
}

[dir='rtl'] .table__row--icon {
    margin-right: 1rem;
}

.table__head {
    border-bottom: 2px solid var(--general-section-1);
    height: 52px;
}

.table__head .table__row {
    color: var(--text-prominent);
    height: 100%;
    border-bottom: none;
}

.table__body {
    overflow: hidden;
    flex-grow: 1;
    display: flex;
    flex-direction: column;
    flex-basis: 0;
}

.table__body .table__row-link:hover {
    background-color: var(--state-hover);
    cursor: pointer;
}

.table__body .table__row:last-child {
    border-bottom: none;
}

.table__head,
.table__foot {
    font-weight: 500;
    white-space: nowrap;
}

.table__foot {
    border-top: 2px solid var(--general-section-1);
}

.table__foot .table__row {
    color: var(--text-general);
    border-bottom: none;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
/** @define dc-dialog */
.dc-dialog {
    width: 100vw;
    height: 100vh;
    display: flex;
    align-items: center;
    justify-content: center;
    text-align: center;
    flex-direction: column;
    z-index: 999;
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
}

.dc-dialog__wrapper {
    position: fixed;
    top: 0;
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 999;
    transition: opacity 0.25s cubic-bezier(0.25, 0.1, 0.1, 0.25);
    background-color: var(--overlay-outside-dialog);
}

[dir='ltr'] .dc-dialog__wrapper {
    left: 0;
}

[dir='rtl'] .dc-dialog__wrapper {
    right: 0;
}

.dc-dialog__wrapper--enter,
.dc-dialog__wrapper--exit {
    opacity: 0;
}

.dc-dialog__wrapper--enter .dc-dialog__dialog,
.dc-dialog__wrapper--exit .dc-dialog__dialog {
    transform: translate3d(0, 50px, 0);
    opacity: 0;
}

.dc-dialog__wrapper--enter-done {
    opacity: 1;
}

.dc-dialog__wrapper--enter-done .dc-dialog__dialog {
    transform: translate3d(0, 0, 0);
    opacity: 1;
}

.dc-dialog__wrapper--has-portal {
    background-color: transparent;
}

.dc-dialog__dialog {
    max-width: 560px;
    max-height: 338px;
    min-width: 440px;
    min-height: 176px;
    margin-top: -48px;
    padding: 2.4rem;
    border-radius: 8px;
    box-sizing: border-box;
    display: flex;
    justify-content: space-around;
    flex-direction: column;
    align-items: center;
    box-shadow: 0 2px 8px 0 var(--shadow-menu);
    background-color: var(--general-main-2);
    transition:
        transform 0.25s cubic-bezier(0.25, 0.1, 0.1, 0.25),
        opacity 0.25s cubic-bezier(0.25, 0.1, 0.1, 0.25);
}

.dc-dialog__header-wrapper {
    width: 100%;
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1rem;
}

.dc-dialog__header-wrapper--end {
    justify-content: flex-end;
}

.dc-dialog__header--title {
    align-self: flex-start;
}

.dc-dialog__header--close {
    cursor: pointer;
}

.dc-dialog__content {
    align-self: flex-start;
    margin-bottom: 2.4rem;
    max-width: calc(440px - 4.8rem);
    width: 100%;
    /* postcss-bem-linter: ignore */
}

.dc-dialog__content .dc-input__label {
    background-color: var(--general-main-2);
}

.dc-dialog__content--centered {
    align-self: center;
}

.dc-dialog__footer {
    display: flex;
    justify-content: flex-end;
    align-items: center;
    width: 100%;
}

@media (min-width: 320px) and (max-width: 767px) {
    .dc-dialog__footer {
        flex-wrap: wrap;
        align-items: flex-start;
    }
}

[dir='ltr'] .dc-dialog__button {
    margin-left: 0.8rem;
}

[dir='rtl'] .dc-dialog__button {
    margin-right: 0.8rem;
}

@media (min-width: 320px) and (max-width: 767px) {
    .dc-dialog__button:not(:last-child) {
        margin-bottom: 1rem;
    }
}

@media screen and (max-width: 560px) {
    .dc-dialog__dialog {
        min-width: auto;
    }

    .dc-dialog__dialog--has-margin {
        min-width: 0;
        min-width: initial;
        width: calc(100vw - 4.8rem);
    }
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
/** @define dc-drawer */
.dc-drawer {
    position: fixed;
    will-change: transform;
    transition: transform 0.3s ease;
    background: var(--general-main-2);
}

.dc-drawer--left {
    display: flex;
    flex-direction: row-reverse;
}

[dir='ltr'] .dc-drawer--left {
    right: calc(100vw - 16px);
}

[dir='rtl'] .dc-drawer--left {
    left: calc(100vw - 16px);
}

.dc-drawer--right {
    display: flex;
    flex-direction: row;
}

[dir='ltr'] .dc-drawer--right {
    left: calc(100vw - 16px);
}

[dir='rtl'] .dc-drawer--right {
    right: calc(100vw - 16px);
}

@media (max-width: 1279px) {
    .dc-drawer {
        width: 100vw !important;
        height: calc(100% - 10.1rem) !important;
        top: calc(100% - 9.8rem) !important;
    }
}

.dc-drawer__container {
    display: flex;
    flex-direction: column;
    height: 100%;
    width: 100%;
}

[dir='ltr'] .dc-drawer__container--left {
    padding-right: 16px;
}

[dir='rtl'] .dc-drawer__container--left {
    padding-left: 16px;
}

[dir='ltr'] .dc-drawer__container--right {
    padding-left: 16px;
}

[dir='rtl'] .dc-drawer__container--right {
    padding-right: 16px;
}

@media (max-width: 1279px) {
    .dc-drawer__container {
        height: calc(100% - 3.6rem);
    }
}

.dc-drawer__header {
    border-bottom: 1px solid var(--general-section-1);
    line-height: 40px;
    font-weight: 700;
    font-size: 1.6em;
}

.dc-drawer__content {
    flex-grow: 1;
    overflow: auto;
}

.dc-drawer__footer {
    background-color: var(--general-main-2);
    border-top: 1px solid var(--general-section-1);
    line-height: 40px;
    font-weight: 700;
    font-size: 1.6em;
    align-items: center;
}

.dc-drawer__toggle {
    align-items: center;
    border-left: 1px solid var(--border-disabled);
    border-right: 1px solid var(--border-disabled);
    display: flex;
    position: absolute;
    width: 16px;
    height: 100%;
    background-color: var(--general-section-5);
    cursor: pointer;
}

@media (max-width: 1279px) {
    .dc-drawer__toggle {
        position: static;
        position: initial;
        width: 100%;
        height: 3.6rem;
        justify-content: center;
        background-color: var(--general-main-1);
        border-top: solid 1px var(--general-section-1);
    }
}

.dc-drawer__toggle-icon {
    transition: 0.25s ease;
}

.dc-drawer__toggle-icon--left {
    transform: rotate(0);
}

[dir='ltr'] .dc-drawer__toggle-icon--right {
    transform: rotate(180deg);
}

[dir='rtl'] .dc-drawer__toggle-icon--right {
    transform: rotate(-180deg);
}

@media (max-width: 1279px) {
    .dc-drawer__toggle-icon {
        width: 2.5rem;
        height: 0.8rem;
        transform: rotate(0);
    }
}

[dir='ltr'] .dc-drawer__toggle--open > .dc-drawer__toggle-icon--left {
    transform: rotate(180deg);
}

[dir='rtl'] .dc-drawer__toggle--open > .dc-drawer__toggle-icon--left {
    transform: rotate(-180deg);
}

.dc-drawer__toggle--open > .dc-drawer__toggle-icon--right {
    transform: rotate(0);
}

@media (max-width: 1279px) {
    [dir='ltr'] .dc-drawer__toggle--open > .dc-drawer__toggle-icon {
        transform: rotate(180deg);
    }

    [dir='rtl'] .dc-drawer__toggle--open > .dc-drawer__toggle-icon {
        transform: rotate(-180deg);
    }
}

@media (max-width: 1279px) {
    .dc-drawer--open {
        transform: translateY(calc(-100% + 3.6rem));
    }
}
@charset "UTF-8";
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
.dc-dropdown__select-arrow {
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */
}

.dc-dropdown__select-arrow .color1-fill {
    fill: var(--text-general);
}

.dc-dropdown__select-arrow .color1-stroke {
    stroke: var(--text-general);
}

.dc-dropdown__select-arrow .color2-fill {
    fill: none;
}

.dc-dropdown__select-arrow .color2-stroke {
    stroke: none;
}
.active.dc-dropdown__select-arrow {
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */
}

.active.dc-dropdown__select-arrow .color1-fill {
    fill: var(--text-prominent);
}

.active.dc-dropdown__select-arrow .color1-stroke {
    stroke: var(--text-prominent);
}

.active.dc-dropdown__select-arrow .color2-fill {
    fill: none;
}

.active.dc-dropdown__select-arrow .color2-stroke {
    stroke: none;
}
.disabled.dc-dropdown__select-arrow {
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */
}

.disabled.dc-dropdown__select-arrow .color1-fill {
    fill: var(--text-disabled);
}

.disabled.dc-dropdown__select-arrow .color1-stroke {
    stroke: var(--text-disabled);
}

.disabled.dc-dropdown__select-arrow .color2-fill {
    fill: none;
}

.disabled.dc-dropdown__select-arrow .color2-stroke {
    stroke: none;
}
.white.dc-dropdown__select-arrow {
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */
}

.white.dc-dropdown__select-arrow .color1-fill {
    fill: var(--text-prominent);
}

.white.dc-dropdown__select-arrow .color1-stroke {
    stroke: var(--text-prominent);
}
.border_hover_color.dc-dropdown__select-arrow {
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */
}

.border_hover_color.dc-dropdown__select-arrow .color1-fill {
    fill: var(--text-prominent);
}

.border_hover_color.dc-dropdown__select-arrow .color1-stroke {
    stroke: var(--text-prominent);
}
.secondary.dc-dropdown__select-arrow {
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */
}

.secondary.dc-dropdown__select-arrow .color1-fill {
    fill: var(--text-less-prominent);
}

.secondary.dc-dropdown__select-arrow .color1-stroke {
    stroke: var(--text-less-prominent);
}

/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
[dir='ltr'] .dc-dropdown__label {
    left: 0;
}
[dir='rtl'] .dc-dropdown__label {
    right: 0;
}
.dc-dropdown__label {
    position: absolute;
    font-size: var(--text-size-xs);
    z-index: 2;
    color: var(--text-prominent);
    padding: 0 4px;
    background-color: var(--fill-normal);
    pointer-events: none;
    transition: 0.25s ease all;
}

[dir='ltr'] .dc-dropdown__label {
    transform: translate(0.5rem, -1rem) scale(0.75);
}

[dir='rtl'] .dc-dropdown__label {
    transform: translate(-0.5rem, -1rem) scale(0.75);
}

.dc-dropdown__label--clicked {
    color: var(--brand-secondary);
}

.dc-dropdown__display {
    cursor: pointer;
    border-radius: 4px;
    height: 3.2em;
    display: flex;
    align-items: center;
    justify-content: center;
    background: var(--fill-normal);
    border: 1px solid var(--border-normal);
}

.dc-dropdown__display:hover {
    outline: 0;
    border-color: var(--border-hover);
}

.dc-dropdown__display:active,
.dc-dropdown__display:focus {
    outline: 0;
}

.dc-dropdown__display-text {
    display: flex;
    white-space: nowrap;
}

[dir='ltr'] .dc-dropdown__display-text {
    padding-left: 1em;
    padding-right: 2.5em;
}

[dir='rtl'] .dc-dropdown__display-text {
    padding-right: 1em;
    padding-left: 2.5em;
}

.dc-dropdown__display-text--placeholder:after {
    content: attr(placeholder);
    position: absolute;
    display: flex;
    align-items: center;
    justify-content: center;
    top: 0;
    width: 100%;
    height: 100%;
    pointer-events: none;
}

[dir='ltr'] .dc-dropdown__display-text--placeholder:after {
    left: 0;
}

[dir='rtl'] .dc-dropdown__display-text--placeholder:after {
    right: 0;
}

.dc-dropdown__display--has-suffix-icon {
    width: 21rem;
    justify-content: start;
}

[dir='ltr'] .dc-dropdown__display--has-suffix-icon {
    padding-left: 3rem;
    padding-right: 0;
}

[dir='rtl'] .dc-dropdown__display--has-suffix-icon {
    padding-right: 3rem;
    padding-left: 0;
}

.dc-dropdown__display--is-left-text {
    justify-content: flex-start;
}

.dc-dropdown__display--is-left-text .dc-dropdown__display-text {
    white-space: nowrap;
    text-overflow: ellipsis;
    overflow: hidden;
    display: inline-block;
}

[dir='ltr'] .dc-dropdown__display--is-left-text .dc-dropdown__display-text {
    padding-left: 1.2rem;
}

[dir='rtl'] .dc-dropdown__display--is-left-text .dc-dropdown__display-text {
    padding-right: 1.2rem;
}

.dc-dropdown__display--duration {
    margin-top: 1rem;
}

.dc-dropdown__display--duration .dc-dropdown__display-text {
    color: var(--text-general) !important;
    padding: 0 !important;
}

.dc-dropdown__display--has-symbol {
    justify-content: initial;
}

.dc-dropdown__display--no-border {
    border-color: var(--fill-normal);
}

.dc-dropdown__display-placeholder {
    position: absolute;
    top: 1.2rem;
    pointer-events: none;
    transition: 0.25s ease all;
    transform: translateZ(0);
}

[dir='ltr'] .dc-dropdown__display-placeholder {
    left: 1rem;
    transform-origin: top left;
}

[dir='rtl'] .dc-dropdown__display-placeholder {
    right: 1rem;
    transform-origin: top right;
}

.dc-dropdown__display-placeholder-text {
    padding: 0 4px;
    background: var(--fill-normal);
}

.dc-dropdown__display-placeholder--is-left-text {
    justify-content: flex-start;
}

[dir='ltr'] .dc-dropdown__display-placeholder--is-left-text {
    left: 8px;
}

[dir='rtl'] .dc-dropdown__display-placeholder--is-left-text {
    right: 8px;
}

.dc-dropdown__display-placeholder--is-left-text.dc-dropdown__display-placeholder--is-title {
    transform: translate(0, -1.7rem) scale(0.75);
    padding: 0 2px;
    white-space: nowrap;
}

.dc-dropdown__display-placeholder--is-left-text.dc-dropdown__display-placeholder--is-title
    .dc-dropdown__display-placeholder-text {
    color: var(--text-general) !important;
}

.dc-dropdown__inner {
    pointer-events: none;
    opacity: 0;
    height: 0;
    width: 0;
}

.dc-dropdown__container {
    position: relative;
}

[dir='ltr'] .dc-dropdown__hint {
    margin-left: 1.2rem;
}

[dir='rtl'] .dc-dropdown__hint {
    margin-right: 1.2rem;
}

.dc-dropdown--no-margin .dc-dropdown__display {
    margin: 0;
}

.dc-dropdown__select-arrow {
    display: inline-block;
    font-style: normal;
    vertical-align: baseline;
    text-rendering: optimizeLegibility;
    position: absolute;
    pointer-events: none;
    top: calc(50% - 7px);
    transition: transform 0.2s ease;
    transform: rotate(0deg);
    transform-origin: 50% 45%;
    font-size: 1.6rem;
    color: var(--text-general);
    font-weight: 400;
    text-transform: none;
    text-align: center;
    line-height: 1.75;
}

[dir='ltr'] .dc-dropdown__select-arrow {
    right: 12px;
}

[dir='rtl'] .dc-dropdown__select-arrow {
    left: 12px;
}

.dc-dropdown__select-arrow:before {
    content: '⌃';
    display: block;
    height: 0.53em;
}

[dir='ltr'] .dc-dropdown__select-arrow--up {
    transform: rotate(-180deg);
}

[dir='rtl'] .dc-dropdown__select-arrow--up {
    transform: rotate(180deg);
}

.dc-dropdown__select-arrow--error {
    top: 1.4rem;
}

.dc-dropdown:active,
.dc-dropdown:focus,
.dc-dropdown--show {
    outline: none;
    border-radius: 4px;
}

.dc-dropdown:active .dc-dropdown__select-arrow,
.dc-dropdown:focus .dc-dropdown__select-arrow,
.dc-dropdown--show .dc-dropdown__select-arrow {
    color: var(--text-general);
}

.dc-dropdown--error {
    margin-bottom: -1.8rem;
}

.dc-dropdown--error .dc-dropdown__display {
    border-color: var(--brand-red-coral) !important;
}

.dc-dropdown--error .dc-dropdown__label {
    color: var(--brand-red-coral) !important;
}

.dc-dropdown--error .dc-dropdown__display-placeholder-text {
    color: var(--brand-red-coral) !important;
}

.dc-dropdown__list {
    bottom: -0.4rem;
    height: 0;
    width: 100%;
    position: absolute;
    transition:
        transform 0.25s ease,
        opacity 0.25s linear;
    -webkit-user-select: none;
    -moz-user-select: none;
    user-select: none;
    opacity: 0;
    transform: scale(1, 0);
    z-index: 999;
}

[dir='ltr'] .dc-dropdown__list {
    left: 0;
}

[dir='rtl'] .dc-dropdown__list {
    right: 0;
}

.dc-dropdown__list--enter,
.dc-dropdown__list--exit {
    transform: scale(1, 0);
    opacity: 0;
}

.dc-dropdown__list--enter-done {
    transform: scale(1, 1);
    opacity: 1;
}

.dc-dropdown__list--top {
    bottom: auto;
    bottom: initial;
    top: 0.8em;
}

.dc-dropdown__list--left {
    top: -0.1em;
}

.dc-dropdown__list--left--enter,
.dc-dropdown__list--left--exit {
    transform: scale(1, 1) translate3d(2em, 0, 0px);
    opacity: 0;
}

.dc-dropdown__list--left--enter-done {
    opacity: 1;
}

.dc-dropdown__list--portal {
    height: auto;
    margin: 0.4rem 0;
}

.dc-dropdown__list--portal .dc-list {
    position: static;
}

.dc-dropdown--left .dc-dropdown__display {
    text-align: center;
}

[dir='ltr'] .dc-dropdown--left .dc-dropdown__display-text {
    padding-left: 0;
    padding-left: initial;
}

[dir='rtl'] .dc-dropdown--left .dc-dropdown__display-text {
    padding-right: 0;
    padding-right: initial;
}

.dc-dropdown--left .dc-dropdown__display-symbol {
    position: relative;
}

[dir='ltr'] .dc-dropdown--left .dc-dropdown__display-symbol {
    right: 0;
    float: right;
    margin-left: auto;
    margin-right: 0.6em;
}

[dir='rtl'] .dc-dropdown--left .dc-dropdown__display-symbol {
    left: 0;
    float: left;
    margin-right: auto;
    margin-left: 0.6em;
}

.dc-dropdown--left .dc-dropdown__select-arrow {
    left: 0.6em;
    right: auto;
    right: initial;
}

.dc-dropdown--show .dc-dropdown__display {
    border: 1px solid var(--border-active);
}

[dir='ltr'] .dc-dropdown--show > .dc-dropdown__select-arrow {
    transform: rotate(-180deg);
}

[dir='rtl'] .dc-dropdown--show > .dc-dropdown__select-arrow {
    transform: rotate(180deg);
}

[dir='ltr'] .dc-dropdown--show > .dc-dropdown__select-arrow--left {
    transform: rotate(-180deg);
}

[dir='rtl'] .dc-dropdown--show > .dc-dropdown__select-arrow--left {
    transform: rotate(180deg);
}

.dc-dropdown--disabled {
    pointer-events: none;
}

.dc-dropdown--disabled .dc-dropdown__display {
    border: 1px solid var(--general-disabled);
}

.dc-dropdown--disabled .dc-dropdown__display-text {
    color: var(--text-less-prominent);
}

.dc-dropdown-container {
    position: relative;
    margin-top: 0.8rem;
    min-width: 15rem;
    width: 100%;
}

.dc-dropdown-container:not(.cfd-personal-details-modal__form *):not(.trade-container__multiplier-dropdown):not(
        .dc-dropdown--left
    ):not(.contract-type-info__dropdown) {
    margin-top: 0;
    margin-top: initial;
}

.dc-dropdown--has-placeholder .dc-dropdown__display {
    height: 4rem;
}

.dc-dropdown--has-placeholder .dc-dropdown__display .dc-dropdown__display-placeholder-text {
    color: var(--text-less-prominent);
}

.dc-dropdown--has-placeholder .dc-dropdown__display .dc-dropdown__display-placeholder-text-limit-fit {
    white-space: nowrap;
    text-overflow: ellipsis;
    overflow: hidden;
    display: inline-block;
    max-width: 36.4rem;
}

.dc-dropdown--has-placeholder .dc-dropdown__display--clicked .dc-dropdown__display-placeholder-text {
    color: var(--brand-secondary) !important;
}

.dc-dropdown--has-placeholder .dc-dropdown__select-arrow {
    top: 12px;
}

[dir='ltr'] .dc-dropdown--has-placeholder .dc-dropdown__select-arrow {
    right: 16px;
}

[dir='rtl'] .dc-dropdown--has-placeholder .dc-dropdown__select-arrow {
    left: 16px;
}

.dc-dropdown--has-suffix-icon {
    margin-top: 0;
    max-width: -moz-fit-content;
    max-width: fit-content;
}

[dir='ltr'] .dc-dropdown--has-suffix-icon {
    margin-left: 1rem;
}

[dir='rtl'] .dc-dropdown--has-suffix-icon {
    margin-right: 1rem;
}

.suffix-icon {
    position: absolute;
    transition: transform 0.2s ease;
    transform: rotate(0deg);
}

[dir='ltr'] .suffix-icon {
    left: 20px;
}

[dir='rtl'] .suffix-icon {
    right: 20px;
}

[dir='ltr'] .suffix-icon--flip {
    transform: rotate(-180deg);
}

[dir='rtl'] .suffix-icon--flip {
    transform: rotate(180deg);
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-list {
    position: absolute;
    width: 100%;
    z-index: 2;
    border-radius: 4px;
    box-shadow: 0 8px 16px 0 var(--shadow-menu);
    background: var(--general-main-2);
}

.dc-list--has-suffix-icon {
    width: 21rem;
}

.dc-list--left {
    width: auto;
    width: initial;
}

.dc-list--left .dc-list__item-text,
.dc-list--left .dc-list__item-symbol {
    padding-left: 2.286em;
    padding-right: 2.286em;
    overflow: hidden;
    white-space: nowrap;
    text-align: center;
}

.dc-list--large {
    padding-bottom: 1.6rem;
    max-height: 404px;
}

.dc-list--large .dc-list__label {
    padding: 1.6rem 0.8rem 0.8rem;
    color: var(--text-prominent);
    height: 4rem;
}

.dc-list--large .dc-list__item-text {
    width: calc(100% - 1.6rem);
    padding: 1rem 1.6rem;
    margin: 0 0.8rem;
}

.dc-list--large
    .dc-list__item:not(.dc-list--large .dc-list__item--disabled):not(.dc-list--large .dc-list__item--selected):hover,
.dc-list--large
    .dc-list__item:not(.dc-list--large .dc-list__item--disabled):not(.dc-list--large .dc-list__item--selected):focus {
    border-radius: 4px;
    width: calc(100% - 1.6rem);
    margin: 0 0.8rem;
}

.dc-list--large
    .dc-list__item:not(.dc-list--large .dc-list__item--disabled):not(.dc-list--large .dc-list__item--selected):hover
    .dc-list__item-text,
.dc-list--large
    .dc-list__item:not(.dc-list--large .dc-list__item--disabled):not(.dc-list--large .dc-list__item--selected):focus
    .dc-list__item-text {
    width: 100%;
    margin: 0;
}

.dc-list--large .dc-list__separator {
    width: 100%;
    border-bottom: 4px solid var(--general-section-2);
    margin: 1.6rem 0 0;
}

.dc-list__label {
    padding: 0.6rem;
    font-size: 1.4rem;
    font-weight: bold;
    color: var(--brand-red-coral);
    height: 3.6rem;
    display: flex;
    align-items: center;
    justify-content: center;
}

.dc-list__item {
    width: 100%;
    cursor: pointer;
}

.dc-list__item-text,
.dc-list__item-symbol {
    display: flex;
    width: 100%;
    justify-content: center;
    pointer-events: none;
    vertical-align: middle;
    padding: 0.6rem 1.6rem;
}

.dc-list__item-text--left {
    justify-content: flex-start;
}

[dir='ltr'] .dc-list__item-text--left {
    padding-left: 1em;
}

[dir='rtl'] .dc-list__item-text--left {
    padding-right: 1em;
}

.dc-list__item:not(.dc-list__item--disabled):not(.dc-list__item--selected):hover {
    background-color: var(--state-hover);
    color: var(--text-general);
}

[dir='ltr'] .dc-list__item--selected .dc-list__item-text,
[dir='ltr'] .dc-list__item--selected .dc-list__item-symbol,
[dir='ltr'] .dc-list__item--selected .dc-list__item-tooltip {
    text-align: left;
}

[dir='rtl'] .dc-list__item--selected .dc-list__item-text,
[dir='rtl'] .dc-list__item--selected .dc-list__item-symbol,
[dir='rtl'] .dc-list__item--selected .dc-list__item-tooltip {
    text-align: right;
}

.dc-list__item--selected .dc-list__item-text,
.dc-list__item--selected .dc-list__item-symbol,
.dc-list__item--selected .dc-list__item-tooltip {
    font-size: 1.4rem;
    color: var(--text-colored-background);
    font-weight: 700;
    text-transform: none;
    line-height: 1.5;
    line-height: 1.43;
    color: var(--text-prominent);
    background: var(--state-active);
    border-radius: 4px;
}

.dc-list__item:focus:not(.dc-list__item--disabled) {
    background-color: var(--state-hover);
    color: var(--text-general);
    outline: none;
}

.dc-list__item--disabled {
    color: var(--text-disabled);
    opacity: 0.3;
    cursor: default;
}

.dc-list__item-symbol {
    width: 100%;
    padding: 0.6rem 0;
    margin: 0;
    justify-content: center;
    display: flex;
}

.dc-list__separator {
    display: flex;
    width: calc(100% - 3.2rem);
    border-bottom: 1px solid var(--border-normal);
    margin: 1.6rem;
}

@media not all and (-webkit-min-device-pixel-ratio: 0), not all and (min-resolution: 0.001dpcm) {
    @supports (-webkit-appearance: none) {
        .dc-list {
            /* postcss-bem-linter: ignore */
        }

        .dc-list > div:nth-child(1) .dc-list > div:nth-child(1) {
            overflow-x: hidden !important;
        }

        .dc-list > div:nth-child(1) .dc-list > div:nth-child(1) {
            overflow-y: auto;
            /* postcss-bem-linter: ignore */
            /* postcss-bem-linter: ignore */
        }

        .dc-list > div:nth-child(1) .dc-list > div:nth-child(1)::-webkit-scrollbar {
            -webkit-appearance: none;
        }

        .dc-list > div:nth-child(1) .dc-list > div:nth-child(1) > div:nth-child(1) {
            padding-bottom: 11.5em !important;
        }
    }
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.empty-state {
    width: 100%;
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 2.4rem;
}

.empty-state__content {
    display: flex;
    flex-direction: column;
    gap: 0.8rem;
}

@media (min-width: 320px) and (max-width: 767px) {
    .empty-state__action .dc-btn__text {
        font-size: var(--text-size-xxs);
    }
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-expansion-panel__header-container {
    display: flex;
    align-items: center;
    justify-content: space-between;
    font-weight: bold;
}

.dc-expansion-panel__header-chevron-icon {
    cursor: pointer;
    transition: transform 0.3s ease;
    transform: rotate(0deg);
}

[dir='ltr'] .dc-expansion-panel__header-active .dc-expansion-panel__header-chevron-icon {
    transform: rotate(180deg);
}

[dir='rtl'] .dc-expansion-panel__header-active .dc-expansion-panel__header-chevron-icon {
    transform: rotate(-180deg);
}

.dc-expansion-panel__header-active {
    margin-bottom: 1.6rem;
}

.dc-expansion-panel__content-array {
    display: flex;
    align-items: flex-start;
    justify-content: flex-start;
    font-size: var(--text-size-xxs);
    line-height: 1.5;
}

.dc-expansion-panel__content-chevron-icon {
    margin-left: 4px;
    margin-right: 4px;
    cursor: pointer;
    transition: transform 0.3s ease;
    transform: rotate(0deg);
}

[dir='ltr'] .dc-expansion-panel__content-active .dc-expansion-panel__content-chevron-icon {
    transform: rotate(90deg);
}

[dir='rtl'] .dc-expansion-panel__content-active .dc-expansion-panel__content-chevron-icon {
    transform: rotate(-90deg);
}

[dir='ltr'] .dc-expansion-panel__content-array-item-index {
    margin-right: 4px;
}

[dir='rtl'] .dc-expansion-panel__content-array-item-index {
    margin-left: 4px;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
/** @define dc-modal; weak */
.dc-modal {
    /** @define dc-modal-header */
    /** @define dc-modal-body */
    /** @define dc-modal-footer; weak */
}

.dc-modal__container {
    display: flex;
    flex-direction: column;
    position: relative;
    overflow: hidden;
    border-radius: 8px;
    transition:
        transform 0.25s cubic-bezier(0.25, 0.1, 0.1, 0.25),
        opacity 0.25s cubic-bezier(0.25, 0.1, 0.1, 0.25);
    background-color: var(--general-main-2);
    box-shadow: 0 4px 6px 0 var(--shadow-menu);
}

.dc-modal__container--is-vertical-centered {
    transform: translateY(-50%) !important;
}

.dc-modal__container--is-vertical-centered {
    position: absolute;
    top: 50vh;
}

.dc-modal__container--is-vertical-centered .dc-modal__container {
    min-width: 0;
    min-width: initial;
    top: 2rem;
}

@media (min-width: 320px) and (max-width: 767px) {
    .dc-modal__container--is-vertical-centered {
        width: calc(100vw - 4.8rem) !important;
    }

    [dir='ltr'] .dc-modal__container--is-vertical-centered {
        left: 2.4rem;
    }

    [dir='rtl'] .dc-modal__container--is-vertical-centered {
        right: 2.4rem;
    }
}

.dc-modal__container--is-vertical-top {
    top: 48px;
    position: absolute;
}

@media (max-width: 600px) {
    .dc-modal__container--is-vertical-top {
        width: calc(100vw - 3.2rem) !important;
    }
    .dc-modal__container--is-vertical-top {
        top: 40px;
    }

    [dir='ltr'] .dc-modal__container--is-vertical-top {
        left: 1.6rem;
    }

    [dir='rtl'] .dc-modal__container--is-vertical-top {
        right: 1.6rem;
    }
}

.dc-modal__container--is-vertical-bottom {
    bottom: 36px;
    position: absolute;
}

@media (max-width: 600px) {
    .dc-modal__container--is-vertical-bottom {
        width: calc(100vw - 3.2rem) !important;
    }

    [dir='ltr'] .dc-modal__container--is-vertical-bottom {
        left: 1.6rem;
    }

    [dir='rtl'] .dc-modal__container--is-vertical-bottom {
        right: 1.6rem;
    }
}

.dc-modal__container--hide {
    display: none;
}

.dc-modal__container--enter,
.dc-modal__container--exit {
    transform: translateY(50px);
    opacity: 0;
    pointer-events: none;
}

.dc-modal__container--enter-done {
    transform: translateY(0);
    opacity: 1;
    pointer-events: auto;
}

.dc-modal__container--small {
    max-width: 440px;
}

.dc-modal__container--small .dc-modal-header {
    border-bottom: none;
}

.dc-modal__container--is-confirmation-modal .dc-modal-header {
    border-bottom: none;
}

.dc-modal__container--is-confirmation-modal .dc-modal-header__title {
    padding: 2.4rem;
}

.dc-modal__container--is-confirmation-modal .dc-modal-body {
    padding: 0 2.4rem;
}

.dc-modal__container--is-confirmation-modal .dc-modal-footer {
    padding: 2.4rem;
}

@media (min-width: 601px) {
    .dc-modal__container {
        min-width: 440px !important;
        max-height: calc(100vh - 48px - 36px) !important;
    }
}

@media (max-width: 600px) {
    .dc-modal__container {
        max-width: calc(100vw - 3.2rem) !important;
    }
}

@media (max-width: 1279px) {
    .dc-modal__container_sent-email__modal {
        height: 42rem !important;
        overflow-y: scroll !important;
    }
}

.dc-modal-header {
    display: flex;
    justify-content: space-between;
    width: 100%;
    line-height: 24px;
    align-items: center;
}

.dc-modal-header__border-bottom {
    border-bottom: 2px solid var(--general-section-5) !important;
}

[dir='ltr'] .dc-modal-header__icon {
    margin-right: 1rem;
}

[dir='rtl'] .dc-modal-header__icon {
    margin-left: 1rem;
}

.dc-modal-header__icon:hover {
    cursor: pointer;
}

.dc-modal-header__title {
    padding: 1.6rem 2.4rem;
    display: flex;
    align-items: center;
    height: 100%;
}

.dc-modal-header__title:empty {
    padding: 0;
    border: none;
}

@media (min-width: 320px) and (max-width: 767px) {
    .dc-modal-header__title {
        font-size: 1.4rem;
        padding: 1.6rem;
        line-height: 1.2;
    }
}

.dc-modal-header__section {
    flex-grow: 1;
    padding: 1.6rem;
    line-height: 24px;
    display: flex;
    align-items: center;
}

.dc-modal-header__close {
    display: block;
    cursor: pointer;
    padding: 0.6rem 0.8rem;
    height: 30px;
    width: 32px;
}

[dir='ltr'] .dc-modal-header__close {
    margin: 1.2rem 1.6rem 1.2rem auto;
}

[dir='rtl'] .dc-modal-header__close {
    margin: 1.2rem auto 1.2rem 1.6rem;
}

@media (min-width: 320px) and (max-width: 767px) {
    .dc-modal-header__close {
        margin: 0.8rem;
    }
}

.dc-modal-header--is-title-centered {
    justify-content: flex-end;
    position: relative;
}

.dc-modal-header--is-title-centered .dc-modal-header__title {
    justify-content: center;
    width: 100%;
}

@media (min-width: 320px) and (max-width: 767px) {
    .dc-modal-header--is-title-centered .dc-modal-header__title {
        position: absolute;
    }
}

.dc-modal-header--is-title-centered .dc-modal-header__close {
    z-index: 1;
}

@media not all and (-webkit-min-device-pixel-ratio: 0), not all and (min-resolution: 0.001dpcm) {
    @supports (-webkit-appearance: none) {
        .dc-modal-header {
            /* postcss-bem-linter: ignore */
            min-height: 4.8rem;
        }
    }
}

.dc-modal-body {
    padding: 2.4rem;
    font-size: 1.4rem;
    line-height: 1.43;
    color: var(--text-prominent);
}

.dc-modal-body:first-child {
    padding-top: 2.4rem;
}

.dc-modal-body__expiration {
    min-height: 12rem;
    padding: 1.6rem;
}

@media (min-width: 320px) and (max-width: 767px) {
    .dc-modal-body {
        font-size: 1.2rem;
        padding: 0.8rem 2.4rem;
    }
}

.dc-modal-footer {
    display: flex;
    justify-content: flex-end;
    padding: 1.6rem;
    margin-top: auto;
}

.dc-modal-footer .dc-btn {
    margin: 0 0.8rem;
}

.dc-modal-footer .dc-btn:last-child {
    margin: 0;
}

.dc-modal-footer--separator {
    border-top: 2px solid var(--general-section-1);
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.error-modal {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
}

.error-modal .dc-btn {
    margin-top: 2.4rem;
}

@media (min-width: 320px) and (max-width: 767px) {
    .error-modal {
        height: calc(100vh - 80px);
    }

    .error-modal .dc-btn {
        width: 100%;
        margin-top: 1.6rem;
    }
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-file-dropzone {
    width: 100%;
    height: 100%;
    border: 1px dashed var(--border-normal);
    border-radius: 4px;
    color: var(--text-prominent);
    text-align: center;
    font-size: 20px;
    font-weight: bold;
    padding: 2rem;
    cursor: pointer;
    position: relative;
}

.dc-file-dropzone__content {
    position: absolute;
    height: 100%;
    width: 100%;
    top: 0;
    display: flex;
    align-items: center;
    justify-content: center;
}

[dir='ltr'] .dc-file-dropzone__content {
    left: 0;
}

[dir='rtl'] .dc-file-dropzone__content {
    right: 0;
}

.dc-file-dropzone__message {
    position: absolute;
    display: block;
    opacity: 1;
    max-width: 168px;
    transform: translate3d(0, 0, 0);
    transition:
        transform 0.25s ease,
        opacity 0.15s linear;
    pointer-events: none;
}

.dc-file-dropzone__message--enter-done {
    opacity: 1;
    transform: translate3d(0, 0, 0);
}

.dc-file-dropzone__message--enter {
    opacity: 0;
    transform: translate3d(0, -16px, 0);
}

.dc-file-dropzone__message--enter-active {
    opacity: 1;
    transform: translate3d(0, 0, 0);
}

.dc-file-dropzone__message--exit {
    opacity: 1;
    transform: translate3d(0, 0, 0);
}

.dc-file-dropzone__message--exit-active {
    opacity: 0;
    transform: translate3d(0, -16px, 0);
}

@media (min-width: 320px) and (max-width: 767px) {
    .dc-file-dropzone__message {
        max-width: 26rem;
    }
}

.dc-file-dropzone__filename {
    width: 100%;
}

.dc-file-dropzone--has-file {
    border-style: solid;
    border-color: var(--status-success);
    background-color: var(--general-section-1);
}

.dc-file-dropzone--has-error {
    border-style: solid;
    border-color: var(--status-danger);
}

.dc-file-dropzone--has-error .dc-file-dropzone__filename {
    margin-top: -3em;
}

.dc-file-dropzone--is-noclick {
    cursor: auto;
}

.dc-file-dropzone:hover,
.dc-file-dropzone:focus {
    outline: 0;
}

.dc-file-dropzone:hover {
    background-color: rgba(0, 0, 0, 0.025);
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-form-progress {
    width: 100%;
    position: relative;
}

.dc-form-progress__header {
    align-items: center;
    display: flex;
    flex-direction: column;
    justify-content: center;
    margin-bottom: 3.2rem;
}

.dc-form-progress__header > h2 {
    text-transform: none;
    margin: 2rem 0 0;
}

.dc-form-progress__step {
    align-items: center;
    display: flex;
    flex-direction: column;
    height: 6rem;
    width: 134px;
    z-index: 2;
    gap: 1rem;
}

.dc-form-progress__step .identifier {
    border-radius: 50%;
    display: block;
    width: 24px;
    background-color: var(--text-less-prominent);
    border: 1px solid var(--text-less-prominent);
    margin-top: 4px;
}

.dc-form-progress__step .identifier--active {
    background-color: var(--brand-red-coral) !important;
    border: 1px solid var(--brand-red-coral) !important;
}

.dc-form-progress__steps {
    align-items: center;
    display: flex;
    justify-content: center;
    margin-top: 20px;
    position: relative;
}

.dc-form-progress__steps--before {
    bottom: 0;
    content: '';
    left: 0;
    margin: 0 auto; /* this centers the line to the full width specified */
    position: absolute; /* positioning must be absolute here, and relative positioning must be applied to the parent */
    right: 0;
    top: 1.7rem;
    border-top: 2px solid var(--text-less-prominent);
}

.dc-form-progress__steps--after {
    border-top: 2px solid var(--brand-red-coral);
    transition: width 0.3s ease;
}

@media (min-width: 1280px) {
    .dc-form-progress__steps--after {
        bottom: 0;
        content: '';
        margin: 0 auto; /* this centers the line to the full width specified */
        position: absolute; /* positioning must be absolute here, and relative positioning must be applied to the parent */
        top: 1.7rem;
    }

    [dir='ltr'] .dc-form-progress__steps--after {
        left: 0;
    }

    [dir='rtl'] .dc-form-progress__steps--after {
        right: 0;
    }
}

@media (max-width: 1279px) {
    .dc-form-progress__steps--after {
        position: absolute;
        top: 0;
    }
}

.dc-form-progress--initial {
    border-top: 2px solid var(--checkbox-disabled-grey);
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-form-submit-button {
    display: flex;
    align-items: center;
    justify-content: flex-end;
    align-self: flex-end;
    background-color: transparent;
}

.dc-form-submit-button:only-child {
    width: 100%;
}

.dc-form-submit-button .dc-btn {
    margin: 0 0.8rem;
}

[dir='ltr'] .dc-form-submit-button .dc-btn:first-child {
    margin-left: 0;
}

[dir='rtl'] .dc-form-submit-button .dc-btn:first-child {
    margin-right: 0;
}

.dc-form-submit-button .dc-btn:last-child {
    margin: 0;
}

.dc-form-submit-button--absolute {
    position: absolute;
    bottom: 0;
    padding: 1.6rem;
    width: 100%;
    background-color: var(--general-main-1);
    border-top: 1px solid var(--general-section-1);
}

[dir='ltr'] .dc-form-submit-button--absolute {
    right: 0;
}

[dir='rtl'] .dc-form-submit-button--absolute {
    left: 0;
}

.dc-form-submit-button--center {
    justify-content: center;
    width: 100%;
    height: 100%;
}

.dc-form-submit-button--center .btn {
    min-width: 9rem;
}

.dc-form-submit-button--error {
    text-transform: none;
}

@media (max-width: 1279px) {
    .dc-form-submit-button--absolute {
        top: auto;
        top: initial;
        bottom: 0;
        position: fixed;
        padding: 1.6rem;
        border-top: 2px solid var(--general-disabled);
        max-height: 70px;
        width: 100%;
        justify-content: center;
    }

    [dir='ltr'] .dc-form-submit-button--absolute {
        left: 0;
    }

    [dir='rtl'] .dc-form-submit-button--absolute {
        right: 0;
    }

    .dc-form-submit-button--absolute .dc-btn {
        height: 40px;
        width: 100%;
        max-width: 30rem;
    }
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
/** @define dc-form-submit-error-message; weak */
.dc-form-submit-error-message {
    display: flex;
    align-items: center;
    flex: 1;
}

[dir='ltr'] .dc-form-submit-error-message {
    margin-right: auto;
}

[dir='rtl'] .dc-form-submit-error-message {
    margin-left: auto;
}

[dir='ltr'] .dc-form-submit-error-message p {
    padding-left: 0.8rem;
}

[dir='rtl'] .dc-form-submit-error-message p {
    padding-right: 0.8rem;
}

@media (max-width: 1279px) {
    .dc-form-submit-error-message p {
        line-height: 20px;
    }
}

@media (max-width: 1279px) {
    .dc-form-submit-error-message {
        padding: 0 1.6rem 1rem;
        position: absolute;
        bottom: 7rem;
    }
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-form-cancel-button {
    display: flex;
    align-items: center;
    justify-content: flex-start;
    align-self: flex-start;
}

.dc-form-cancel-button:only-child {
    width: 100%;
}

.dc-form-cancel-button .dc-btn {
    margin: 0 0.8rem;
}

[dir='ltr'] .dc-form-cancel-button .dc-btn:first-child {
    margin-left: 0;
}

[dir='rtl'] .dc-form-cancel-button .dc-btn:first-child {
    margin-right: 0;
}

.dc-form-cancel-button .dc-btn:last-child {
    margin: 0;
}

.dc-form-cancel-button--absolute {
    bottom: 0;
    position: absolute;
    padding: 1.6rem;
}

[dir='ltr'] .dc-form-cancel-button--absolute {
    left: 0;
}

[dir='rtl'] .dc-form-cancel-button--absolute {
    right: 0;
}

.dc-form-cancel-button--center {
    justify-content: center;
    width: 100%;
    height: 100%;
}

.dc-form-cancel-button--center .btn {
    min-width: 9rem;
}

@media (min-width: 320px) and (max-width: 767px) {
    .dc-form-cancel-button--absolute {
        background-color: var(--general-section-2);
        top: auto;
        top: initial;
        bottom: 0;
        position: absolute;
        padding: 1.6rem;
        border-top: 2px solid var(--general-disabled);
        max-height: 70px;
        width: 100%;
    }

    [dir='ltr'] .dc-form-cancel-button--absolute {
        left: 0;
    }

    [dir='rtl'] .dc-form-cancel-button--absolute {
        right: 0;
    }

    .dc-form-cancel-button--absolute .dc-btn {
        height: 40px;
        width: 100%;
    }
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.gradient-background {
    position: relative;
    width: 100%;
    overflow: hidden;
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100%;
}

.gradient-background__container {
    position: relative;
    width: 100%;
    max-width: 128rem;
    display: flex;
    align-items: center;
}

.gradient-background__primary {
    position: absolute;
    aspect-ratio: 1;
    width: 45.8%;
    opacity: 1;
    filter: blur(400px);
}

[dir='ltr'] .gradient-background__primary {
    right: -1.9%;
}

[dir='rtl'] .gradient-background__primary {
    left: -1.9%;
}

@media (min-width: 320px) and (max-width: 767px) {
    .gradient-background__primary {
        width: 111%;
        top: 30%;
        opacity: 0.8;
        filter: blur(200px);
    }

    [dir='ltr'] .gradient-background__primary {
        right: -30%;
    }

    [dir='rtl'] .gradient-background__primary {
        left: -30%;
    }
}

.gradient-background__secondary {
    position: absolute;
    aspect-ratio: 1;
    transform: translateY(-48%);
    width: 23%;
    top: 0;
    opacity: 1;
    filter: blur(140px);
}

[dir='ltr'] .gradient-background__secondary {
    right: -11%;
}

[dir='rtl'] .gradient-background__secondary {
    left: -11%;
}

@media (min-width: 320px) and (max-width: 767px) {
    .gradient-background__secondary {
        width: 62%;
        top: -10%;
        opacity: 0.8;
        filter: blur(100px);
    }

    [dir='ltr'] .gradient-background__secondary {
        right: -33%;
    }

    [dir='rtl'] .gradient-background__secondary {
        left: -33%;
    }
}

.gradient-background__tertiary {
    position: absolute;
    transform: translateY(-54%);
    aspect-ratio: 1;
    width: 28%;
    top: 0;
    opacity: 1;
    filter: blur(240px);
}

[dir='ltr'] .gradient-background__tertiary {
    left: -15%;
}

[dir='rtl'] .gradient-background__tertiary {
    right: -15%;
}

@media (min-width: 320px) and (max-width: 767px) {
    .gradient-background__tertiary {
        width: 71%;
        top: 10%;
        opacity: 0.8;
        filter: blur(200px);
    }

    [dir='ltr'] .gradient-background__tertiary {
        left: -35%;
    }

    [dir='rtl'] .gradient-background__tertiary {
        right: -35%;
    }
}

.gradient-background__children {
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    display: flex;
    justify-content: center;
    align-items: center;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.gradient-background-two-point {
    width: 100%;
    height: 100%;
    position: relative;
    display: flex;
    flex-direction: row;
    align-items: center;
    justify-content: center;
    gap: 50%;
    overflow: hidden;
}

.gradient-background-two-point__primary {
    height: 100%;
    aspect-ratio: 1;
}

.gradient-background-two-point__secondary {
    height: 120%;
    aspect-ratio: 1;
}

.gradient-background-two-point__children {
    position: absolute;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-hint-box {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    font-size: var(--text-size-xxxs);
    line-height: 1.4rem;
    padding: 8px;
    border-radius: 4px;
}

.dc-hint-box--inline {
    margin-top: 0.8rem;
    display: flex;
    align-items: flex-start;
    gap: 0.8rem;
}

.dc-hint-box--inline-message > p {
    padding-bottom: 0 !important;
}

[dir='ltr'] .dc-hint-box--inline-icon {
    margin-right: 0;
}

[dir='rtl'] .dc-hint-box--inline-icon {
    margin-left: 0;
}

.dc-hint-box--info {
    background-color: var(--transparent-info);
}

.dc-hint-box--warn {
    background-color: var(--status-warning-transparent);
}

.dc-hint-box--danger {
    background-color: var(--transparent-danger);
}

[dir='ltr'] .dc-hint-box__icon {
    margin-right: 8px;
}

[dir='rtl'] .dc-hint-box__icon {
    margin-left: 8px;
}

.dc-hint-box__message {
    color: var(--text-prominent);
}

.hint-box-layout {
    display: grid;
    grid-template-columns: auto 1fr;
    align-items: flex-start;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-horizontal-swipe {
    display: flex;
}

.dc-horizontal-swipe--left {
    display: flex;
    position: absolute;
}

[dir='ltr'] .dc-horizontal-swipe--left {
    left: 0;
}

[dir='rtl'] .dc-horizontal-swipe--left {
    right: 0;
}

.dc-horizontal-swipe--main {
    background: var(--general-main-1);
    transition: 0.5s ease-in-out;
    width: 100vw;
    z-index: 1000;
}

.dc-horizontal-swipe--right {
    display: flex;
    position: absolute;
}

[dir='ltr'] .dc-horizontal-swipe--right {
    right: 0;
}

[dir='rtl'] .dc-horizontal-swipe--right {
    left: 0;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.inline-message {
    display: flex;
    flex-direction: row;
    align-items: flex-start;
    padding: 0.8rem;
    gap: 0.8rem;
    border-radius: 4px;
    height: -moz-min-content;
    height: min-content;
}

@media (min-width: 768px) {
    .inline-message__lg {
        padding: 1.6rem;
        gap: 1.6rem;
        border-radius: 8px;
    }
}

.inline-message__warning {
    background: rgba(255, 173, 58, 0.16);
}

.inline-message__information {
    background: rgba(55, 124, 252, 0.16);
}

.inline-message__announcement {
    background: rgba(75, 180, 179, 0.16);
}

.inline-message__error {
    background: rgba(236, 63, 63, 0.16);
}

.inline-message__icon__sm {
    margin-top: 0.1rem;
}

@media (min-width: 320px) and (max-width: 767px) {
    .inline-message__icon__sm {
        margin-top: 0;
    }
}

.inline-message__icon__md {
    margin-top: 0.2rem;
}

@media (min-width: 320px) and (max-width: 767px) {
    .inline-message__icon__md {
        margin-top: 0.1rem;
    }
}

@media (min-width: 320px) and (max-width: 767px) {
    .inline-message__icon__lg {
        margin-top: 0.2rem;
    }
}

.inline-message__messages {
    display: flex;
    flex-direction: column;
    flex: 1;
    align-self: stretch;
}

.inline-message__messages__xs {
    margin-top: 0.1rem;
}

@media (min-width: 320px) and (max-width: 767px) {
    .inline-message__messages__xs {
        margin-top: 0.2rem;
    }
}

@media (min-width: 320px) and (max-width: 767px) {
    .inline-message__messages__sm {
        margin-top: 0.1rem;
    }
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-label {
    font-size: 14px;
    font-weight: bold;
    height: 24px;
    line-height: 20px;
    border-radius: 12px;
    padding: 2px 8px;
    margin: 0 2px;
    position: relative;
    /* TODO: change all :after to normal background color once styleguide ready */
}

.dc-label:after {
    opacity: 0.16;
    content: '';
    width: 100%;
    height: 100%;
    top: 0;
    position: absolute;
    border-radius: 12px;
}

[dir='ltr'] .dc-label:after {
    left: 0;
}

[dir='rtl'] .dc-label:after {
    right: 0;
}

.dc-label--general--default {
    color: var(--status-default);
}

.dc-label--general--default:after {
    background-color: var(--status-default);
}

.dc-label--general--adjustment {
    color: var(--status-adjustment);
}

.dc-label--general--adjustment:after {
    background-color: var(--status-adjustment);
}

.dc-label--general--danger {
    color: var(--status-danger);
}

.dc-label--general--danger:after {
    background-color: var(--status-danger);
}

.dc-label--general--warn {
    color: var(--status-warning);
}

.dc-label--general--warn:after {
    background-color: var(--status-warning);
}

.dc-label--general--success {
    color: var(--status-success);
}

.dc-label--general--success:after {
    background-color: var(--status-success);
}

.dc-label--general--transfer {
    color: var(--status-transfer);
}

.dc-label--general--transfer:after {
    background-color: var(--status-transfer);
}

.dc-label--general--default-invert {
    color: var(--status-less-prominent);
}

.dc-label--general--default-invert:after {
    background-color: var(--status-less-prominent);
}

.dc-label--general--success-invert {
    color: var(--text-colored-background);
    background-color: var(--status-success);
}

.dc-label--general--warn-invert {
    color: var(--text-colored-background);
    background-color: var(--status-warning);
}

.dc-label--general--info {
    color: var(--status-info);
}

.dc-label--general--info:after {
    background-color: var(--status-info);
}

.dc-label--large {
    height: 28px;
    border-radius: 20px;
    margin: 0 2px;
    font-size: 16px;
}

[dir='ltr'] .dc-label--large {
    padding: 4px 8px 4px 4px;
}

[dir='rtl'] .dc-label--large {
    padding: 4px 4px 4px 8px;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
/** @define dc-linear-progress; weak */
.dc-linear-progress {
    display: flex;
    height: 4px;
    justify-content: flex-start;
    align-items: flex-start;
    flex-direction: column;
    position: absolute;
    bottom: 0;
    width: 100%;
}

[dir='ltr'] .dc-linear-progress {
    left: 0;
}

[dir='rtl'] .dc-linear-progress {
    right: 0;
}

.dc-linear-progress__bar {
    height: 100%;
    transition: width 0.5s cubic-bezier(0.62, 0.01, 0.51, 0.95);
    background-color: var(--brand-red-coral);
}

.dc-linear-progress__countdown {
    position: absolute;
    bottom: 1rem;
    font-size: 12px;
    color: var(--brand-red-coral);
    font-weight: bold;
}

[dir='ltr'] .dc-linear-progress__countdown {
    left: 1rem;
}

[dir='rtl'] .dc-linear-progress__countdown {
    right: 1rem;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
.dc-mobile-drawer__header-close {
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */
}

.dc-mobile-drawer__header-close .color1-fill {
    fill: var(--text-prominent);
}

.dc-mobile-drawer__header-close .color1-stroke {
    stroke: var(--text-prominent);
}
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
/* @define dc-mobile-drawer; weak */
@keyframes openDrawer {
    0% {
        transform: translateX(-100%);
    }

    60%,
    100% {
        transform: translateX(0);
    }

    80% {
        transform: translateX(-5%);
    }
}

@keyframes openRtlDrawer {
    0% {
        transform: translateX(100%);
    }

    60%,
    100% {
        transform: translateX(0);
    }

    80% {
        transform: translateX(5%);
    }
}

@keyframes closeDrawer {
    0% {
        transform: translateX(0);
    }

    100% {
        transform: translateX(-100%);
    }
}

@keyframes closeRtlDrawer {
    0% {
        transform: translateX(0);
    }

    100% {
        transform: translateX(100%);
    }
}

.dc-mobile-drawer {
    position: absolute;
    top: 0;
    will-change: transform;
    animation-name: openDrawer;
    animation-duration: 0.4s;
    animation-fill-mode: forwards;
    z-index: 10000;
}

[dir='ltr'] .dc-mobile-drawer {
    left: 0;
    transform: translateX(-100%);
}

[dir='rtl'] .dc-mobile-drawer {
    right: 0;
    transform: translateX(100%);
}

[dir='rtl'] .dc-mobile-drawer {
    animation-name: openRtlDrawer;
}

.dc-mobile-drawer__container {
    display: flex;
    flex-direction: column;
    position: relative;
    overflow: hidden;
    background-color: var(--general-main-2);
    box-shadow:
        0 16px 16px 0 var(--shadow-menu),
        0 0 16px 0 var(--shadow-menu);
}

.dc-mobile-drawer-header__title--pre-appstore {
    display: flex;
    justify-content: space-between;
}

.dc-mobile-drawer__header {
    display: flex;
    width: 100%;
    height: 50px;
    z-index: 4;
    line-height: 24px;
    align-items: center;
    border-bottom: 1px solid var(--general-section-2);
}

.dc-mobile-drawer__header--right {
    flex-direction: row-reverse;
}

.dc-mobile-drawer__header-title {
    padding: 1.2rem 1.6rem;
    height: 40px;
    width: 100%;
    display: flex;
    align-items: center;
}

[dir='ltr'] .dc-mobile-drawer__header-title {
    border-left: 1px solid var(--general-section-2);
}

[dir='rtl'] .dc-mobile-drawer__header-title {
    border-right: 1px solid var(--general-section-2);
}

.dc-mobile-drawer__header-section {
    flex-grow: 1;
    padding: 1.6rem;
    line-height: 24px;
    display: flex;
    align-items: center;
}

.dc-mobile-drawer__header-close {
    display: flex;
    align-items: center;
    cursor: pointer;
    padding: 0.6rem 1.2rem;
    height: inherit;
    width: 40px;
}

.dc-mobile-drawer__header-wrapper {
    display: flex;
    width: 100%;
    justify-content: space-between;
    transition: all 0.2s;
}

.dc-mobile-drawer__subheader {
    display: flex;
    height: 72px;
    min-height: 72px;
    border-bottom: 1px solid var(--general-section-2);
    justify-content: center;
    align-items: center;
    margin-bottom: 1.8rem;
    position: absolute;
    width: 100%;
    background: var(--general-main-2);
    z-index: 1;
}

.dc-mobile-drawer__subheader--hidden {
    visibility: hidden;
}

.dc-mobile-drawer__submenu-back {
    width: 16px;
    height: 16px;
}

[dir='ltr'] .dc-mobile-drawer__submenu-back {
    margin-right: 16px;
}

[dir='rtl'] .dc-mobile-drawer__submenu-back {
    margin-left: 16px;
}

[dir='rtl'] .dc-mobile-drawer__submenu-back {
    rotate: 180deg;
}

.dc-mobile-drawer__submenu-toggle {
    display: flex;
    height: 5.6rem;
    align-items: center;
}

[dir='ltr'] .dc-mobile-drawer__submenu-toggle {
    padding: 0 1.6rem 0 4.8rem;
}

[dir='rtl'] .dc-mobile-drawer__submenu-toggle {
    padding: 0 4.8rem 0 1.6rem;
}

.dc-mobile-drawer__submenu-toggle--hidden {
    visibility: hidden;
    height: 0;
    padding: 0;
}

.dc-mobile-drawer__submenu-toggle-icon {
    width: 16px;
    height: 16px;
}

[dir='ltr'] .dc-mobile-drawer__submenu-toggle-icon {
    margin-right: 16px;
}

[dir='rtl'] .dc-mobile-drawer__submenu-toggle-icon {
    margin-left: 16px;
}

.dc-mobile-drawer__submenu-toggle-suffix-icon {
    width: 16px;
    height: 16px;
}

[dir='ltr'] .dc-mobile-drawer__submenu-toggle-suffix-icon {
    margin-left: auto;
}

[dir='rtl'] .dc-mobile-drawer__submenu-toggle-suffix-icon {
    margin-right: auto;
}

[dir='rtl'] .dc-mobile-drawer__submenu-toggle-suffix-icon {
    rotate: 180deg;
}

.dc-mobile-drawer__submenu-list {
    background: var(--general-main-2);
    position: absolute;
    z-index: 2;
    transition: transform 0.25s cubic-bezier(0.25, 0.1, 0.1, 0.25);
    width: 100%;
    height: 100%;
    top: 0;
    overflow: auto;
}

[dir='ltr'] .dc-mobile-drawer__submenu-list {
    left: 0;
}

[dir='rtl'] .dc-mobile-drawer__submenu-list {
    right: 0;
}

.dc-mobile-drawer__submenu-list[\:has\(.settings-language__language-container\)] {
    z-index: 7;
}

.dc-mobile-drawer__submenu-list:has(.settings-language__language-container) {
    z-index: 7;
}

.dc-mobile-drawer__submenu-list--enter,
.dc-mobile-drawer__submenu-list--exit {
    opacity: 0;
    pointer-events: none;
}

[dir='ltr'] .dc-mobile-drawer__submenu-list--enter,
[dir='ltr'] .dc-mobile-drawer__submenu-list--exit {
    transform: translateX(-100%);
}

[dir='rtl'] .dc-mobile-drawer__submenu-list--enter,
[dir='rtl'] .dc-mobile-drawer__submenu-list--exit {
    transform: translateX(100%);
}

.dc-mobile-drawer__submenu-list--enter-done {
    transform: translateX(0);
    opacity: 1;
    pointer-events: auto;
}

.dc-mobile-drawer__submenu-list--has-subheader {
    height: 100%;
}

.dc-mobile-drawer__submenu-list-title {
    display: flex;
    align-items: center;
}

[dir='ltr'] .dc-mobile-drawer__submenu-list-title {
    padding: 2rem 0 3.2rem 3.2rem;
}

[dir='rtl'] .dc-mobile-drawer__submenu-list-title {
    padding: 2rem 3.2rem 3.2rem 0;
}

.dc-mobile-drawer__submenu-section {
    display: flex;
    padding-bottom: 3.2rem;
    flex-direction: column;
}

[dir='ltr'] .dc-mobile-drawer__submenu-section {
    padding-left: 5.6rem;
}

[dir='rtl'] .dc-mobile-drawer__submenu-section {
    padding-right: 5.6rem;
}

.dc-mobile-drawer__submenu-section-title {
    display: flex;
    align-items: center;
}

[dir='ltr'] .dc-mobile-drawer__submenu-section-title-text {
    padding-left: 1.6rem;
}

[dir='rtl'] .dc-mobile-drawer__submenu-section-title-text {
    padding-right: 1.6rem;
}

[dir='ltr'] .dc-mobile-drawer__submenu-section-content {
    padding-left: 4.8rem;
}

[dir='rtl'] .dc-mobile-drawer__submenu-section-content {
    padding-right: 4.8rem;
}

.dc-mobile-drawer__submenu-section-content .header__menu-mobile-link {
    padding-top: 1.6rem;
}

.dc-mobile-drawer__submenu-section-content .header__menu-mobile-link--disabled {
    opacity: 0.32;
    pointer-events: none;
}

.dc-mobile-drawer__body {
    font-size: 1.4rem;
    height: 100%;
    padding-top: 8.8rem;
    line-height: 1.5;
    color: var(--text-prominent);
    overflow-y: auto;
    overflow-x: hidden;
}

.dc-mobile-drawer__body.no-padding {
    padding-top: 0;
}

.dc-mobile-drawer__item {
    font-size: 1.4rem;
    line-height: 1.5;
    height: 5.6rem;
    color: var(--text-prominent);
    display: flex;
    justify-content: flex-start;
    align-items: center;
}

[dir='ltr'] .dc-mobile-drawer__item {
    padding: 0 1.6rem 0 4.8rem;
}

[dir='rtl'] .dc-mobile-drawer__item {
    padding: 0 4.8rem 0 1.6rem;
}

.dc-mobile-drawer__footer {
    display: flex;
    height: 36px;
    z-index: 4;
    border-top: 1px solid var(--general-section-2);
    justify-content: flex-start;
    align-items: center;
    padding: 1.6rem;
}

.dc-mobile-drawer__footer--servertime {
    justify-content: center;
    align-items: center;
    border-top: 1px solid var(--general-section-2);
}

.dc-mobile-drawer__overlay {
    z-index: 9999 !important;
    background-color: var(--overlay-outside-dialog) !important;
}

.dc-mobile-drawer.exit {
    animation: closeDrawer 0.3s;
}

[dir='rtl'] .dc-mobile-drawer.exit {
    animation: closeRtlDrawer 0.3s;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-mobile-full-page-modal {
    height: calc(100% - 40px - 40px);
    position: fixed;
    z-index: 6;
    width: 100%;
    top: calc(40px + 40px);
    background: var(--general-main-1);
    max-height: 100%;
    overflow-y: scroll;
}

[dir='ltr'] .dc-mobile-full-page-modal {
    left: 0px;
}

[dir='rtl'] .dc-mobile-full-page-modal {
    right: 0px;
}

.dc-mobile-full-page-modal--flex {
    display: flex;
    flex-direction: column;
    flex: 1;
}

.dc-mobile-full-page-modal--popup {
    height: calc(100% - 40px - 1px);
    top: calc(40px - 1px);
}

.dc-mobile-full-page-modal__header {
    align-items: center;
    display: flex;
    flex-direction: row;
    padding: 1.6rem;
    flex: 0;
}

.dc-mobile-full-page-modal__header--border-bottom {
    border-bottom: 2px solid var(--general-section-2);
}

.dc-mobile-full-page-modal__header-return {
    display: flex;
    align-items: center;
}

[dir='ltr'] .dc-mobile-full-page-modal__header-return {
    margin-right: 1.6rem;
}

[dir='rtl'] .dc-mobile-full-page-modal__header-return {
    margin-left: 1.6rem;
}

.dc-mobile-full-page-modal__header-text {
    display: flex;
    flex-direction: row;
}

.dc-mobile-full-page-modal__header-trailing-icon {
    align-items: center;
    display: flex;
}

[dir='ltr'] .dc-mobile-full-page-modal__header-trailing-icon {
    margin-left: auto;
}

[dir='rtl'] .dc-mobile-full-page-modal__header-trailing-icon {
    margin-right: auto;
}

.dc-mobile-full-page-modal__body {
    display: flex;
    flex: 1;
    min-height: 0;
    overflow-y: auto;
}

.dc-mobile-full-page-modal__footer {
    border-top: 2px solid var(--general-section-1);
    display: flex;
    flex-direction: row;
    justify-content: flex-end;
    margin-top: auto;
    padding: 1.6rem;
}

.dc-mobile-full-page-modal__footer-parent {
    border-top: 1px solid var(--general-section-2);
    padding: 0.8rem 1.6rem;
    background-color: var(--general-main-1);
}

.dc-mobile-full-page-modal form {
    height: 100%;
}

.dc-mobile-full-page-modal .dc-page-overlay__content {
    position: fixed;
    top: calc(40px + 40px);
    width: 100%;
    height: 100%;
}

.dc-mobile-full-page-modal .dc-page-overlay__header {
    position: fixed;
    top: 40px;
    width: 100%;
    height: 40px;
}

.dc-mobile-full-page-modal .dc-tabs {
    display: flex;
    flex-direction: column;
    height: 100%;
}

.dc-mobile-full-page-modal .dc-tabs__list {
    width: 100%;
    height: 4rem;
}

.dc-mobile-full-page-modal .dc-tabs__item {
    width: 50%;
}

.dc-mobile-full-page-modal .dc-tabs__content {
    height: calc(100% - 40px);
    z-index: 5;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
/** @define multi-step; weak */
.multi-step {
    width: inherit;
    height: inherit;
}

.multi-step__header {
    display: flex;
    align-items: center;
    margin: 2.4rem 1.6rem;
}

.multi-step__btn {
    display: flex;
    font-size: 1.4rem;
    font-weight: bold;
    cursor: pointer;
    color: var(--text-general);
}

[dir='ltr'] .multi-step__btn-icon {
    margin-right: 8px;
}

[dir='rtl'] .multi-step__btn-icon {
    margin-left: 8px;
}

.multi-step__btn-icon .color1-fill {
    fill: var(--text-general);
}

.multi-step__component {
    width: 100%;
    height: 100%;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
@keyframes dc-news-ticker {
    0% {
        transform: translate3d(100%, 0, 0);
    }

    100% {
        transform: translate3d(-100%, 0, 0);
    }
}

@keyframes dc-news-ticker-2 {
    0% {
        transform: translate3d(0, 0, 0);
    }

    100% {
        transform: translate3d(-200%, 0, 0);
    }
}

.dc-news-ticker {
    display: flex;
    white-space: nowrap;
    overflow: hidden;
}

.dc-news-ticker__children {
    animation-iteration-count: infinite;
    animation-name: dc-news-ticker;
    animation-timing-function: linear;
    will-change: transform;
}

.dc-news-ticker__children:nth-child(2) {
    animation-name: dc-news-ticker-2;
}

.dc-news-ticker__item {
    display: inline-block;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
/* S: Steps
   N: Number
   B: Backspace
   O: Ok
   Z: Zero
 */
.dc-numpad {
    box-sizing: border-box;
    display: grid;
    grid-gap: 0.3rem;
    grid-template-columns: repeat(4, 1fr);
}

.dc-numpad--is-regular {
    grid-template-areas: 'np np np np' 'r3 r3 r3 b' 'r2 r2 r2 b' 'r1 r1 r1 o' 'z z z o';
    grid-template-columns: min-content min-content min-content minmax(48px, 1fr);
    max-width: -moz-min-content;
    max-width: min-content;
}

.dc-numpad--is-currency {
    grid-template-areas: 'np np np np' 'r3 r3 r3 b' 'r2 r2 r2 b' 'r1 r1 r1 o' 'z z p o';
    grid-template-columns: min-content min-content min-content minmax(48px, 1fr);
    max-width: -moz-min-content;
    max-width: min-content;
}

.dc-numpad__input-area {
    display: grid;
    grid-area: np;
    grid-template-areas: 'dc inp inp nc';
    grid-template-columns: min-content 1fr 1fr min-content;
}

.dc-numpad__decrement {
    grid-area: dc;
}

[dir='ltr'] .dc-numpad__decrement {
    border-top-right-radius: 0;
    border-bottom-right-radius: 0;
}

[dir='rtl'] .dc-numpad__decrement {
    border-top-left-radius: 0;
    border-bottom-left-radius: 0;
}

.dc-numpad__increment {
    grid-area: nc;
}

[dir='ltr'] .dc-numpad__increment {
    border-top-left-radius: 0;
    border-bottom-left-radius: 0;
}

[dir='rtl'] .dc-numpad__increment {
    border-top-right-radius: 0;
    border-bottom-right-radius: 0;
}

.dc-numpad__increment,
.dc-numpad__decrement {
    width: 48px;
    height: 48px;
}

.dc-numpad__input-field,
.dc-numpad__increment,
.dc-numpad__decrement {
    background-color: var(--general-section-2);
    color: var(--text-prominent);
}

.dc-numpad__input-field {
    margin: 0 !important;
}

.dc-numpad__input-field {
    grid-area: inp;
    padding: 0;
    border: none;
    border-radius: 0;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 1.6rem;
    color: var(--text-general);
    font-weight: 700;
    text-transform: none;
    text-align: center;
    line-height: 1.75;
    color: var(--text-prominent);
}

.dc-numpad__input-field input {
    padding: 0;
    max-height: 48px;
}

.dc-numpad__input-field--has-error {
    color: var(--status-danger);
    font-weight: bold;
}

[dir='ltr'] .dc-numpad__number {
    text-align: left;
}

[dir='rtl'] .dc-numpad__number {
    text-align: right;
}

.dc-numpad__number {
    border-radius: 2.4rem;
    background-color: var(--general-section-2);
    width: 48px;
    height: 48px;
    font-size: 1.6rem;
    color: var(--text-general);
    font-weight: 700;
    text-transform: none;
    line-height: 1.75;
    color: var(--text-prominent);
}

[dir='ltr'] .dc-numpad__number {
    text-align: left !important;
}

[dir='rtl'] .dc-numpad__number {
    text-align: right !important;
}

.dc-numpad__number--is-disabled,
.dc-numpad__number[disabled] {
    background-color: var(--general-disabled) !important;
}

.dc-numpad__number--is-disabled,
.dc-numpad__number[disabled] {
    pointer-events: none;
    touch-action: none;
}

.dc-numpad__number--r3 {
    grid-row: 2/2;
}

.dc-numpad__number--r2 {
    grid-row: 3/3;
}

.dc-numpad__number--r1 {
    grid-row: 4/4;
}

.dc-numpad__number--zero {
    width: 100% !important;
}

.dc-numpad__number--zero {
    grid-area: z;
}

.dc-numpad__number--is-left-aligned {
    width: 100%;
}

[dir='ltr'] .dc-numpad__number--is-left-aligned {
    text-align: left;
    padding: 0 0 0 4px;
}

[dir='rtl'] .dc-numpad__number--is-left-aligned {
    text-align: right;
    padding: 0 4px 0 0;
}

.dc-numpad__dot {
    grid-area: p;
}

.dc-numpad__bkspace {
    grid-area: b;
}

.dc-numpad__bkspace button {
    height: 100%;
}

.dc-numpad__ok {
    grid-area: o;
}

.dc-numpad__ok button {
    height: 100%;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.open-livechat__link {
    background: transparent;
    border: none;
    margin: 0;
    padding: 0;
    color: var(--brand-red-coral);
}

.open-livechat__link:hover {
    text-decoration: underline;
    cursor: pointer;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
/** @define dc-page-error */
.dc-page-error__container {
    display: flex;
    justify-content: center;
    align-items: center;
    height: calc(100vh - 84px);
}

@media (min-width: 1024px) {
    [dir='ltr'] .dc-page-error__container--left {
        justify-content: left;
    }

    [dir='rtl'] .dc-page-error__container--left {
        justify-content: right;
    }
}

@media screen and (max-width: 1024px) {
    .dc-page-error__container {
        flex-wrap: wrap;
    }
}

.dc-page-error__box {
    background: var(--general-main-1);
    border: var(--general-main-1);
    padding: 2rem;
    display: flex;
    flex-flow: column nowrap;
    align-items: center;
    justify-content: center;
    /* postcss-bem-linter: ignore */
}

@media (min-width: 1024px) {
    .dc-page-error__box--left {
        align-items: start;
    }
}

@media screen and (min-width: 1008px) {
    .dc-page-error__box {
        max-width: calc(100vw - 45%);
    }
}

.dc-page-error__box .inline-icon {
    margin: 0 auto;
}

.dc-page-error__message {
    font-size: 1.6rem;
    color: var(--text-general);
    font-weight: 400;
    text-transform: none;
    text-align: center;
    line-height: 1.75;
    max-width: 502px;
    margin: 1.6rem 0 2.4rem;
}

.dc-page-error__message-wrapper {
    display: flex;
    justify-content: center;
}

@media (min-width: 1024px) {
    [dir='ltr'] .dc-page-error__message-wrapper--left {
        justify-content: left;
    }

    [dir='rtl'] .dc-page-error__message-wrapper--left {
        justify-content: right;
    }
}

.dc-page-error__message-wrapper--left .dc-page-error__message-paragraph:not(:last-child) {
    margin-bottom: 1.6rem;
    max-width: 38rem;
}

@media (min-width: 1024px) {
    [dir='ltr'] .dc-page-error__message--left {
        text-align: left;
    }

    [dir='rtl'] .dc-page-error__message--left {
        text-align: right;
    }
}

.dc-page-error__btn {
    min-width: 14rem;
    margin: 1rem;
}

.dc-page-error__btn-wrapper {
    display: flex;
    justify-content: center;
}

@media (min-width: 320px) and (max-width: 767px) {
    .dc-page-error__btn {
        margin: 0 0 1.6rem;
    }

    .dc-page-error__btn-wrapper {
        flex-direction: column;
    }
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.unhandled-error {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
}

.unhandled-error .dc-btn {
    margin-top: 2.4rem;
}

@media (min-width: 320px) and (max-width: 767px) {
    .unhandled-error {
        height: calc(100vh - 80px);
    }

    .unhandled-error .dc-btn {
        width: 100%;
        margin-top: 1.6rem;
    }
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-page-overlay-portal {
    position: absolute;
    height: 100%;
    width: 100%;
    top: 48px;
    transition:
        transform 0.25s cubic-bezier(0.25, 0.1, 0.1, 0.25),
        opacity 0.25s cubic-bezier(0.25, 0.1, 0.1, 0.25);
    background-color: var(--general-main-2);
    opacity: 0;
}

@media (max-width: 1279px) {
    .dc-page-overlay-portal {
        top: 40px;
    }
}

.dc-page-overlay--enter,
.dc-page-overlay--exit {
    transform: translateY(50px);
    opacity: 0;
    pointer-events: none;
}

.dc-page-overlay--enter-done {
    transform: translateY(0);
    opacity: 1;
    pointer-events: auto;
    z-index: 9;
}

.dc-page-overlay__header {
    position: sticky;
    top: 0;
    z-index: 2;
    background-color: var(--general-main-1);
    padding: 0.8rem 2.4rem;
    border-bottom: 1px solid var(--general-section-1);
}

.dc-page-overlay__header-title {
    flex: 1;
    text-align: center;
    font-size: var(--text-size-m);
    color: var(--text-prominent);
    font-weight: bold;
    line-height: 1.5;
}

@media (max-width: 1279px) {
    .dc-page-overlay__header-title {
        font-size: 1.6rem;
    }
}

.dc-page-overlay__header-close {
    cursor: pointer;
    height: 16px;
    position: absolute;
}

[dir='ltr'] .dc-page-overlay__header-close {
    right: 0;
}

[dir='rtl'] .dc-page-overlay__header-close {
    left: 0;
}

.dc-page-overlay__header-close .dc-icon {
    --fill-color1: var(--text-prominent);
}

@media (max-width: 600px) {
    [dir='ltr'] .dc-page-overlay__header-close {
        right: 1.6rem;
    }

    [dir='rtl'] .dc-page-overlay__header-close {
        left: 1.6rem;
    }
}

@media (min-width: 601px) and (max-width: 1279px) {
    [dir='ltr'] .dc-page-overlay__header-close {
        right: 2.4rem;
    }

    [dir='rtl'] .dc-page-overlay__header-close {
        left: 2.4rem;
    }
}

.dc-page-overlay__header-wrapper {
    width: 100%;
    display: flex;
    align-items: center;
}

@media (max-width: 1279px) {
    .dc-page-overlay__header-wrapper {
        height: 100%;
        padding: 0;
    }
}

@media (max-width: 1279px) {
    .dc-page-overlay__header {
        height: 4rem;
        z-index: 3;
        padding: 0;
        margin: 0;
    }
}

.dc-page-overlay__content {
    padding: 2.4rem 0 0;
    display: flex;
    background-color: var(--general-main-1);
}

.dc-page-overlay__content-side-note {
    min-width: 256px;
}

[dir='ltr'] .dc-page-overlay__content-side-note {
    margin-left: 2.4rem;
}

[dir='rtl'] .dc-page-overlay__content-side-note {
    margin-right: 2.4rem;
}

@media (max-width: 1279px) {
    .dc-page-overlay__content {
        flex: 1;
        padding: 0;
    }
}

.dc-page-overlay__header-wrapper,
.dc-page-overlay__content {
    max-width: 1232px;
    margin: auto;
    position: relative;
}

@media (max-width: 1279px) {
    .dc-page-overlay__header-wrapper,
    .dc-page-overlay__content {
        width: 100%;
        display: flex;
        justify-content: center;
    }
}

@media (max-width: 1279px) {
    .dc-page-overlay {
        display: flex;
        flex-direction: column;
        height: 100%;
    }
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-password-input__visibility-icon {
    cursor: pointer;
    width: 3.5rem;
    height: 95%;
    padding: 0 1rem;
    background-color: var(--general-main-1);
}

[dir='ltr'] input[style*='background'] ~ .dc-password-input__visibility-icon {
    right: 2.4rem;
}

[dir='rtl'] input[style*='background'] ~ .dc-password-input__visibility-icon {
    left: 2.4rem;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-password-meter {
    transition: transform 0.25s linear;
    background: var(--status-danger);
    z-index: 2;
}

[dir='ltr'] .dc-password-meter {
    transform-origin: left top;
}

[dir='rtl'] .dc-password-meter {
    transform-origin: right top;
}

.dc-password-meter,
.dc-password-meter__bg {
    position: absolute;
    top: 3.5rem;
    height: 4px;
    border-radius: 0 0 3px 3px;
    width: calc(100% - 2px);
}

[dir='ltr'] .dc-password-meter,
[dir='ltr'] .dc-password-meter__bg {
    left: 1px;
}

[dir='rtl'] .dc-password-meter,
[dir='rtl'] .dc-password-meter__bg {
    right: 1px;
}

.dc-password-meter__bg {
    z-index: 1;
    background: var(--fill-disabled);
}

.dc-password-meter__container {
    position: relative;
}

.dc-password-meter__container .dc-input {
    border-radius: 4px;
}

.dc-password-meter__container .dc-password-meter__warning {
    color: var(--status-warning);
    top: 4.1rem;
}

[dir='ltr'] .dc-password-meter__container .dc-password-meter__warning {
    padding-left: 1.3rem;
}

[dir='rtl'] .dc-password-meter__container .dc-password-meter__warning {
    padding-right: 1.3rem;
}

.dc-password-meter--weak {
    background-color: var(--status-danger);
    z-index: 2;
}

.dc-password-meter--strong {
    background-color: var(--status-success);
    z-index: 2;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-tabs {
    position: relative;
    display: grid;
}

.dc-tabs--top {
    grid-template-rows: auto 1fr;
}

.dc-tabs--100vw {
    width: 100vw;
}

.dc-tabs__list {
    width: 100%;
    line-height: 38px;
    display: flex;
    position: relative;
}

@media (min-width: 320px) and (max-width: 767px) {
    .dc-tabs__list {
        justify-content: center;
    }
}

.dc-tabs__list--overflow-hidden {
    overflow-y: hidden;
    display: block;
}

.dc-tabs__list--border-bottom {
    border-bottom: 2px solid var(--general-section-1);
}

.dc-tabs__list--top {
    order: 0;
}

.dc-tabs__list--bottom {
    order: 1;
    border-top: 2px solid var(--general-section-1);
}

.dc-tabs__list--center {
    justify-content: center;
    width: -moz-fit-content;
    width: fit-content;
    margin: auto;
}

.dc-tabs__list--center .dc-tabs__item {
    padding: 0 2.2rem;
}

@media (min-width: 320px) and (max-width: 767px) {
    .dc-tabs__list--fit-content {
        width: -moz-fit-content;
        width: fit-content;
    }
}

.dc-tabs__list--header-fit-content {
    width: -moz-fit-content;
    width: fit-content;
}

@media (min-width: 320px) and (max-width: 767px) {
    .dc-tabs__list--header-fit-content {
        display: flex;
        justify-content: space-evenly;
    }
}

.dc-tabs__list:not(.dc-tabs__list--header-fit-content) {
    justify-content: center;
}

.dc-tabs__list--full-width {
    width: 100vw;
}

.dc-tabs__item {
    list-style: none;
    font-size: 14px;
    text-align: center;
    white-space: nowrap;
    color: var(--text-general);
    -webkit-touch-callout: none;
    -webkit-tap-highlight-color: transparent;
}

.dc-tabs__item__counter {
    margin-top: -2rem;
    vertical-align: middle;
}

[dir='ltr'] .dc-tabs__item__icon {
    padding-right: 0.7rem;
}

[dir='rtl'] .dc-tabs__item__icon {
    padding-left: 0.7rem;
}

@media (min-width: 320px) and (max-width: 767px) {
    .dc-tabs__item__icon {
        padding-top: 0.5rem;
    }

    [dir='ltr'] .dc-tabs__item__icon {
        padding-right: 0;
    }

    [dir='rtl'] .dc-tabs__item__icon {
        padding-left: 0;
    }
}

.dc-tabs__item--header-fit-content {
    padding: 0px 29px;
}

.dc-tabs__item--is-hidden {
    display: none;
}

.dc-tabs__item--is-scrollable-and-active {
    position: relative;
}

.dc-tabs__item--is-scrollable-and-active:after {
    border-bottom: 2px solid var(--brand-red-coral);
    content: '';
    position: absolute;
    display: block;
    width: 100%;
}

[dir='ltr'] .dc-tabs__item--is-scrollable-and-active:after {
    left: 0;
}

[dir='rtl'] .dc-tabs__item--is-scrollable-and-active:after {
    right: 0;
}

.dc-tabs__item:not(.dc-tabs__active) {
    cursor: pointer;
    color: var(--text-general);
}

.dc-tabs__item:not(.dc-tabs__item--header-fit-content) {
    width: var(--tab-width);
}

.dc-tabs__active {
    font-weight: 700;
    color: var(--text-prominent);
}

.dc-tabs__active-line {
    display: block;
    position: absolute;
    left: 0;
    height: 2px;
    background: var(--brand-red-coral);
    transition: all ease-in-out 0.3s;
}

.dc-tabs__active-line--top {
    bottom: -2px;
}

.dc-tabs__active-line--bottom {
    top: -2px;
}

.dc-tabs__active-line--is-hidden {
    display: none;
}

@media (min-width: 320px) and (max-width: 767px) {
    .dc-tabs__active-line--fit-content {
        width: 120px;
    }
}

.dc-tabs__active-line:not(.dc-tabs__active-line--header-fit-content) {
    width: var(--tab-width);
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-popup {
    position: relative;
    z-index: 9999;
}

.dc-popup__header {
    display: flex;
    width: 100%;
}

.dc-popup__header-content {
    flex: 1;
}

.dc-popup__header-container {
    width: 100%;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.dc-popup__header-close {
    margin-top: -0.3rem;
}

[dir='ltr'] .dc-popup__header-close {
    margin-left: 2.1rem;
    margin-right: -0.3rem;
}

[dir='rtl'] .dc-popup__header-close {
    margin-right: 2.1rem;
    margin-left: -0.3rem;
}

@media (min-width: 320px) and (max-width: 767px) {
    .dc-popup__header-close {
        margin-top: 0.5rem;
    }

    [dir='ltr'] .dc-popup__header-close {
        margin-right: 0.5rem;
    }

    [dir='rtl'] .dc-popup__header-close {
        margin-left: 0.5rem;
    }
}

.dc-popup__header-close-icon {
    cursor: pointer;
}

[dir='ltr'] .dc-popup__header-button {
    margin-left: 1.6rem;
}

[dir='rtl'] .dc-popup__header-button {
    margin-right: 1.6rem;
}

@media (min-width: 320px) and (max-width: 767px) {
    [dir='ltr'] .dc-popup__header-button {
        margin-left: 2.2rem;
    }

    [dir='rtl'] .dc-popup__header-button {
        margin-right: 2.2rem;
    }
}

.dc-popup__header-balance {
    display: flex;
    align-items: center;
}

.dc-popup__header-banner {
    background-color: var(--status-warning);
    border-radius: 10rem;
    padding: 0.4rem 0.8rem;
    display: flex;
    align-items: center;
}

@media (min-width: 1024px) {
    .dc-popup__header-banner {
        margin-top: 0.4rem;
    }
}

@media (min-width: 320px) and (max-width: 767px) {
    .dc-popup__header-banner {
        background-color: var(--general-main-1);
    }

    [dir='ltr'] .dc-popup__header-banner {
        margin-left: 0.8rem;
    }

    [dir='rtl'] .dc-popup__header-banner {
        margin-right: 0.8rem;
    }
}

.dc-popup__header-big-text {
    margin-top: 2rem;
}

.dc-popup__header-title-container {
    display: flex;
    align-items: center;
}

.dc-popup__body {
    padding: 0;
    flex: 1;
    min-height: 0;
}

.dc-popup__body:first-child {
    padding-top: 0 !important;
}

.dc-popup__body .dc-tabs__content--popup {
    background: var(--general-main-1);
}

@media (min-width: 320px) and (max-width: 767px) {
    .dc-popup__body .dc-tabs__list--header--popup {
        overflow-y: hidden;
        -ms-overflow-style: none; /* IE and Edge */
        scrollbar-width: none; /* Firefox */
    }
}

@media (min-width: 320px) and (max-width: 767px) and (min-width: 27.5rem) {
    .dc-popup__body .dc-tabs__list--header--popup {
        overflow-x: hidden;
    }
}

@media (min-width: 320px) and (max-width: 767px) {
    .dc-popup__body .dc-tabs__list--header--popup::-webkit-scrollbar {
        display: none; /* Chrome Safari */
    }
}

@media (min-width: 320px) and (max-width: 767px) {
    .dc-popup__body .dc-tabs__list--popup {
        height: 5.8rem !important;
    }
}

@media (min-width: 320px) and (max-width: 767px) and (max-width: 27.5rem) {
    .dc-popup__body .dc-tabs__list--popup {
        width: 123% !important;
    }

    [dir='ltr'] .dc-popup__body .dc-tabs__list--popup {
        margin-right: 4.2rem;
    }

    [dir='rtl'] .dc-popup__body .dc-tabs__list--popup {
        margin-left: 4.2rem;
    }
}

.dc-popup__body .dc-tabs__item--popup {
    border-radius: 16px 16px 0px 0px;
    display: flex;
    align-items: center;
    justify-content: center;
}

@media (min-width: 320px) and (max-width: 767px) {
    .dc-popup__body .dc-tabs__item--popup {
        width: 8.2rem !important;
    }
    .dc-popup__body .dc-tabs__item--popup {
        height: 5.8rem;
        flex-direction: column;
        font-size: 12px;
        box-sizing: border-box;
    }
}

.dc-popup__body .dc-tabs__active--popup {
    background: var(--general-main-1);
}

.dc-popup__body .dc-tabs--popup {
    height: 100%;
    display: flex;
    flex-direction: column;
}

.dc-popup__footer {
    display: flex;
    justify-content: flex-end;
    padding: 1.6rem;
    position: fixed;
    width: 100%;
    bottom: 0;
}

.dc-popup__footer__separator {
    border-top: 2px solid var(--general-section-1);
}

.dc-popup__overlay {
    transition: opacity 0.1s ease-in-out;
    opacity: 0;
    padding: 3.2rem;
    overflow-y: auto;
    background-color: var(--general-main-1);
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    position: absolute;
    top: 0;
    bottom: 0;
    right: 0;
    left: 0;
}

.dc-popup__overlay:empty {
    display: none;
}

.dc-popup__overlay--enter-done {
    opacity: 0.95;
}

.dc-popup__overlay--exit {
    opacity: 0;
}

.dc-popup__overlay-content {
    max-width: 500px;
}

.dc-popup__overlay-content-header {
    margin-bottom: 0.8rem;
}

.dc-popup__overlay-content-separator {
    height: 1px;
    width: 100%;
    background-color: var(--general-section-1);
}

.dc-popup__overlay-content-list {
    list-style-type: disc;
    margin-top: 2.4rem;
}

[dir='ltr'] .dc-popup__overlay-content-list {
    padding-left: 1.6rem;
}

[dir='rtl'] .dc-popup__overlay-content-list {
    padding-right: 1.6rem;
}

.dc-popup__overlay-content-list li::marker {
    color: var(--text-general);
    font-size: var(--text-size-xs);
}

.dc-popup__overlay-content-list li + li {
    margin-top: 2rem;
}

.dc-popup__overlay-content-button {
    margin-top: 2.4rem;
}

.dc-modal-header--popup {
    height: -moz-fit-content;
    height: fit-content;
    align-items: flex-start;
    flex-grow: 0;
}

.dc-modal-header__title--popup {
    width: 100%;
}

@media (min-width: 320px) and (max-width: 767px) {
    .dc-modal-header__title--popup {
        align-items: flex-start;
    }
}

.dc-modal-header__section--popup {
    padding: 2.4rem;
}

[dir='ltr'] .dc-modal-header__section .dc-modal-header__close {
    margin: 2.1rem 2.1rem 0rem 0rem;
}

[dir='rtl'] .dc-modal-header__section .dc-modal-header__close {
    margin: 2.1rem 0rem 0rem 2.1rem;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
/** @define dc-progress-bar */
.dc-progress-bar__container {
    height: 2.4rem;
    width: 12rem;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 1.2rem;
    position: relative;
    overflow: hidden;
}

.dc-progress-bar--danger {
    background-color: var(--status-danger);
}

.dc-progress-bar--warning {
    background-color: var(--status-warning);
}

.dc-progress-bar--normal {
    background-color: var(--status-success);
}

.dc-progress-bar__bar {
    height: 100%;
    position: absolute;
}

[dir='ltr'] .dc-progress-bar__bar {
    left: 0;
}

[dir='rtl'] .dc-progress-bar__bar {
    right: 0;
}

.dc-progress-bar__empty {
    width: 100%;
    position: absolute;
    opacity: 0.16;
    height: 100%;
}

.dc-progress-bar__label {
    z-index: 2;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-progress-bar-tracker {
    display: flex;
    justify-content: center;
    cursor: pointer;
}

.dc-progress-bar-tracker-rectangle {
    width: 2.5rem;
    height: 0.8rem;
    background-color: #ff444f;
    border-radius: 1rem;
}

.dc-progress-bar-tracker-circle {
    width: 0.8rem;
    height: 0.8rem;
    margin: 0 0.4rem;
    border-radius: 50%;
    background-color: var(--fill-normal-1);
}

.dc-progress-bar-tracker-transition {
    transition: all 0.24s linear;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
/** @define dc-progress-indicator */
.dc-progress-indicator {
    position: relative;
}

.dc-progress-indicator__container {
    height: 0.4rem;
    width: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 4px;
    position: relative;
    overflow: hidden;
}

.dc-progress-indicator__bar {
    z-index: 2;
    background-color: var(--status-success);
    height: 100%;
    position: absolute;
}

[dir='ltr'] .dc-progress-indicator__bar {
    left: 0;
}

[dir='rtl'] .dc-progress-indicator__bar {
    right: 0;
}

.dc-progress-indicator__empty {
    z-index: 1;
    background-color: var(--general-section-1);
    width: 100%;
    height: 100%;
    position: absolute;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-radio-group {
    display: flex;
    margin-top: 16px;
    flex-direction: row;
    align-items: center;
}

.dc-radio-group__input {
    display: none;
}

[dir='ltr'] .dc-radio-group__item {
    text-align: left;
}

[dir='rtl'] .dc-radio-group__item {
    text-align: right;
}

.dc-radio-group__item {
    display: flex;
    font-size: 1.4rem;
    color: var(--text-prominent);
    font-weight: 400;
    text-transform: none;
    line-height: 1.5;
    cursor: pointer;
    color: var(--text-general);
}

[dir='ltr'] .dc-radio-group__item:not(:last-child) {
    margin-right: 16px;
}

[dir='rtl'] .dc-radio-group__item:not(:last-child) {
    margin-left: 16px;
}

.dc-radio-group__circle {
    border: 2px solid var(--text-general);
    border-radius: 50%;
    box-shadow: 0 0 1px 0 var(--shadow-menu);
    min-width: 16px;
    height: 16px;
    transition: all 0.3s ease-in-out;
    align-self: center;
}

[dir='ltr'] .dc-radio-group__circle {
    margin-right: 8px;
}

[dir='rtl'] .dc-radio-group__circle {
    margin-left: 8px;
}

.dc-radio-group__circle--disabled {
    border-color: var(--border-disabled);
}

.dc-radio-group__circle--selected {
    border-width: 4px;
    border-color: var(--brand-red-coral);
}

.dc-radio-group__circle--error {
    border-color: var(--text-less-prominent);
}

.dc-radio-group__label--disabled {
    color: var(--text-disabled);
}

.dc-radio-group__label--error {
    color: var(--text-loss-danger);
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-read-more__toggle {
    color: var(--status-danger);
    font-weight: var(--text-weight-bold);
}

.dc-read-more__dialog {
    text-decoration: underline;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-select-native {
    width: 100%;
    position: relative;
}

.dc-select-native--hide-selected-value {
    width: 40px;
}

[dir='ltr'] .dc-select-native--hide-selected-value {
    margin-left: 10px;
}

[dir='rtl'] .dc-select-native--hide-selected-value {
    margin-right: 10px;
}

.dc-select-native--hide-selected-value .dc-select-native__wrapper {
    width: 40px;
}

.dc-select-native__container {
    border: 1px solid var(--border-normal);
    border-radius: 4px;
    display: flex;
    align-items: center;
}

.dc-select-native__container:hover:not(.dc-input--disabled) {
    border-color: var(--border-hover);
}

.dc-select-native__container[focus-within] {
    border-color: var(--brand-secondary);
}

.dc-select-native__container:focus-within {
    border-color: var(--brand-secondary);
}

.dc-select-native__container[focus-within]:hover {
    border-color: var(--brand-secondary);
}

.dc-select-native__container:focus-within:hover {
    border-color: var(--brand-secondary);
}

.dc-select-native__container--error {
    border-color: var(--brand-red-coral) !important;
}

.dc-select-native__container--disabled {
    border-color: var(--general-disabled);
}

.dc-select-native__wrapper {
    height: 38px;
}

.dc-select-native__wrapper .dc-input {
    margin-bottom: 0px;
}

.dc-select-native__arrow {
    position: absolute;
    top: 1.3rem;
    --fill-color1: var(--text-less-prominent);
}

[dir='ltr'] .dc-select-native__arrow {
    right: 1.3rem;
}

[dir='rtl'] .dc-select-native__arrow {
    left: 1.3rem;
}

.dc-select-native__display {
    height: 38px;
    width: 100%;
    max-width: calc(100vw - 4rem);
    display: flex;
    align-items: center;
    justify-content: flex-start;
}

[dir='ltr'] .dc-select-native__display {
    padding-left: 1.2rem;
}

[dir='rtl'] .dc-select-native__display {
    padding-right: 1.2rem;
}

@media (min-width: 601px) and (max-width: 1279px) {
    .dc-select-native__display {
        max-width: 56.8rem;
    }
}

.dc-select-native__display-text {
    color: var(--text-prominent);
    font-size: 1.4rem;
    white-space: nowrap;
    overflow: hidden;
    max-width: calc(100% - 4rem);
    text-overflow: ellipsis;
    display: block;
    height: 100%;
    line-height: 3.8rem;
}

.dc-select-native__placeholder {
    position: absolute;
    top: 1.1rem;
    pointer-events: none;
    transition: transform 0.25s linear;
    padding: 0 0.4rem;
    font-size: 1.4rem;
    transform: none;
    background-color: var(--fill-normal);
    color: var(--text-less-prominent);
    line-height: 1.43;
    white-space: nowrap;
    max-width: calc(100% - 3.6rem);
    text-overflow: ellipsis;
    overflow: hidden;
}

[dir='ltr'] .dc-select-native__placeholder {
    left: 1.1rem;
    transform-origin: top left;
}

[dir='rtl'] .dc-select-native__placeholder {
    right: 1.1rem;
    transform-origin: top right;
}

.dc-select-native__placeholder--has-value {
    transform: translate(0, -1.8rem) scale(0.75);
    color: var(--text-general);
    max-width: 100%;
}

.dc-select-native__placeholder--hide-top-placeholder {
    transform: translate(0, -1.8rem) scale(0.75);
    color: var(--text-general);
    max-width: 100%;
    display: none;
}

.dc-select-native__picker {
    opacity: 0;
    width: 100%;
    height: 38px;
    top: 0;
    position: absolute;
}

[dir='ltr'] .dc-select-native__picker {
    left: 0;
}

[dir='rtl'] .dc-select-native__picker {
    right: 0;
}

.dc-select-native--disabled .dc-select-native__display-text {
    color: var(--text-less-prominent);
}

.dc-select-native--disabled .dc-select-native__placeholder:not(.dc-select-native__placeholder--has-value) {
    color: var(--text-less-prominent);
}

.dc-select-native--disabled .dc-icon {
    --fill-color1: var(--text-less-prominent);
}

.dc-select-native--error .dc-select-native__placeholder {
    color: var(--brand-red-coral);
}

[dir='ltr'] .dc-select-native__hint {
    margin-left: 1.2rem;
}

[dir='rtl'] .dc-select-native__hint {
    margin-right: 1.2rem;
}

.dc-select-native__suffix-icon {
    position: absolute;
}

[dir='ltr'] .dc-select-native__suffix-icon {
    left: 11px;
}

[dir='rtl'] .dc-select-native__suffix-icon {
    right: 11px;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
/** @define send-email-template */
.send-email-template {
    padding: 0 16px;
}

.send-email-template__title,
.send-email-template__subtitle {
    margin-bottom: 1.6rem;
}

.send-email-template__title-platform,
.send-email-template__subtitle-platform {
    white-space: nowrap;
}

.send-email-template__close {
    display: flex;
    justify-content: flex-end;
    padding-bottom: 1.2rem;
    cursor: pointer;
}

.send-email-template__icon {
    margin-bottom: 2.4rem;
}

@media (min-width: 320px) and (max-width: 767px) {
    .send-email-template__icon {
        margin-top: 3.2rem;
    }
}

.send-email-template__sent,
.send-email-template__cta {
    text-align: center;
}

.send-email-template__cta-btn {
    margin: 3.2rem auto 0;
}

.send-email-template__resend {
    display: grid;
    grid-template-rows: 1fr 1fr 1fr;
    grid-row-gap: 1.6rem;
    max-width: 40rem;
    margin: 2.4rem auto 0;
    color: var(--text-prominent);
    font-size: var(--text-size-xxs);
    line-height: 1.5;
}

.send-email-template__resend .sent-email__content {
    display: grid;
    grid-template-columns: 3.2rem auto;
    grid-gap: 0.8rem;
}

.send-email-template__resend .sent-email__content .inline-icon {
    width: 3.2rem;
    height: 3.2rem;
}

[dir='ltr'] .send-email-template__resend .sent-email__content .inline-icon {
    margin-right: 0.8rem;
}

[dir='rtl'] .send-email-template__resend .sent-email__content .inline-icon {
    margin-left: 0.8rem;
}

.send-email-template__btn {
    margin: 0 auto;
}

.send-email-template-dashboard {
    width: calc(100vw - 33rem);
}

@media (min-width: 320px) and (max-width: 767px) {
    .send-email-template {
        margin-bottom: 1.6rem;
        width: 100%;
    }
}

.send-email-template__footer {
    margin-top: 2.6rem;
}

.send-email-template__footer-live-chat {
    color: var(--text-red);
    cursor: pointer;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.side-note {
    display: flex;
    flex-direction: column;
    align-items: flex-start;
    gap: 1.6rem;
    background-color: var(--general-section-1);
    border-radius: 8px;
    padding: 1.6rem 2.4rem;
    align-self: stretch;
}

.side-note__content {
    display: flex;
    flex-direction: column;
    gap: 0.8rem;
    align-self: stretch;
}

.side-note__header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    gap: 0.8rem;
}

.side-note__action {
    display: flex;
    flex-direction: row;
    align-items: center;
    gap: 0.4rem;
    cursor: pointer;
}

.side-note__action :hover {
    text-decoration: underline;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.switcher-status-badge__parent {
    display: flex;
}

.switcher-status-badge__container {
    display: flex;
    padding: 2px 7px;
    border-radius: 4px;
    align-items: center;
    white-space: nowrap;
    font-size: var(--text-size-xxs);
}

.switcher-status-badge__container--migrated_with_position,
.switcher-status-badge__container--migrated_without_position,
.switcher-status-badge__container--under_maintenance,
.switcher-status-badge__container--unavailable {
    display: inline-flex;
    border: 1.5px solid var(--status-warning);
    color: var(--status-warning);
    font-size: var(--text-size-xxxs);
    align-items: center;
}

.switcher-status-badge__container--pending {
    height: 2.4rem;
    justify-content: center;
    color: var(--status-warning-dark);
    background-color: var(--status-warning-transparent);
    text-decoration: underline;
    font-weight: bold;
}

.switcher-status-badge__container--needs_verification {
    background-color: var(--status-info-transparent);
    color: var(--status-info);
    text-decoration: underline;
    font-weight: bold;
}

.switcher-status-badge__container--failed,
.switcher-status-badge__container--rejected,
.switcher-status-badge__container--suspected {
    height: 2.4rem;
    border-color: var(--status-danger);
    color: rgb(196, 0, 0);
    font-weight: bold;
    text-decoration: underline;
    background-color: var(--status-danger-transparent);
}

.switcher-status-badge__container--verified {
    height: 2.4rem;
    margin-top: 0.1rem;
    color: rgb(0, 122, 34);
    background-color: var(--status-success-transparent);
    font-weight: bold;
}

[dir='ltr'] .switcher-status-badge__container--icon {
    padding: 0.1rem 0.5rem 0 0;
}

[dir='rtl'] .switcher-status-badge__container--icon {
    padding: 0.1rem 0 0 0.5rem;
}

[dir='ltr'] .switcher-status-badge__container__arrow {
    padding-left: 1rem;
}

[dir='rtl'] .switcher-status-badge__container__arrow {
    padding-right: 1rem;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.swipeable-notification {
    width: 100%;
    min-height: 4.8rem;
    border-radius: 4px;
    padding: 0.8rem;
    background-color: #d6dadb;
    display: flex;
    justify-content: space-between;
    text-decoration: none;
}

.swipeable-notification * {
    color: #333333;
}

.swipeable-notification--failure {
    background-color: #fce3e3;
}

.swipeable-notification--success {
    background-color: #cedddf;
}

.swipeable-notification-content {
    align-self: center;
}

.swipeable-notification-time {
    align-self: flex-end;
}

[dir='ltr'] .swipeable-notification-appear,
[dir='ltr'] .swipeable-notification-enter {
    transform: translateX(-100vw);
}

[dir='rtl'] .swipeable-notification-appear,
[dir='rtl'] .swipeable-notification-enter {
    transform: translateX(100vw);
}

.swipeable-notification-appear-active,
.swipeable-notification-enter-active {
    visibility: hidden;
}

.swipeable-notification-appear-done,
.swipeable-notification-enter-done {
    visibility: visible;
    transform: translateX(0);
    transition: transform 300ms;
}

.swipeable-notification-exit {
    transform: translateX(0);
}

.swipeable-notification-exit-active,
.swipeable-notification-exit-active-left,
.swipeable-notification-exit-active-right {
    visibility: hidden;
    transition: all 300ms;
}

[dir='ltr'] .swipeable-notification-exit-active-left,
[dir='ltr'] .swipeable-notification-exit-active-left-left,
[dir='ltr'] .swipeable-notification-exit-active-right-left {
    transform: translateX(-100vw);
}

[dir='rtl'] .swipeable-notification-exit-active-left,
[dir='rtl'] .swipeable-notification-exit-active-left-left,
[dir='rtl'] .swipeable-notification-exit-active-right-left {
    transform: translateX(100vw);
}

[dir='ltr'] .swipeable-notification-exit-active-right,
[dir='ltr'] .swipeable-notification-exit-active-left-right,
[dir='ltr'] .swipeable-notification-exit-active-right-right {
    transform: translateX(100vw);
}

[dir='rtl'] .swipeable-notification-exit-active-right,
[dir='rtl'] .swipeable-notification-exit-active-left-right,
[dir='rtl'] .swipeable-notification-exit-active-right-right {
    transform: translateX(-100vw);
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-swipeable {
    position: relative;
    height: 100%;
}

.dc-swipeable__view {
    display: flex;
    flex-direction: row;
    width: -moz-max-content;
    width: max-content;
    height: inherit;
    position: relative;
}

[dir='ltr'] .dc-swipeable__view {
    transition: left 0.1s linear;
}

[dir='rtl'] .dc-swipeable__view {
    transition: right 0.1s linear;
}

.dc-swipeable__item {
    position: relative;
    display: inline-flex;
    width: 100vw;
}

.dc-swipeable__item--is-disabled .dc-swipeable__view {
    transition: none;
}

[dir='ltr'] .dc-swipeable__item--is-disabled .dc-swipeable__view {
    left: -100vw;
}

[dir='rtl'] .dc-swipeable__item--is-disabled .dc-swipeable__view {
    right: -100vw;
}

.dc-swipeable__nav {
    position: absolute;
    bottom: 0;
    width: 100vw;
    display: flex;
    padding: 1.6rem 0.8rem;
    justify-content: space-between;
    pointer-events: none;
}

.dc-swipeable__nav-elevated {
    bottom: 9rem;
}

.dc-swipeable__nav svg {
    z-index: 3;
}

.dc-swipeable__nav * {
    pointer-events: all;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-relative-datepicker {
    width: 100%;
    text-align: center;
    padding-bottom: 16px;
    position: relative;
}

.dc-relative-datepicker__span {
    width: 100%;
    cursor: pointer;
}

.dc-relative-datepicker__input {
    opacity: 0;
    position: absolute;
    top: 0;
    width: 100%;
    height: 100%;
    z-index: 2;
}

[dir='ltr'] .dc-relative-datepicker__input {
    left: 0;
}

[dir='rtl'] .dc-relative-datepicker__input {
    right: 0;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.search-box {
    margin: 2.4rem 0.8rem;
    width: 24rem;
}

@media (min-width: 320px) and (max-width: 767px) {
    .search-box {
        margin: 0;
        width: auto;
    }

    .search-box .dc-input {
        height: 4rem;
    }
}

.search-box__cross-icon {
    cursor: pointer;
}

.search-box__field {
    margin-bottom: 0 !important;
}

.search-box__field {
    text-indent: 2rem;
    height: 4.2rem;
}

.search-box__field ::-moz-placeholder {
    opacity: 0.5;
}

.search-box__field ::placeholder {
    opacity: 0.5;
}

.search-box__field .dc-input {
    justify-content: center;
}

.search-box__field .dc-input__field {
    flex-grow: 1;
    width: auto;
    width: initial;
    text-indent: 2.4rem;
}

[dir='ltr'] .search-box__field .dc-input__field {
    padding-right: 2rem;
}

[dir='rtl'] .search-box__field .dc-input__field {
    padding-left: 2rem;
}

.search-box__field .dc-input__field ::-moz-placeholder {
    opacity: 0.5;
}

.search-box__field .dc-input__field ::placeholder {
    opacity: 0.5;
}

@media (min-width: 320px) and (max-width: 767px) {
    .search-box__field .dc-input__field {
        grid-column: 1;
        width: 100%;
    }

    [dir='ltr'] .search-box__field .dc-input__field {
        margin-left: -1.1rem;
    }

    [dir='rtl'] .search-box__field .dc-input__field {
        margin-right: -1.1rem;
    }
}

.search-box__field .dc-input__leading-icon {
    cursor: pointer;
    top: 31%;
    pointer-events: inherit;
}

[dir='ltr'] .search-box__field .dc-input__leading-icon {
    margin-left: 0.9rem;
}

[dir='rtl'] .search-box__field .dc-input__leading-icon {
    margin-right: 0.9rem;
}

@media (min-width: 320px) and (max-width: 767px) {
    .search-box__field .dc-input__leading-icon {
        padding-bottom: 0.1rem;
    }

    [dir='ltr'] .search-box__field .dc-input__leading-icon {
        padding-right: 0.3rem;
    }

    [dir='rtl'] .search-box__field .dc-input__leading-icon {
        padding-left: 0.3rem;
    }
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-table {
    color: var(--text-general);
    background: inherit;
}

.dc-table__row {
    display: grid;
    border-bottom: 1px solid var(--general-section-1);
    height: 100%;
}

.dc-table__row--hover:hover {
    background-color: var(--general-section-1);
    cursor: pointer;
}

.dc-table__header {
    border-bottom: 2px solid var(--general-section-1);
    height: 52px;
}

.dc-table__cell,
.dc-table__head {
    font-size: 1.4rem;
    line-height: 1.43;
    display: flex;
    align-items: center;
    white-space: inherit;
    backface-visibility: hidden;
    word-wrap: break-word;
    word-break: break-word;
    word-wrap: break-word;
}

[dir='ltr'] .dc-table__cell,
[dir='ltr'] .dc-table__head {
    text-align: left;
}

[dir='rtl'] .dc-table__cell,
[dir='rtl'] .dc-table__head {
    text-align: right;
}

.dc-table__cell--right {
    display: flex;
    justify-content: flex-end;
}

.dc-table__cell--fixed {
    position: sticky;
    z-index: 2;
}

[dir='ltr'] .dc-table__cell--fixed {
    left: 0;
}

[dir='rtl'] .dc-table__cell--fixed {
    right: 0;
}

.dc-table__head {
    font-weight: bold;
}

.dc-table__head--right {
    display: flex;
    justify-content: flex-end;
}

.dc-table--scroll .dc-table__header {
    position: sticky;
    top: 0;
    z-index: 3;
}

.dc-table--scrollbar {
    display: block;
}

@supports (-webkit-hyphens: none) {
    .dc-table--scrollbar {
        display: inline;
        display: initial;
    }
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
/** @define dc-toast; */
.dc-toast {
    width: 100vw;
    transition:
        transform 0.25s ease,
        opacity 0.25s linear;
    display: flex;
    justify-content: center;
    align-items: center;
    pointer-events: none;
}

.dc-toast__message {
    max-width: calc(100vw - 3.2rem);
    padding: 0.4rem 0.8rem;
    font-size: 1.4rem;
    color: var(--text-general);
    font-weight: 400;
    text-transform: none;
    text-align: center;
    line-height: 1.5;
    color: var(--text-colored-background);
    border-radius: 4px;
    min-height: 34px;
    display: flex;
    align-items: center;
    pointer-events: all;
}

.dc-toast__error .dc-toast__message {
    background-color: var(--status-danger);
}

.dc-toast__info .dc-toast__message {
    background: var(--status-info);
    font-size: 1.2rem;
    /* iPhone SE screen height fixes due to UI space restrictions */
}

@media only screen and (max-height: 580px) {
    .dc-toast__info .dc-toast__message {
        font-size: 1rem;
    }
}

.dc-toast__notification .dc-toast__message {
    background: var(--general-active);
    padding: 0.9rem 1.2rem;
}

.dc-toast--enter,
.dc-toast--exit {
    transform: scale(1, 0);
    opacity: 0;
}

.dc-toast--enter-done {
    transform: scale(1, 1);
    opacity: 1;
}

.dc-toast--blinker .dc-toast__message {
    animation: toast_blinking 0.4s alternate infinite;
}

.dc-toast:not(:first-child) {
    margin-top: 1rem;
}

@keyframes toast_blinking {
    40% {
        opacity: 1;
    }

    100% {
        opacity: 0;
    }
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-toggle-switch {
    height: 0;
    width: 0;
    visibility: hidden;
}

.dc-toggle-switch__label {
    display: flex;
    align-items: center;
    cursor: pointer;
    width: 4.9rem;
    height: 2.52rem;
    background: var(--general-disabled);
    border-radius: 4.9rem;
    transition: background-color 0.25s;
}

[dir='ltr'] .dc-toggle-switch__label {
    margin-left: auto;
    margin-right: 1.6rem;
    padding-left: 0.4rem;
}

[dir='rtl'] .dc-toggle-switch__label {
    margin-right: auto;
    margin-left: 1.6rem;
    padding-right: 0.4rem;
}

.dc-toggle-switch__button {
    width: 1.9rem;
    height: 1.9rem;
    border-radius: 1.9rem;
    transition: transform 0.25s;
    background: var(--text-colored-background);
}

.dc-toggle-switch:checked + .dc-toggle-switch__label {
    background: var(--text-profit-success);
}

[dir='ltr'] .dc-toggle-switch:checked + .dc-toggle-switch__label .dc-toggle-switch__button {
    transform: translateX(2.25rem);
}

[dir='rtl'] .dc-toggle-switch:checked + .dc-toggle-switch__label .dc-toggle-switch__button {
    transform: translateX(-2.25rem);
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.message-list {
    width: 100%;
    max-width: 63.4rem;
    margin: 0 auto;
    min-height: 3.2rem;
}

.message-list .alert-message {
    display: flex;
    flex-direction: row;
    -moz-column-gap: 0.8rem;
    column-gap: 0.8rem;
    justify-content: flex-start;
    min-height: 3.2rem;
}

@media (min-width: 320px) and (max-width: 767px) {
    .message-list .alert-message {
        margin: 0;
    }
}

.message-list .alert-message__icon-container {
    position: relative;
}

.message-list .alert-message__icon-container .icon-container__line {
    border: 1px solid var(--border-normal);
    position: absolute;
    height: 100%;
    top: 50%;
}

[dir='ltr'] .message-list .alert-message__icon-container .icon-container__line {
    left: 50%;
    transform: translate(-50%, -50%);
}

[dir='rtl'] .message-list .alert-message__icon-container .icon-container__line {
    right: 50%;
    transform: translate(50%, -50%);
}

.message-list .alert-message__icon-container .icon-container__icon {
    display: flex;
    position: relative;
    margin-top: 0.8rem;
}

.message-list .alert-message__message-container,
.message-list .alert-message__button-container {
    display: flex;
    align-items: center;
}

.message-list .alert-message__message-container {
    padding: 0.7rem 0;
}

[dir='ltr'] .message-list .alert-message__button-container {
    margin-left: auto;
}

[dir='rtl'] .message-list .alert-message__button-container {
    margin-right: auto;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-tick-picker {
    width: 100%;
    max-width: 300px;
    height: 328px;
    background-color: inherit;
    display: flex;
    flex-direction: column;
    justify-content: flex-end;
}

.dc-tick-picker div {
    display: flex;
}

.dc-tick-picker__calculation {
    margin-bottom: 28px;
    justify-content: space-evenly;
    align-items: center;
}

.dc-tick-picker__calculation .dc-tick-picker__holder {
    color: var(--purchase-main-2);
    flex-direction: column;
    justify-content: center;
    text-align: center;
    margin: 0 1.4rem;
}

.dc-tick-picker__calculation .operator {
    background-color: var(--general-section-2);
    width: 48px;
    height: 48px;
}

.dc-tick-picker__calculation .operator .dc-btn__text {
    transform: scale(2);
}

.dc-tick-picker__submit-wrapper {
    margin-bottom: 1.6rem;
    justify-content: center;
}

.dc-tick-picker__submit-wrapper button {
    background-color: var(--general-section-2);
    height: 48px;
    width: 112px;
}

.dc-tick-picker__submit-wrapper button span {
    color: var(--text-prominent);
    font-size: 1.6rem;
}

.dc-tick-picker__submit-wrapper--is-disabled {
    pointer-events: none;
}

.dc-tick-picker__submit-wrapper--is-disabled .dc-btn {
    background-color: var(--general-disabled);
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-timeline__flex {
    display: flex;
    position: relative;
}

[dir='ltr'] .dc-timeline__flex {
    border-left: var(--brand-red-coral) solid 1px;
    margin-left: 1.2rem;
}

[dir='rtl'] .dc-timeline__flex {
    border-right: var(--brand-red-coral) solid 1px;
    margin-right: 1.2rem;
}

[dir='ltr'] .dc-timeline__flex--no-border {
    border-left: 0;
    border-left: initial;
}

[dir='rtl'] .dc-timeline__flex--no-border {
    border-right: 0;
    border-right: initial;
}

.dc-timeline__container {
    margin-top: 4px;
}

[dir='ltr'] .dc-timeline__container {
    margin-left: 20px;
}

[dir='rtl'] .dc-timeline__container {
    margin-right: 20px;
}

.dc-timeline__title {
    max-width: 500px;
}

.dc-timeline__flex--disabled .dc-timeline__title {
    color: #6e6e6e;
}

.dc-timeline__oval {
    width: 24px;
    height: 24px;
    line-height: 2.35rem;
    background-color: var(--brand-red-coral);
    border-radius: 50%;
    text-align: center;
    position: absolute;
}

[dir='ltr'] .dc-timeline__oval {
    margin-right: 8px;
    padding-left: 1px;
    left: -12px;
}

[dir='rtl'] .dc-timeline__oval {
    margin-left: 8px;
    padding-right: 1px;
    right: -12px;
}

.dc-timeline__flex--disabled .dc-timeline__oval {
    background-color: #6e6e6e;
}

.dc-timeline__number {
    position: relative;
}

[dir='ltr'] .dc-timeline__number {
    left: -1px;
}

[dir='rtl'] .dc-timeline__number {
    right: -1px;
}

.dc-timeline__content {
    margin: 16px 0;
    color: var(--text-prominent);
}

.dc-timeline__content:last-of-type {
    margin-bottom: 0;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
/* Loading Spinner */
/** @define block-ui */
.block-ui {
    position: absolute;
    z-index: 3;
    top: 0;
    bottom: 0;
    width: calc(100% - 4px);
    height: 100%;
    background: var(--overlay-inside-dialog);
}

[dir='ltr'] .block-ui {
    left: 0.2em;
    right: 0;
}

[dir='rtl'] .block-ui {
    right: 0.2em;
    left: 0;
}

.block-ui__loading {
    position: absolute;
    top: calc(50% - 22px);
    z-index: 11;
}

[dir='ltr'] .block-ui__loading {
    left: calc(50% - 16px);
}

[dir='rtl'] .block-ui__loading {
    right: calc(50% - 16px);
}

.block-ui__loading-spinner {
    position: relative;
    margin: 0 auto;
    width: 4.2em;
}

.block-ui__loading-spinner:before {
    content: '';
    display: block;
    padding-top: 100%;
}

.block-ui__loading-spinner-circular {
    animation: rotate 2s linear infinite;
    height: 100%;
    transform-origin: center center;
    width: 100%;
    position: absolute;
    top: 0;
    bottom: 0;
    left: 0;
    right: 0;
    margin: auto;
}

.block-ui__loading-spinner-path {
    stroke-dasharray: 1, 200;
    stroke-dashoffset: 0;
    animation:
        dash 1.5s ease-in-out infinite,
        colorRed 6s ease-in-out infinite;
    stroke-linecap: round;
}

/* Spinner Loader Animation */
@keyframes rotate {
    100% {
        transform: rotate(360deg);
    }
}

@keyframes dash {
    0% {
        stroke-dasharray: 1, 200;
        stroke-dashoffset: 0;
    }

    50% {
        stroke-dasharray: 89, 200;
        stroke-dashoffset: -35px;
    }

    100% {
        stroke-dasharray: 89, 200;
        stroke-dashoffset: -124px;
    }
}

@keyframes colorRed {
    100%,
    0% {
        stroke: var(--brand-red-coral);
    }
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-vertical-tab {
    display: flex;
    align-items: flex-start;
    justify-content: flex-start;
    border-radius: 4px;
    height: 100%;
}

.dc-vertical-tab:not(.dc-vertical-tab--floating) {
    background-color: var(--general-section-1);
}

.dc-vertical-tab--floating {
    justify-content: center;
}

.dc-vertical-tab--grid {
    display: grid;
    height: calc(100vh - 48px);
    grid-template-areas: 'form-sidebar form-title' 'form-sidebar form-content';
    grid-template-rows: 5.2rem auto;
}

.dc-vertical-tab__title {
    grid-area: form-title;
    height: 5rem;
    border-top: 1px solid var(--general-section-1);
}

.dc-vertical-tab__content-container {
    position: relative;
    z-index: 0;
    height: 100%;
    width: 100%;
    display: flex;
    flex-flow: column nowrap;
    flex-grow: 1;
}

.dc-vertical-tab__content-container--has-side-note {
    flex-flow: initial;
}

.dc-vertical-tab--full-screen {
    min-height: calc(100svh - 84px);
    width: 100%;
}

.dc-vertical-tab--full-screen.dc-vertical-tab--floating {
    min-height: calc(100svh - 48px - 36px - 53px - 2.4rem);
}

.dc-vertical-tab:not(.dc-vertical-tab--full-screen):not(.dc-vertical-tab--floating) .dc-vertical-tab__content {
    padding: 2.4rem;
}

.dc-vertical-tab__action-bar {
    width: 100%;
    display: flex;
    flex-flow: row-reverse nowrap;
    justify-content: space-between;
    align-items: center;
    padding: 1.6rem;
    box-sizing: border-box;
}

.dc-vertical-tab__action-bar-wrapper {
    cursor: pointer;
    padding: 0.4rem 0.4rem 0.2rem;
    border-radius: 4px;
}

[dir='ltr'] .dc-vertical-tab__action-bar-wrapper {
    margin-left: auto;
}

[dir='rtl'] .dc-vertical-tab__action-bar-wrapper {
    margin-right: auto;
}

.dc-vertical-tab__action-bar-wrapper:hover {
    background: var(--general-hover);
}

.dc-vertical-tab__tab {
    display: flex;
    min-width: 28%;
    height: 100%;
    flex-direction: column;
    background-color: var(--general-section-1);
    position: relative;
}

[dir='ltr'] .dc-vertical-tab__tab {
    border-radius: 4px 0 0 4px;
}

[dir='rtl'] .dc-vertical-tab__tab {
    border-radius: 0 4px 4px 0;
}

.dc-vertical-tab__tab--floating {
    min-width: 256px;
    padding: 0.8rem;
    border-radius: 8px;
}

.dc-vertical-tab__tab--floating .dc-vertical-tab__header--highlight {
    width: calc(100% - 1.6rem);
    border-radius: 4px;
}

.dc-vertical-tab__tab-meta-wrapper {
    grid-area: form-sidebar;
}

.dc-vertical-tab__tab-meta-wrapper--floating {
    position: sticky;
    top: calc(2.4rem + 41px);
}

.dc-vertical-tab__tab-bottom-note {
    position: sticky;
    margin-top: 1.6rem;
}

.dc-vertical-tab__header-title {
    padding: 1.6rem;
    display: flex;
    align-items: center;
    transition: background-color 0.1s ease-in;
    text-decoration: none;
}

[dir='ltr'] .dc-vertical-tab--grouped .dc-vertical-tab__header {
    padding-left: 4.4rem;
}

[dir='rtl'] .dc-vertical-tab--grouped .dc-vertical-tab__header {
    padding-right: 4.4rem;
}

.dc-vertical-tab--grouped .dc-vertical-tab__header--highlight {
    z-index: -1;
}

[dir='ltr'] .dc-vertical-tab--grouped .dc-vertical-tab__header--active {
    padding-left: 4.8rem;
}

[dir='rtl'] .dc-vertical-tab--grouped .dc-vertical-tab__header--active {
    padding-right: 4.8rem;
}

[dir='ltr'] .dc-vertical-tab__header__icon.dc-vertical-tab__header__icon--active {
    margin-right: 2rem;
}

[dir='rtl'] .dc-vertical-tab__header__icon.dc-vertical-tab__header__icon--active {
    margin-left: 2rem;
}

.dc-vertical-tab__header-group-chevron {
    position: absolute;
    transition: transform 0.3s cubic-bezier(0.25, 0.1, 0.25, 1);
}

[dir='ltr'] .dc-vertical-tab__header-group-chevron {
    right: 2.4rem;
}

[dir='rtl'] .dc-vertical-tab__header-group-chevron {
    left: 2.4rem;
}

[dir='ltr'] .dc-vertical-tab__header-group-chevron--invert {
    transform: rotate(180deg);
}

[dir='rtl'] .dc-vertical-tab__header-group-chevron--invert {
    transform: rotate(-180deg);
}

[dir='ltr'] .dc-vertical-tab__header,
[dir='ltr'] .dc-vertical-tab__header-group {
    text-align: left;
}

[dir='rtl'] .dc-vertical-tab__header,
[dir='rtl'] .dc-vertical-tab__header-group {
    text-align: right;
}

.dc-vertical-tab__header,
.dc-vertical-tab__header-group {
    font-size: 1.4rem;
    color: var(--text-general);
    font-weight: 700;
    text-transform: none;
    line-height: 1.5;
    line-height: 1.5;
    color: var(--text-general);
    cursor: pointer;
    display: flex;
    align-items: center;
    transition: background-color 0.1s ease-in;
    text-decoration: none;
    z-index: 1;
    -webkit-user-select: none;
    -moz-user-select: none;
    user-select: none;
}

[dir='ltr'] .dc-vertical-tab__header,
[dir='ltr'] .dc-vertical-tab__header-group {
    padding: 1rem 1.2rem 1rem 1.6rem;
}

[dir='rtl'] .dc-vertical-tab__header,
[dir='rtl'] .dc-vertical-tab__header-group {
    padding: 1rem 1.6rem 1rem 1.2rem;
}

.dc-vertical-tab__header:hover:not(.dc-vertical-tab__header--active):not(.dc-vertical-tab__header-group--active),
.dc-vertical-tab__header-group:hover:not(.dc-vertical-tab__header--active):not(.dc-vertical-tab__header-group--active) {
    background-color: var(--state-hover);
}

.dc-vertical-tab__header__link,
.dc-vertical-tab__header-group__link {
    font-weight: normal;
}

[dir='ltr'] .dc-vertical-tab__header__link,
[dir='ltr'] .dc-vertical-tab__header-group__link {
    margin-right: 0.4rem;
}

[dir='rtl'] .dc-vertical-tab__header__link,
[dir='rtl'] .dc-vertical-tab__header-group__link {
    margin-left: 0.4rem;
}

[dir='ltr'] .dc-vertical-tab__header__icon,
[dir='ltr'] .dc-vertical-tab__header-group__icon {
    margin-right: 1.6rem;
}

[dir='rtl'] .dc-vertical-tab__header__icon,
[dir='rtl'] .dc-vertical-tab__header-group__icon {
    margin-left: 1.6rem;
}

.dc-vertical-tab__header__icon--active,
.dc-vertical-tab__header-group__icon--active {
    --fill-color1: var(--text-prominent);
}

.dc-vertical-tab__header__counter,
.dc-vertical-tab__header-group__counter {
    position: absolute;
}

[dir='ltr'] .dc-vertical-tab__header__counter,
[dir='ltr'] .dc-vertical-tab__header-group__counter {
    right: 2rem;
}

[dir='rtl'] .dc-vertical-tab__header__counter,
[dir='rtl'] .dc-vertical-tab__header-group__counter {
    left: 2rem;
}

.dc-vertical-tab__header--active .dc-vertical-tab__header__link,
.dc-vertical-tab__header--active .dc-vertical-tab__header-group__link,
.dc-vertical-tab__header-group--active .dc-vertical-tab__header__link,
.dc-vertical-tab__header-group--active .dc-vertical-tab__header-group__link {
    color: var(--text-prominent);
    font-weight: bold;
}

.dc-vertical-tab__header--highlight,
.dc-vertical-tab__header-group--highlight {
    position: absolute;
    display: block;
    content: '';
    color: var(--text-prominent);
    background-color: var(--state-normal);
    width: 100%;
    height: 41px;
    transform: translate3d(0, 0, 0);
    z-index: 0;
}

[dir='ltr'] .dc-vertical-tab__header--highlight,
[dir='ltr'] .dc-vertical-tab__header-group--highlight {
    border-left: 4px solid var(--brand-red-coral);
}

[dir='rtl'] .dc-vertical-tab__header--highlight,
[dir='rtl'] .dc-vertical-tab__header-group--highlight {
    border-right: 4px solid var(--brand-red-coral);
}

.dc-vertical-tab__header--new,
.dc-vertical-tab__header-group--new {
    font-size: 1rem;
    font-weight: bold;
    padding: 0 0.4rem;
    margin: 0 0.4rem;
    background-color: var(--text-loss-danger);
    color: var(--status-colored-background);
    border-radius: 8px;
}

.dc-vertical-tab__header--floating,
.dc-vertical-tab__header-group--floating {
    border-radius: 4px;
}

.dc-vertical-tab__content {
    width: 100%;
    height: 100%;
    min-height: inherit;
    display: flex;
    flex-direction: column;
    justify-content: flex-start;
    align-items: flex-start;
    position: relative;
    background-color: var(--general-main-1);
    grid-area: form-content;
}

[dir='ltr'] .dc-vertical-tab__content {
    border-radius: 0 4px 4px 0;
}

[dir='rtl'] .dc-vertical-tab__content {
    border-radius: 4px 0 0 4px;
}

.dc-vertical-tab__content-side-note {
    min-width: 25.6rem;
}

[dir='ltr'] .dc-vertical-tab__content-side-note {
    margin-left: 2.4rem;
}

[dir='rtl'] .dc-vertical-tab__content-side-note {
    margin-right: 2.4rem;
}

.dc-vertical-tab__content-side-note-item {
    background-color: var(--general-section-1);
    border-radius: 8px;
    padding: 1.6rem 2.4rem;
    color: var(--text-general);
    font-size: var(--text-size-xxs);
    line-height: 1.5;
    margin-bottom: 2.4rem;
    width: 25.6rem;
}

.dc-vertical-tab__content.dc-vertical-tab:not(.dc-vertical-tab--full-screen) {
    padding: 2.4rem;
    height: 100%;
}

.dc-vertical-tab__content--floating {
    max-width: 952px;
    min-width: 672px;
}

[dir='ltr'] .dc-vertical-tab__content--floating {
    margin-left: 2.4rem;
}

[dir='rtl'] .dc-vertical-tab__content--floating {
    margin-right: 2.4rem;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.wizard {
    width: inherit;
    height: inherit;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.player__wrapper {
    position: relative;
}

.player__overlay {
    position: absolute;
    top: 0;
    height: 100%;
    width: 100%;
    background: rgba(0, 0, 0, 0.5);
    display: flex;
    justify-content: center;
    align-items: center;
    opacity: 0;
    -webkit-transform: translate3d(0, 0, 200px);
}

.player__overlay--visible {
    opacity: 1;
}

.player__overlay__icon {
    margin: 0;
}

.player__controls__wrapper {
    position: absolute;
    bottom: 0.2rem;
    z-index: 2;
    width: 100%;
    height: 5.6rem;
    padding: 0 1.6rem;
    opacity: 0;
    pointer-events: none;
    transition: opacity 0.25s linear;
    -webkit-transform: translate3d(0, 0, 200px);
}

[dir='ltr'] .player__controls__wrapper {
    background: linear-gradient(180deg, rgba(0, 0, 0, 0) 0%, rgba(0, 0, 0, 0.6) 100%);
}

[dir='rtl'] .player__controls__wrapper {
    background: linear-gradient(-180deg, rgba(0, 0, 0, 0) 0%, rgba(0, 0, 0, 0.6) 100%);
}

.player__controls__wrapper--visible {
    opacity: 1;
}

.player__controls__wrapper--interactive {
    pointer-events: auto;
}

.player__controls__progress-bar {
    width: 100%;
    background-color: var(--text-colored-background);
    height: 0.4rem;
    border-radius: 4px;
    margin: 0.8rem 0;
    cursor: pointer;
}

.player__controls__progress-bar:before {
    content: '';
    display: block;
    height: 2rem;
    width: 100%;
    position: absolute;
    bottom: 67%;
}

.player__controls__progress-bar__filled {
    position: relative;
    width: 0%;
    height: 0.4rem;
    border-radius: 4px;
    background-color: var(--brand-red-coral);
}

.player__controls__progress-bar__filled--animated {
    transition: all 0.3s linear;
}

.player__controls__progress-bar__filled--ended {
    width: 100%;
}

.player__controls__bottom-bar {
    display: flex;
    justify-content: space-between;
    align-items: center;
    height: 3.6rem;
    padding-bottom: 0.4rem;
}

.player__controls__bottom-bar--blocked {
    pointer-events: none;
}

.player__controls__bottom-bar .controls__right {
    width: 10.2rem;
}

.player__controls__time-wrapper {
    margin: 0 1.6rem;
}

.player__controls__button {
    background: none;
    border: none;
    padding: 0;
    cursor: pointer;
    width: 2.4rem;
    height: 2.4rem;
    display: flex;
    justify-content: center;
    align-items: center;
}

.player__controls__button svg {
    margin: 0 !important;
}

.player__volume__wrapper {
    position: relative;
}

.player__volume__wrapper:before {
    content: '';
    display: block;
    height: 1rem;
    width: 4rem;
    position: absolute;
}

[dir='ltr'] .player__volume__wrapper:before {
    right: -1rem;
}

[dir='rtl'] .player__volume__wrapper:before {
    left: -1rem;
}

.player__volume-bar {
    position: relative;
    width: 0.4rem;
    height: 100%;
    border-radius: 4px;
    cursor: pointer;
    background-color: var(--text-less-prominent);
}

.player__volume-bar__wrapper {
    width: 4rem;
    height: 10.4rem;
    position: absolute;
    bottom: 2.5rem;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 0.8rem 0;
    border-radius: 8px;
    background-color: var(--general-main-2);
    box-shadow: 0 0.8rem 1.6rem 0 var(--shadow-menu);
    transform: translateY(0);
    transition:
        transform 0.25s ease,
        opacity 0.25s linear;
    opacity: 0;
}

[dir='ltr'] .player__volume-bar__wrapper {
    right: -1rem;
}

[dir='rtl'] .player__volume-bar__wrapper {
    left: -1rem;
}

.player__volume-bar__wrapper--enter,
.player__volume-bar__wrapper--exit {
    transform: translateY(1rem);
    opacity: 0;
}

.player__volume-bar__wrapper--enter-done {
    transform: translateY(0);
    opacity: 1;
}

.player__volume-bar__filled {
    position: absolute;
    bottom: 0;
    width: 0.4rem;
    border-radius: 4px;
    background-color: var(--brand-red-coral);
}

.player__volume-bar__filled--animated {
    transition: all 0.3s linear;
}

.player__volume-dot {
    position: absolute;
    bottom: 90%;
}

[dir='ltr'] .player__volume-dot {
    left: -0.4rem;
}

[dir='rtl'] .player__volume-dot {
    right: -0.4rem;
}

.player__progress-dot,
.player__volume-dot {
    width: 1.2rem;
    height: 1.2rem;
    border-radius: 50%;
    background-color: var(--brand-red-coral);
    cursor: pointer;
}

.player__progress-dot {
    position: absolute;
    bottom: -0.3rem;
}

[dir='ltr'] .player__progress-dot {
    left: calc(100% - 0.6rem);
}

[dir='rtl'] .player__progress-dot {
    right: calc(100% - 0.6rem);
}

@media (min-width: 1024px) {
    .player__progress-dot:hover {
        bottom: -0.6rem;
        width: 1.6rem;
        height: 1.6rem;
    }
}

.player__progress-dot--increased-drag-area:before {
    position: absolute;
    content: '';
    height: 2.5rem;
    width: 2.5rem;
    top: 50%;
    border-radius: 50%;
}

[dir='ltr'] .player__progress-dot--increased-drag-area:before {
    left: 50%;
    transform: translate(-50%, -50%);
}

[dir='rtl'] .player__progress-dot--increased-drag-area:before {
    right: 50%;
    transform: translate(50%, -50%);
}

.player__progress-dot--enlarged {
    bottom: -0.6rem;
    width: 1.6rem;
    height: 1.6rem;
}

.player__playback-rate__wrapper {
    width: 6.2rem;
    position: relative;
}

.player__playback-rate__wrapper .playback-rate__icon {
    position: absolute;
}

[dir='ltr'] .player__playback-rate__wrapper .playback-rate__icon {
    left: 0;
}

[dir='rtl'] .player__playback-rate__wrapper .playback-rate__icon {
    right: 0;
}

.player__playback-rate__wrapper .dc-dropdown__select-arrow {
    display: none;
}

.player__playback-rate__wrapper .dc-dropdown__display--playback-rate {
    width: 6.2rem;
    height: 2.3rem;
    background: none;
    border: none;
    border-radius: 8px;
    justify-content: flex-start;
}

.player__playback-rate__wrapper .dc-dropdown__display--playback-rate .dc-dropdown__display-text {
    color: var(--text-colored-background);
    font-size: 1rem;
}

[dir='ltr'] .player__playback-rate__wrapper .dc-dropdown__display--playback-rate .dc-dropdown__display-text {
    padding: 0 0 0 2.5rem;
}

[dir='rtl'] .player__playback-rate__wrapper .dc-dropdown__display--playback-rate .dc-dropdown__display-text {
    padding: 0 2.5rem 0 0;
}

.player__playback-rate__wrapper .dc-dropdown-container {
    min-width: 6.2rem;
    width: auto;
    width: initial;
}

.player__playback-rate__wrapper .dc-dropdown-container:before {
    content: '';
    display: block;
    height: 1.7rem;
    width: 7rem;
    position: absolute;
    bottom: 1rem;
}

.player__playback-rate__wrapper .dc-dropdown__list {
    width: 9.7rem;
}

[dir='ltr'] .player__playback-rate__wrapper .dc-dropdown__list {
    right: 10%;
    left: auto;
    left: initial;
}

[dir='rtl'] .player__playback-rate__wrapper .dc-dropdown__list {
    left: 10%;
    right: auto;
    right: initial;
}

.player__playback-rate__wrapper .dc-dropdown__display--playback-rate__item {
    height: 4rem;
    display: flex;
    justify-content: start;
    align-items: center;
}

@media (min-width: 320px) and (max-width: 767px) {
    .player__playback-rate__wrapper .dc-list,
    .player__playback-rate__wrapper .dc-themed-scrollbars {
        height: 13.2rem;
    }
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.wallet-icon {
    position: relative;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 4px;
    overflow: hidden;
}

.wallet-icon__default-bg {
    background: radial-gradient(100% 4130.74% at 0% 100%, rgba(244, 67, 54, 0.24) 0%, rgba(40, 57, 145, 0.48) 100%)
        #ffffff;
}

.wallet-icon--xsmall {
    width: 2.4rem;
    height: 1.4rem;
}

.wallet-icon--small {
    width: 4rem;
    height: 2.4rem;
}

.wallet-icon--medium {
    width: 6.4rem;
    height: 4rem;
}

.wallet-icon--large {
    width: 8.4rem;
    height: 5.2rem;
}

.wallet-icon--xlarge {
    width: 12.8rem;
    height: 8rem;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.wallet-card {
    position: relative;
}

.wallet-card__container {
    border-radius: inherit;
    width: 100%;
    height: 100%;
}

.wallet-card__container--active {
    border: 2px solid var(--text-red);
}

.wallet-card__container--small {
    display: flex;
    align-items: center;
    justify-content: center;
}

.wallet-card__container-fade {
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    opacity: 0;
    background: var(--wallets-card-active-gradient-background);
    border-radius: inherit;
}

.wallet-card__container-fade--active {
    opacity: 1;
}

.wallet-card__container:hover .wallet-card__container-fade {
    opacity: 1;
}

.wallet-card__container:hover .wallet-card__container-fade--disabled,
.wallet-card__container:hover .wallet-card__container-fade--faded,
.wallet-card__container:hover .wallet-card__container-fade--added {
    opacity: 0;
}

.wallet-card__shine {
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    clip-path: polygon(40% 10%, 104% -6.94%, 92.5% 100%, 28% 100%);
    mix-blend-mode: overlay;
    opacity: 0.16;
    background-color: #ffffff;
}

[dir='ltr'] .wallet-card__shine {
    border-top-right-radius: 8px;
}

[dir='rtl'] .wallet-card__shine {
    border-top-left-radius: 8px;
}

.wallet-card__content {
    position: relative;
    height: 100%;
    width: 100%;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    align-items: center;
    padding: 1.6rem;
}

@media (min-width: 320px) and (max-width: 767px) {
    .wallet-card__content--medium {
        padding: 0.8rem;
    }
}

.wallet-card--small {
    width: 6.4rem;
    height: 4rem;
    border-radius: 4px;
}

.wallet-card--medium {
    width: 20rem;
    height: 12rem;
    border-radius: 8px;
}

@media (min-width: 320px) and (max-width: 767px) {
    .wallet-card--medium {
        width: 16rem;
        height: 9.6rem;
    }
}

.wallet-card--large {
    width: 24rem;
    height: 14.4rem;
    border-radius: 8px;
}

@media (min-width: 320px) and (max-width: 767px) {
    .wallet-card--large {
        width: 21.6rem;
        height: 12.8rem;
    }
}

.wallet-card__active-icon {
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    display: flex;
    justify-content: center;
    align-items: center;
}

.wallet-card__active-icon--small {
    position: absolute;
    top: 0;
    width: auto;
    width: initial;
    height: auto;
    height: initial;
}

[dir='ltr'] .wallet-card__active-icon--small {
    left: 100%;
    transform: translate(-1.2rem, -0.4rem);
}

[dir='rtl'] .wallet-card__active-icon--small {
    right: 100%;
    transform: translate(1.2rem, -0.4rem);
}

.wallet-card__top-wrapper {
    display: flex;
    flex-direction: row;
    justify-content: space-between;
    width: 100%;
}

.wallet-card__bottom-wrapper {
    display: flex;
    flex-direction: column;
    justify-content: flex-start;
    width: 100%;
}

.wallet-card__wallet-button {
    background: #ffffff;
}

.wallet-card__wallet-button-text {
    color: #333333;
}

.wallet-card__wallet-button--added {
    opacity: 0.32;
}

.wallet-card--disabled {
    opacity: 0.32;
}

.wallet-card--faded {
    opacity: 0.72;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.app-icon {
    position: relative;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 4px;
    overflow: hidden;
}

.app-icon__top-icon {
    position: absolute;
    top: 0;
    z-index: 1;
}

[dir='ltr'] .app-icon__top-icon {
    left: 0;
}

[dir='rtl'] .app-icon__top-icon {
    right: 0;
}

.app-icon__bottom-icon {
    position: absolute;
    bottom: 0;
}

[dir='ltr'] .app-icon__bottom-icon {
    right: 0;
}

[dir='rtl'] .app-icon__bottom-icon {
    left: 0;
}

.app-icon--small {
    width: 4rem;
    height: 2.4rem;
}

.app-icon--small .app-icon__top-icon {
    top: 0.1rem;
}

[dir='ltr'] .app-icon--small .app-icon__top-icon {
    left: 0.1rem;
}

[dir='rtl'] .app-icon--small .app-icon__top-icon {
    right: 0.1rem;
}

.app-icon--small .app-icon__bottom-icon {
    bottom: 0.1rem;
}

[dir='ltr'] .app-icon--small .app-icon__bottom-icon {
    right: 0.1rem;
}

[dir='rtl'] .app-icon--small .app-icon__bottom-icon {
    left: 0.1rem;
}

.app-icon--medium {
    width: 6.4rem;
    height: 4rem;
}

.app-icon--medium .app-icon__top-icon {
    top: 0.2rem;
}

[dir='ltr'] .app-icon--medium .app-icon__top-icon {
    left: 0.2rem;
}

[dir='rtl'] .app-icon--medium .app-icon__top-icon {
    right: 0.2rem;
}

.app-icon--medium .app-icon__bottom-icon {
    bottom: 0.2rem;
}

[dir='ltr'] .app-icon--medium .app-icon__bottom-icon {
    right: 0.2rem;
}

[dir='rtl'] .app-icon--medium .app-icon__bottom-icon {
    left: 0.2rem;
}

.app-icon--large {
    width: 12.8rem;
    height: 8rem;
}

.app-icon--large .app-icon__top-icon {
    top: 0.4rem;
}

[dir='ltr'] .app-icon--large .app-icon__top-icon {
    left: 0.4rem;
}

[dir='rtl'] .app-icon--large .app-icon__top-icon {
    right: 0.4rem;
}

.app-icon--large .app-icon__bottom-icon {
    bottom: 0.4rem;
}

[dir='ltr'] .app-icon--large .app-icon__bottom-icon {
    right: 0.4rem;
}

[dir='rtl'] .app-icon--large .app-icon__bottom-icon {
    left: 0.4rem;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.endpoint {
    width: 30vw;
    min-width: 30rem;
    margin: 20vh auto;
}

@media (min-width: 320px) and (max-width: 767px) {
    .endpoint {
        margin: auto;
    }
}

.endpoint__title {
    margin-bottom: 1.6rem;
}

.endpoint__checkbox {
    margin-top: 4.5rem;
    margin-bottom: 1.6rem;
}

[dir='ltr'] .endpoint .dc-btn--secondary {
    margin-left: 1.6rem;
}

[dir='rtl'] .endpoint .dc-btn--secondary {
    margin-right: 1.6rem;
}

.endpoint .feature-flags {
    margin-top: 4rem;
}

.endpoint .feature-flags__item {
    margin-top: 1.6rem;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
@media (min-width: 320px) and (max-width: 767px) {
    .open-real-account-dialog .dc-dialog__dialog {
        max-width: 32rem;
    }

    .open-real-account-dialog .dc-dialog__content {
        font-size: 1.2rem;
    }

    .open-real-account-dialog .dc-dialog__button {
        font-size: 1.2rem;
    }
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.ready-to-verify-dialog .dc-dialog__header-wrapper,
.ready-to-verify-dialog .dc-dialog__content,
.ready-to-verify-dialog .dc-dialog__footer {
    display: flex;
    justify-content: center;
    text-align: center;
}

@media (min-width: 320px) and (max-width: 767px) {
    .ready-to-verify-dialog .dc-dialog__dialog {
        padding: 1.6rem;
        margin: 0 1.6rem;
    }
}

.ready-to-verify-dialog .dc-dialog__header-wrapper {
    margin-top: 0;
    margin-top: initial;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.need-real-account-for-cashier-dialog .dc-dialog__header-wrapper {
    margin: 0 0 2rem;
}

@media (min-width: 320px) and (max-width: 767px) {
    .need-real-account-for-cashier-dialog .dc-dialog__content,
    .need-real-account-for-cashier-dialog .dc-dialog__button {
        font-size: 1.2rem;
    }
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
@media (min-width: 320px) and (max-width: 767px) {
    .ready-to-deposit-dialog .dc-dialog__content,
    .ready-to-deposit-dialog .dc-dialog__button {
        font-size: 1.2rem;
    }
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.wallets-upgrade-logout-modal__content {
    width: 36.3rem;
    display: flex;
    flex-direction: column;
    gap: 0.8rem;
}

@media (max-width: 1279px) {
    .wallets-upgrade-logout-modal__content {
        width: 100%;
        align-items: center;
    }
}

.wallets-upgrade-logout-modal .dc-dialog__dialog {
    width: 100%;
    max-width: 60rem;
    overflow: hidden;
    background-color: var(--general-section-1);
}

@media (max-width: 1279px) {
    .wallets-upgrade-logout-modal .dc-dialog__dialog {
        width: 32.8rem;
        padding: 1.6rem;
    }
}

.wallets-upgrade-logout-modal .dc-dialog__content {
    margin-bottom: 1.6rem;
    display: flex;
    flex-direction: column;
    align-items: flex-start;
}

@media (max-width: 1279px) {
    .wallets-upgrade-logout-modal .dc-dialog__content {
        align-items: center;
    }
}

.wallets-upgrade-logout-modal .dc-dialog__footer {
    display: flex;
    justify-content: flex-start;
}

@media (max-width: 1279px) {
    .wallets-upgrade-logout-modal .dc-dialog__footer {
        justify-content: center;
    }
}

[dir='ltr'] .wallets-upgrade-logout-modal .dc-dialog__button {
    margin-left: 0;
}

[dir='rtl'] .wallets-upgrade-logout-modal .dc-dialog__button {
    margin-right: 0;
}

@media (min-width: 320px) and (max-width: 767px) {
    .wallets-upgrade-logout-modal .dc-dialog__button {
        height: 3rem;
    }
}

@media (max-width: 1279px) {
    .wallets-upgrade-logout-modal .dc-btn__text {
        font-size: var(--text-size-xxs);
    }
}

[dir='rtl'] .wallets-upgrade-logout-modal__pic {
    transform: scaleX(-1);
}

@media (min-width: 1024px) {
    [dir='ltr'] .wallets-upgrade-logout-modal__pic {
        right: -3rem;
    }
    [dir='rtl'] .wallets-upgrade-logout-modal__pic {
        left: -3rem;
    }
    .wallets-upgrade-logout-modal__pic {
        position: absolute;
        height: 12.8rem;
        width: 23.5rem;
        bottom: 1rem;
    }
}

@media (max-width: 1279px) {
    .wallets-upgrade-logout-modal__pic {
        position: relative;
        width: 100%;
        height: 8.2rem;
        margin-bottom: 1.6rem;
    }
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.wallets-upgrade-completed-modal {
    width: calc(100vw - 2rem);
    max-width: 120rem;
    height: 79.1rem;
    padding-top: 8rem;
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 2.4rem;
}

@media (min-width: 320px) and (max-width: 767px) {
    .wallets-upgrade-completed-modal {
        padding-top: 2.4rem;
        width: 100%;
        height: 100%;
    }
}

.wallets-upgrade-completed-modal__text-container {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 0.8rem;
}

@media (min-width: 320px) and (max-width: 767px) {
    .wallets-upgrade-completed-modal__button {
        width: 100%;
    }
}

.wallets-upgrade-completed-modal__pic {
    width: 100%;
    height: 27.2rem;
}

@media (min-width: 320px) and (max-width: 767px) {
    .wallets-upgrade-completed-modal__pic {
        height: 17rem;
    }
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.crypto-transaction-processing-modal__content {
    height: 100%;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    gap: 2.4rem;
    padding: 2.4rem;
}

@media (max-width: 1279px) {
    .crypto-transaction-processing-modal__content {
        position: absolute;
        top: 50vh;
        transform: translateY(-50%);
        padding: 1.6rem;
    }
}

.crypto-transaction-processing-modal__content-description {
    display: flex;
    flex-direction: column;
    align-items: center;
}

.crypto-transaction-processing-modal__circle {
    position: relative;
    width: 6.4rem;
    height: 6.4rem;
    background: #ffad3a;
    border-radius: 3.2rem;
}

.crypto-transaction-processing-modal__dot {
    position: absolute;
    width: 1rem;
    height: 1rem;
    background: var(--general-main-1);
    border-radius: 0.5rem;
    top: 2.7rem;
}

[dir='ltr'] .crypto-transaction-processing-modal__dot-0 {
    left: 1.2rem;
}

[dir='rtl'] .crypto-transaction-processing-modal__dot-0 {
    right: 1.2rem;
}

[dir='ltr'] .crypto-transaction-processing-modal__dot-1 {
    left: 2.7rem;
}

[dir='rtl'] .crypto-transaction-processing-modal__dot-1 {
    right: 2.7rem;
}

[dir='ltr'] .crypto-transaction-processing-modal__dot-2 {
    left: 4.2rem;
}

[dir='rtl'] .crypto-transaction-processing-modal__dot-2 {
    right: 4.2rem;
}

.dc-mobile-dialog__crypto-transaction-processing-modal {
    display: flex;
    justify-content: center;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.devtools__toggle-button {
    background: #ff444f;
    border: 0px;
    padding: 0px;
    position: fixed;
    z-index: 99999;
    font-size: 1.5em;
    margin: 0.5em;
    cursor: pointer;
    bottom: 0px;
    width: 40px;
    height: 40px;
    border-radius: 20px;
    display: flex;
    justify-content: center;
    align-items: center;
    color: #fff;
    padding-bottom: 2px;
    font-weight: bold;
    transition: all 0.2s;
}

[dir='ltr'] .devtools__toggle-button {
    right: 0px;
}

[dir='rtl'] .devtools__toggle-button {
    left: 0px;
}

.devtools__toggle-button:hover {
    scale: 1.1;
}

.devtools__panel {
    font-size: max(12px, min(1.5vw, 14px));
    font-family: sans-serif;
    display: flex;
    background-color: rgb(11, 21, 33);
    color: #fff;
    height: 290px;
    position: fixed;
    bottom: 0px;
    border-top: 1px solid rgb(63, 78, 96);
    transform-origin: center top;
    box-shadow: rgba(0, 0, 0, 0.3) 0px 0px 20px;
    z-index: 100000;
    transition: all 0.2s ease 0s;
    width: 100%;
    max-height: 90%;
}

[dir='ltr'] .devtools__panel {
    direction: ltr;
    left: 0px;
}

[dir='rtl'] .devtools__panel {
    direction: rtl;
    right: 0px;
}

.devtools__panel--open {
    visibility: visible;
    opacity: 1;
    pointer-events: all;
    transform: translateY(0px) scale(1);
}

.devtools__panel--close {
    visibility: hidden;
    opacity: 0;
    pointer-events: none;
    transform: translateY(15px) scale(1.02);
}

.devtools__panel-left {
    flex: 1 1 500px;
    min-height: 40%;
    max-height: 100%;
    overflow: auto;
    display: flex;
    flex-direction: column;
}

[dir='ltr'] .devtools__panel-left {
    border-right: 1px solid rgb(34, 46, 62);
}

[dir='rtl'] .devtools__panel-left {
    border-left: 1px solid rgb(34, 46, 62);
}

.devtools__panel-right {
    flex: 1 1 500px;
    display: flex;
    flex-direction: column;
    overflow: auto;
    height: 100%;
}

.devtools__close-button {
    -webkit-appearance: none;
    -moz-appearance: none;
    appearance: none;
    font-size: 0.9em;
    font-weight: bold;
    background: rgb(63, 78, 96);
    border: 0px;
    border-radius: 0.3em;
    color: #fff;
    padding: 0.5em;
    cursor: pointer;
    position: absolute;
    z-index: 99999;
    margin: 0.5em;
    bottom: 0px;
}

[dir='ltr'] .devtools__close-button {
    right: 0px;
}

[dir='rtl'] .devtools__close-button {
    left: 0px;
}

.devtools__panel-title {
    padding: 0.5em;
    background: rgb(19, 35, 55);
    position: sticky;
    top: 0px;
    z-index: 1;
}

.devtools__checkbox-container {
    display: flex;
    flex-wrap: wrap;
}

.devtools__checkbox {
    margin: 10px 5px;
}

.devtools__checkbox-label {
    color: #fff;
}

.devtools__endpoint-container {
    margin: 10px;
    gap: 15px;
    display: flex;
    flex-direction: column;
}

.devtools__endpoint-container a {
    color: #ff444f;
}

.devtools__endpoint-container .dc-input__field {
    color: #fff;
}

.devtools__endpoint-container .dc-input__label {
    background: rgb(11, 21, 33);
}

.devtools__endpoint-container .dc-input__field ~ label {
    color: #fff !important;
}

.devtools__endpoint-actions {
    display: flex;
    gap: 15px;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.landscape-blocker {
    /* enable temporary landscape blocker UI in landscape */
    display: flex;
    position: fixed;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    overflow: hidden;
    background: var(--general-main-1);
    align-items: center;
    justify-content: center;
    flex-direction: column;
    color: var(--text-prominent);
    font-size: 1.6rem;
    z-index: 9999;
    font-weight: bold;
    gap: 2.4rem;
}

.landscape-blocker__icon {
    width: 8rem;
    height: 6.2rem;
}

.landscape-blocker__message {
    padding: 1.6rem 11rem;
}

@media screen and (orientation: portrait) {
    .landscape-blocker__message--landscape {
        display: none;
    }
}

.landscape-blocker__message--portrait {
    text-align: center;
    line-height: var(--text-lh-m);
}

@media screen and (orientation: landscape) {
    .landscape-blocker__message--portrait {
        display: none;
    }
}

@media (min-width: 1280px) {
    .landscape-blocker {
        display: none;
    }
}

@media screen and (max-width: 600px) and (max-aspect-ratio: 13/9) {
    .landscape-blocker {
        display: none;
    }
}
