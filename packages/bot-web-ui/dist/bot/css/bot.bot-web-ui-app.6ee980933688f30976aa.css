/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.theme--dark .blocklyDropDownDiv {
    background-color: rgb(194, 194, 194) !important;
    border-color: rgb(194, 194, 194) !important;
}
.theme--dark .zelos-renderer.zelos_renderer-theme .blocklyMainBackground,
.theme--dark .load-strategy__container .blocklyMainBackground,
.theme--dark .zelos-renderer.zelos_renderer-theme rect.blocklyFieldRect.blocklyDropdownRect,
.theme--dark .zelos-renderer.zelos_renderer-theme .blocklyNonEditableText > rect:not(.blocklyDropdownRect),
.theme--dark .zelos-renderer.zelos_renderer-theme .blocklyEditableText > rect:not(.blocklyDropdownRect),
.theme--dark .blocklyPath[fill='#fff'],
.theme--dark .blocklyVariableGet .blocklyPath,
.theme--dark .blocklyOutlinePath {
    fill: #0e0e0e !important;
}
.theme--dark .flyout rect.blocklyFieldRect.blocklyDropdownRect,
.theme--dark .flyout .zelos-renderer.classic-theme .blocklyMainBackground {
    fill: #151816 !important;
}
.theme--dark .zelos-renderer.zelos_renderer-theme .blocklyEditableText > image,
.theme--dark .zelos-renderer.zelos_renderer-theme .blocklyNonEditableText > image {
    filter: unset;
}
.theme--dark .flyout .zelos-renderer.classic-theme .blocklyEditableText > image {
    filter: invert(0);
}
.theme--dark .zelos-renderer.classic-theme .blocklyNonEditableText > rect:not(.blocklyDropdownRect),
.theme--dark .zelos-renderer.classic-theme .blocklyEditableText > rect:not(.blocklyDropdownRect) {
    fill: unset;
}

.flyout .injectionDiv {
    height: 100%;
}

.flyout .zelos-renderer.classic-theme .blocklyMainBackground {
    filter: unset;
}

.zelos-renderer.zelos_renderer-theme,
.flyout .zelos-renderer.classic-theme,
.gtm-search-results,
.load-strategy__container {
    /* Necessary to position the drag surface */
    /* Added as a separate rule with multiple classes to make it more specific
     than a bootstrap rule that selects svg:root. See issue #1275 for context.
  */
    /*
  Don't allow users to select text.  It gets annoying when trying to
  drag a block and selected text moves instead.
  */
    /* Override the default Closure URL. */
    /* Category tree in Toolbox. */
}
@keyframes blinkEffect {
    0% {
        stroke: #ff0000;
        stroke-width: 5px;
    }
    50% {
        stroke: #ffff00;
        stroke-width: 8px;
    }
    100% {
        stroke: #ff0000;
        stroke-width: 5px;
    }
}
.zelos-renderer.zelos_renderer-theme .block--error-highlighted > .blocklyPath,
.flyout .zelos-renderer.classic-theme .block--error-highlighted > .blocklyPath,
.gtm-search-results .block--error-highlighted > .blocklyPath,
.load-strategy__container .block--error-highlighted > .blocklyPath {
    stroke: #ff0000;
    stroke-width: 5px;
}
@keyframes fade-in-out {
    0% {
        stroke-opacity: 0;
    }
    50% {
        stroke-opacity: 1;
        stroke-width: 6px;
    }
    100% {
        stroke-opacity: 0;
    }
}
.zelos-renderer.zelos_renderer-theme .block--execution-highlighted > .blocklyPath,
.flyout .zelos-renderer.classic-theme .block--execution-highlighted > .blocklyPath,
.gtm-search-results .block--execution-highlighted > .blocklyPath,
.load-strategy__container .block--execution-highlighted > .blocklyPath {
    stroke: #89b2af;
    animation: fade-in-out 1.5s;
}
.zelos-renderer.zelos_renderer-theme .block--blink > .blocklyPath,
.flyout .zelos-renderer.classic-theme .block--blink > .blocklyPath,
.gtm-search-results .block--blink > .blocklyPath,
.load-strategy__container .block--blink > .blocklyPath {
    animation: blinkEffect 1s infinite;
}
.zelos-renderer.zelos_renderer-theme .blocklySvg,
.flyout .zelos-renderer.classic-theme .blocklySvg,
.gtm-search-results .blocklySvg,
.load-strategy__container .blocklySvg {
    outline: none;
    overflow: hidden; /* IE overflows by default. */
    position: absolute;
    display: block;
}
.zelos-renderer.zelos_renderer-theme .blocklyRelativeWrapper,
.flyout .zelos-renderer.classic-theme .blocklyRelativeWrapper,
.gtm-search-results .blocklyRelativeWrapper,
.load-strategy__container .blocklyRelativeWrapper {
    position: relative;
    width: 100%;
    height: 100%;
}
.zelos-renderer.zelos_renderer-theme .blocklyWidgetDiv,
.flyout .zelos-renderer.classic-theme .blocklyWidgetDiv,
.gtm-search-results .blocklyWidgetDiv,
.load-strategy__container .blocklyWidgetDiv {
    display: none;
    position: absolute;
    z-index: 99999; /* big value for bootstrap3 compatibility */
}
.zelos-renderer.zelos_renderer-theme .blocklyNonSelectable,
.flyout .zelos-renderer.classic-theme .blocklyNonSelectable,
.gtm-search-results .blocklyNonSelectable,
.load-strategy__container .blocklyNonSelectable {
    user-select: none;
    -moz-user-select: none;
    -webkit-user-select: none;
    -ms-user-select: none;
}
.zelos-renderer.zelos_renderer-theme .blocklyWidgetDiv.fieldTextInput,
.flyout .zelos-renderer.classic-theme .blocklyWidgetDiv.fieldTextInput,
.gtm-search-results .blocklyWidgetDiv.fieldTextInput,
.load-strategy__container .blocklyWidgetDiv.fieldTextInput {
    overflow: hidden;
    border: 1px solid;
    box-sizing: border-box;
    transform-origin: 0 0;
    -ms-transform-origin: 0 0;
    -moz-transform-origin: 0 0;
    -webkit-transform-origin: 0 0;
}
.zelos-renderer.zelos_renderer-theme .blocklyWidgetDiv.fieldTextInput.removableTextInput,
.flyout .zelos-renderer.classic-theme .blocklyWidgetDiv.fieldTextInput.removableTextInput,
.gtm-search-results .blocklyWidgetDiv.fieldTextInput.removableTextInput,
.load-strategy__container .blocklyWidgetDiv.fieldTextInput.removableTextInput {
    overflow: visible;
}
.zelos-renderer.zelos_renderer-theme .blocklyTextDropDownArrow,
.flyout .zelos-renderer.classic-theme .blocklyTextDropDownArrow,
.gtm-search-results .blocklyTextDropDownArrow,
.load-strategy__container .blocklyTextDropDownArrow {
    position: absolute;
}
.zelos-renderer.zelos_renderer-theme .blocklyTextRemoveIcon,
.flyout .zelos-renderer.classic-theme .blocklyTextRemoveIcon,
.gtm-search-results .blocklyTextRemoveIcon,
.load-strategy__container .blocklyTextRemoveIcon {
    position: absolute;
    width: 24px;
    height: 24px;
    top: -40px;
    left: 50%;
    margin-left: -12px;
    cursor: pointer;
}
.zelos-renderer.zelos_renderer-theme .blocklyWsDragSurface,
.flyout .zelos-renderer.classic-theme .blocklyWsDragSurface,
.gtm-search-results .blocklyWsDragSurface,
.load-strategy__container .blocklyWsDragSurface {
    display: none;
    position: absolute;
    top: 0;
    left: 0;
}
.zelos-renderer.zelos_renderer-theme .blocklyWsDragSurface.blocklyOverflowVisible,
.flyout .zelos-renderer.classic-theme .blocklyWsDragSurface.blocklyOverflowVisible,
.gtm-search-results .blocklyWsDragSurface.blocklyOverflowVisible,
.load-strategy__container .blocklyWsDragSurface.blocklyOverflowVisible {
    overflow: visible;
}
.zelos-renderer.zelos_renderer-theme .blocklyTooltipDiv,
.flyout .zelos-renderer.classic-theme .blocklyTooltipDiv,
.gtm-search-results .blocklyTooltipDiv,
.load-strategy__container .blocklyTooltipDiv {
    min-height: 34px;
    background-color: #d6dadb;
    border-radius: 4px;
    color: #333333;
    padding: 8px;
    font-size: 12px;
    font-family: 'IBM Plex Sans', sans-serif;
    line-height: 1.5;
    letter-spacing: normal;
    position: absolute;
    z-index: 100000; /* big value for bootstrap3 compatibility */
}
.zelos-renderer.zelos_renderer-theme .blocklyDropDownDiv,
.flyout .zelos-renderer.classic-theme .blocklyDropDownDiv,
.gtm-search-results .blocklyDropDownDiv,
.load-strategy__container .blocklyDropDownDiv {
    position: fixed;
    left: 0;
    top: 0;
    z-index: 1000;
    display: none;
    border: 1px solid;
    border-radius: 4px;
    box-shadow: 0px 0px 8px 1px rgba(0, 0, 0, 0.3);
    padding: 4px;
    -webkit-user-select: none;
    min-height: 15px;
}
.zelos-renderer.zelos_renderer-theme .blocklyDropDownContent,
.flyout .zelos-renderer.classic-theme .blocklyDropDownContent,
.gtm-search-results .blocklyDropDownContent,
.load-strategy__container .blocklyDropDownContent {
    max-height: 300px;
    overflow: auto;
}
.zelos-renderer.zelos_renderer-theme .blocklyDropDownArrow,
.flyout .zelos-renderer.classic-theme .blocklyDropDownArrow,
.gtm-search-results .blocklyDropDownArrow,
.load-strategy__container .blocklyDropDownArrow {
    position: absolute;
    left: 0;
    top: 0;
    width: 16px;
    height: 16px;
    z-index: -1;
    background-color: inherit;
    border-color: inherit;
}
.zelos-renderer.zelos_renderer-theme .blocklyDropDownButton,
.flyout .zelos-renderer.classic-theme .blocklyDropDownButton,
.gtm-search-results .blocklyDropDownButton,
.load-strategy__container .blocklyDropDownButton {
    display: inline-block;
    float: left;
    padding: 0;
    margin: 4px;
    border-radius: 4px;
    outline: none;
    border: 1px solid;
    transition: box-shadow 0.1s;
    cursor: pointer;
}
.zelos-renderer.zelos_renderer-theme .blocklyDropDownButtonHover,
.flyout .zelos-renderer.classic-theme .blocklyDropDownButtonHover,
.gtm-search-results .blocklyDropDownButtonHover,
.load-strategy__container .blocklyDropDownButtonHover {
    box-shadow: 0px 0px 0px 4px rgba(0, 0, 0, 0.1);
}
.zelos-renderer.zelos_renderer-theme .blocklyDropDownButton:active,
.flyout .zelos-renderer.classic-theme .blocklyDropDownButton:active,
.gtm-search-results .blocklyDropDownButton:active,
.load-strategy__container .blocklyDropDownButton:active {
    box-shadow: 0px 0px 0px 6px rgba(0, 0, 0, 0.1);
}
.zelos-renderer.zelos_renderer-theme .blocklyDropDownButton > img,
.flyout .zelos-renderer.classic-theme .blocklyDropDownButton > img,
.gtm-search-results .blocklyDropDownButton > img,
.load-strategy__container .blocklyDropDownButton > img {
    width: 80%;
    height: 80%;
    margin-top: 5%;
}
.zelos-renderer.zelos_renderer-theme .blocklyDropDownPlaceholder,
.flyout .zelos-renderer.classic-theme .blocklyDropDownPlaceholder,
.gtm-search-results .blocklyDropDownPlaceholder,
.load-strategy__container .blocklyDropDownPlaceholder {
    display: inline-block;
    float: left;
    padding: 0;
    margin: 4px;
}
.zelos-renderer.zelos_renderer-theme .blocklyNumPadButton,
.flyout .zelos-renderer.classic-theme .blocklyNumPadButton,
.gtm-search-results .blocklyNumPadButton,
.load-strategy__container .blocklyNumPadButton {
    display: inline-block;
    float: left;
    padding: 0;
    width: 48px;
    height: 48px;
    margin: 4px;
    border-radius: 4px;
    background: #0e0e0e;
    color: #333333;
    outline: none;
    border: 1px solid #0e0e0e;
    cursor: pointer;
    font-weight: 600;
    font-size: 12px;
    -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
}
.zelos-renderer.zelos_renderer-theme .blocklyNumPadButton > img,
.flyout .zelos-renderer.classic-theme .blocklyNumPadButton > img,
.gtm-search-results .blocklyNumPadButton > img,
.load-strategy__container .blocklyNumPadButton > img {
    margin-top: 10%;
    width: 80%;
    height: 80%;
    filter: invert(1);
}
.zelos-renderer.zelos_renderer-theme .blocklyNumPadButton:active,
.flyout .zelos-renderer.classic-theme .blocklyNumPadButton:active,
.gtm-search-results .blocklyNumPadButton:active,
.load-strategy__container .blocklyNumPadButton:active {
    background: #0e0e0e;
    -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
}
.zelos-renderer.zelos_renderer-theme .arrowTop,
.flyout .zelos-renderer.classic-theme .arrowTop,
.gtm-search-results .arrowTop,
.load-strategy__container .arrowTop {
    border-top: 1px solid;
    border-left: 1px solid;
    border-top-left-radius: 4px;
    border-color: inherit;
}
.zelos-renderer.zelos_renderer-theme .arrowBottom,
.flyout .zelos-renderer.classic-theme .arrowBottom,
.gtm-search-results .arrowBottom,
.load-strategy__container .arrowBottom {
    border-bottom: 1px solid;
    border-right: 1px solid;
    border-bottom-right-radius: 4px;
    border-color: inherit;
}
.zelos-renderer.zelos_renderer-theme .valueReportBox,
.flyout .zelos-renderer.classic-theme .valueReportBox,
.gtm-search-results .valueReportBox,
.load-strategy__container .valueReportBox {
    min-width: 50px;
    max-width: 300px;
    max-height: 200px;
    overflow: auto;
    word-wrap: break-word;
    text-align: center;
    font-size: 0.8em;
}
.zelos-renderer.zelos_renderer-theme .blocklyResizeSE,
.flyout .zelos-renderer.classic-theme .blocklyResizeSE,
.gtm-search-results .blocklyResizeSE,
.load-strategy__container .blocklyResizeSE {
    cursor: se-resize;
    fill: #aaa;
}
.zelos-renderer.zelos_renderer-theme .blocklyResizeSW,
.flyout .zelos-renderer.classic-theme .blocklyResizeSW,
.gtm-search-results .blocklyResizeSW,
.load-strategy__container .blocklyResizeSW {
    cursor: sw-resize;
    fill: #aaa;
}
.zelos-renderer.zelos_renderer-theme .blocklyResizeLine,
.flyout .zelos-renderer.classic-theme .blocklyResizeLine,
.gtm-search-results .blocklyResizeLine,
.load-strategy__container .blocklyResizeLine {
    stroke: #888;
    stroke-width: 1;
}
.zelos-renderer.zelos_renderer-theme .blocklyHighlightedConnectionPath,
.flyout .zelos-renderer.classic-theme .blocklyHighlightedConnectionPath,
.gtm-search-results .blocklyHighlightedConnectionPath,
.load-strategy__container .blocklyHighlightedConnectionPath {
    fill: none;
    stroke: #fc3;
    stroke-width: 4px;
}
.zelos-renderer.zelos_renderer-theme .blocklyPath,
.flyout .zelos-renderer.classic-theme .blocklyPath,
.gtm-search-results .blocklyPath,
.load-strategy__container .blocklyPath {
    stroke-width: 0.4px;
}
.zelos-renderer.zelos_renderer-theme .blocklySelected > .blocklyPath,
.flyout .zelos-renderer.classic-theme .blocklySelected > .blocklyPath,
.gtm-search-results .blocklySelected > .blocklyPath,
.load-strategy__container .blocklySelected > .blocklyPath {
    stroke: #ffc358;
    stroke-width: 3px;
}
.zelos-renderer.zelos_renderer-theme .blocklySelected > .blocklyPathLight,
.flyout .zelos-renderer.classic-theme .blocklySelected > .blocklyPathLight,
.gtm-search-results .blocklySelected > .blocklyPathLight,
.load-strategy__container .blocklySelected > .blocklyPathLight {
    display: none;
}
.zelos-renderer.zelos_renderer-theme .blocklyDraggable,
.flyout .zelos-renderer.classic-theme .blocklyDraggable,
.gtm-search-results .blocklyDraggable,
.load-strategy__container .blocklyDraggable {
    cursor: grab;
    cursor: -webkit-grab;
    cursor: -moz-grab;
}
.zelos-renderer.zelos_renderer-theme .blocklyDraggable image[alt='Collapsed'],
.flyout .zelos-renderer.classic-theme .blocklyDraggable image[alt='Collapsed'],
.gtm-search-results .blocklyDraggable image[alt='Collapsed'],
.load-strategy__container .blocklyDraggable image[alt='Collapsed'] {
    transform: translate(7px);
}
.zelos-renderer.zelos_renderer-theme .blocklyDragging,
.flyout .zelos-renderer.classic-theme .blocklyDragging,
.gtm-search-results .blocklyDragging,
.load-strategy__container .blocklyDragging {
    cursor: grabbing;
    cursor: -webkit-grabbing;
    cursor: -moz-grabbing;
}
.zelos-renderer.zelos_renderer-theme .blocklyDraggable:active,
.zelos-renderer.zelos_renderer-theme .blocklyBlockDragSurface .blocklyDraggable,
.flyout .zelos-renderer.classic-theme .blocklyDraggable:active,
.flyout .zelos-renderer.classic-theme .blocklyBlockDragSurface .blocklyDraggable,
.gtm-search-results .blocklyDraggable:active,
.gtm-search-results .blocklyBlockDragSurface .blocklyDraggable,
.load-strategy__container .blocklyDraggable:active,
.load-strategy__container .blocklyBlockDragSurface .blocklyDraggable {
    cursor: grabbing;
    cursor: -webkit-grabbing;
    cursor: -moz-grabbing;
}
.zelos-renderer.zelos_renderer-theme .blocklyDragging.blocklyDraggingDelete,
.flyout .zelos-renderer.classic-theme .blocklyDragging.blocklyDraggingDelete,
.gtm-search-results .blocklyDragging.blocklyDraggingDelete,
.load-strategy__container .blocklyDragging.blocklyDraggingDelete {
    cursor: url('<<<PATH>>>/handdelete.cur'), auto;
}
.zelos-renderer.zelos_renderer-theme .blocklyDragging.blocklyDraggingMouseThrough,
.flyout .zelos-renderer.classic-theme .blocklyDragging.blocklyDraggingMouseThrough,
.gtm-search-results .blocklyDragging.blocklyDraggingMouseThrough,
.load-strategy__container .blocklyDragging.blocklyDraggingMouseThrough {
    pointer-events: none;
}
.zelos-renderer.zelos_renderer-theme .blocklyToolboxDelete,
.flyout .zelos-renderer.classic-theme .blocklyToolboxDelete,
.gtm-search-results .blocklyToolboxDelete,
.load-strategy__container .blocklyToolboxDelete {
    cursor: url('<<<PATH>>>/handdelete.cur'), auto;
}
.zelos-renderer.zelos_renderer-theme .blocklyToolboxGrab,
.flyout .zelos-renderer.classic-theme .blocklyToolboxGrab,
.gtm-search-results .blocklyToolboxGrab,
.load-strategy__container .blocklyToolboxGrab {
    cursor: grabbing;
    cursor: -webkit-grabbing;
}
.zelos-renderer.zelos_renderer-theme .blocklyDragging > .blocklyPath,
.zelos-renderer.zelos_renderer-theme .blocklyDragging > .blocklyPathLight,
.flyout .zelos-renderer.classic-theme .blocklyDragging > .blocklyPath,
.flyout .zelos-renderer.classic-theme .blocklyDragging > .blocklyPathLight,
.gtm-search-results .blocklyDragging > .blocklyPath,
.gtm-search-results .blocklyDragging > .blocklyPathLight,
.load-strategy__container .blocklyDragging > .blocklyPath,
.load-strategy__container .blocklyDragging > .blocklyPathLight {
    fill-opacity: 1;
    stroke-opacity: 1;
}
.zelos-renderer.zelos_renderer-theme .blocklyDisabled > .blocklyPath,
.flyout .zelos-renderer.classic-theme .blocklyDisabled > .blocklyPath,
.gtm-search-results .blocklyDisabled > .blocklyPath,
.load-strategy__container .blocklyDisabled > .blocklyPath {
    fill-opacity: 0.5;
    stroke-opacity: 0.5;
}
.zelos-renderer.zelos_renderer-theme .blocklyInsertionMarker > .blocklyPath,
.flyout .zelos-renderer.classic-theme .blocklyInsertionMarker > .blocklyPath,
.gtm-search-results .blocklyInsertionMarker > .blocklyPath,
.load-strategy__container .blocklyInsertionMarker > .blocklyPath {
    stroke: none;
}
.zelos-renderer.zelos_renderer-theme .blocklyText,
.flyout .zelos-renderer.classic-theme .blocklyText,
.gtm-search-results .blocklyText,
.load-strategy__container .blocklyText {
    fill: #333333;
    font-family: inherit;
    font-size: 1.63rem;
    font-weight: normal;
    font-stretch: normal;
    font-style: normal;
    line-height: 1.5;
    letter-spacing: normal;
}
.zelos-renderer.zelos_renderer-theme .blocklyTextTruncated,
.flyout .zelos-renderer.classic-theme .blocklyTextTruncated,
.gtm-search-results .blocklyTextTruncated,
.load-strategy__container .blocklyTextTruncated {
    font-size: 11px;
}
.zelos-renderer.zelos_renderer-theme .blocklyNonEditableText > text,
.flyout .zelos-renderer.classic-theme .blocklyNonEditableText > text,
.gtm-search-results .blocklyNonEditableText > text,
.load-strategy__container .blocklyNonEditableText > text {
    pointer-events: none;
}
.zelos-renderer.zelos_renderer-theme .blocklyNonEditableText > text,
.zelos-renderer.zelos_renderer-theme .blocklyEditableText > text,
.flyout .zelos-renderer.classic-theme .blocklyNonEditableText > text,
.flyout .zelos-renderer.classic-theme .blocklyEditableText > text,
.gtm-search-results .blocklyNonEditableText > text,
.gtm-search-results .blocklyEditableText > text,
.load-strategy__container .blocklyNonEditableText > text,
.load-strategy__container .blocklyEditableText > text {
    fill: var(--text-prominent);
}
.zelos-renderer.zelos_renderer-theme .blocklyEditableText > .blocklyEditableLabel,
.flyout .zelos-renderer.classic-theme .blocklyEditableText > .blocklyEditableLabel,
.gtm-search-results .blocklyEditableText > .blocklyEditableLabel,
.load-strategy__container .blocklyEditableText > .blocklyEditableLabel {
    fill: var(--text-prominent);
}
.zelos-renderer.zelos_renderer-theme .blocklyNonEditableText > image,
.zelos-renderer.zelos_renderer-theme .blocklyEditableText > image,
.flyout .zelos-renderer.classic-theme .blocklyNonEditableText > image,
.flyout .zelos-renderer.classic-theme .blocklyEditableText > image,
.gtm-search-results .blocklyNonEditableText > image,
.gtm-search-results .blocklyEditableText > image,
.load-strategy__container .blocklyNonEditableText > image,
.load-strategy__container .blocklyEditableText > image {
    filter: invert(1);
}
.zelos-renderer.zelos_renderer-theme .blocklyDropdownText,
.flyout .zelos-renderer.classic-theme .blocklyDropdownText,
.gtm-search-results .blocklyDropdownText,
.load-strategy__container .blocklyDropdownText {
    fill: var(--text-prominent) !important;
    font-size: 1.6rem;
}
.zelos-renderer.zelos_renderer-theme .blocklyBubbleText,
.flyout .zelos-renderer.classic-theme .blocklyBubbleText,
.gtm-search-results .blocklyBubbleText,
.load-strategy__container .blocklyBubbleText {
    fill: #0e0e0e;
}
.zelos-renderer.zelos_renderer-theme .blocklyFlyout,
.flyout .zelos-renderer.classic-theme .blocklyFlyout,
.gtm-search-results .blocklyFlyout,
.load-strategy__container .blocklyFlyout {
    position: absolute;
    z-index: 20;
}
.zelos-renderer.zelos_renderer-theme .blocklyFlyoutButton,
.flyout .zelos-renderer.classic-theme .blocklyFlyoutButton,
.gtm-search-results .blocklyFlyoutButton,
.load-strategy__container .blocklyFlyoutButton {
    fill: none;
    pointer-events: all;
}
.zelos-renderer.zelos_renderer-theme .blocklyFlyoutButtonBackground,
.flyout .zelos-renderer.classic-theme .blocklyFlyoutButtonBackground,
.gtm-search-results .blocklyFlyoutButtonBackground,
.load-strategy__container .blocklyFlyoutButtonBackground {
    stroke: #c6c6c6;
}
.zelos-renderer.zelos_renderer-theme .blocklyFlyoutButton .blocklyText,
.flyout .zelos-renderer.classic-theme .blocklyFlyoutButton .blocklyText,
.gtm-search-results .blocklyFlyoutButton .blocklyText,
.load-strategy__container .blocklyFlyoutButton .blocklyText {
    fill: #0e0e0e;
}
.zelos-renderer.zelos_renderer-theme .blocklyFlyoutButtonShadow,
.flyout .zelos-renderer.classic-theme .blocklyFlyoutButtonShadow,
.gtm-search-results .blocklyFlyoutButtonShadow,
.load-strategy__container .blocklyFlyoutButtonShadow {
    fill: transparent;
}
.zelos-renderer.zelos_renderer-theme .blocklyFlyoutButton:hover,
.flyout .zelos-renderer.classic-theme .blocklyFlyoutButton:hover,
.gtm-search-results .blocklyFlyoutButton:hover,
.load-strategy__container .blocklyFlyoutButton:hover {
    fill: #ffffff;
    cursor: pointer;
}
.zelos-renderer.zelos_renderer-theme .blocklyFlyoutLabel,
.flyout .zelos-renderer.classic-theme .blocklyFlyoutLabel,
.gtm-search-results .blocklyFlyoutLabel,
.load-strategy__container .blocklyFlyoutLabel {
    cursor: default;
}
.zelos-renderer.zelos_renderer-theme .blocklyFlyoutLabelBackground,
.flyout .zelos-renderer.classic-theme .blocklyFlyoutLabelBackground,
.gtm-search-results .blocklyFlyoutLabelBackground,
.load-strategy__container .blocklyFlyoutLabelBackground {
    opacity: 0;
}
.zelos-renderer.zelos_renderer-theme .blocklyFlyoutLabelText,
.flyout .zelos-renderer.classic-theme .blocklyFlyoutLabelText,
.gtm-search-results .blocklyFlyoutLabelText,
.load-strategy__container .blocklyFlyoutLabelText {
    font-size: 14px;
    fill: #575e75;
    font-weight: bold;
}
.zelos-renderer.zelos_renderer-theme .blocklySvg text,
.zelos-renderer.zelos_renderer-theme .blocklyBlockDragSurface text,
.zelos-renderer.zelos_renderer-theme .blocklyFlyout text,
.zelos-renderer.zelos_renderer-theme .blocklyToolboxDiv text,
.flyout .zelos-renderer.classic-theme .blocklySvg text,
.flyout .zelos-renderer.classic-theme .blocklyBlockDragSurface text,
.flyout .zelos-renderer.classic-theme .blocklyFlyout text,
.flyout .zelos-renderer.classic-theme .blocklyToolboxDiv text,
.gtm-search-results .blocklySvg text,
.gtm-search-results .blocklyBlockDragSurface text,
.gtm-search-results .blocklyFlyout text,
.gtm-search-results .blocklyToolboxDiv text,
.load-strategy__container .blocklySvg text,
.load-strategy__container .blocklyBlockDragSurface text,
.load-strategy__container .blocklyFlyout text,
.load-strategy__container .blocklyToolboxDiv text {
    user-select: none;
    -moz-user-select: none;
    -webkit-user-select: none;
    cursor: inherit;
}
.zelos-renderer.zelos_renderer-theme .blocklyHidden,
.flyout .zelos-renderer.classic-theme .blocklyHidden,
.gtm-search-results .blocklyHidden,
.load-strategy__container .blocklyHidden {
    display: none;
}
.zelos-renderer.zelos_renderer-theme .blocklyFieldDropdown:not(.blocklyHidden),
.flyout .zelos-renderer.classic-theme .blocklyFieldDropdown:not(.blocklyHidden),
.gtm-search-results .blocklyFieldDropdown:not(.blocklyHidden),
.load-strategy__container .blocklyFieldDropdown:not(.blocklyHidden) {
    display: block;
}
.zelos-renderer.zelos_renderer-theme .blocklyIconGroup,
.flyout .zelos-renderer.classic-theme .blocklyIconGroup,
.gtm-search-results .blocklyIconGroup,
.load-strategy__container .blocklyIconGroup {
    cursor: default;
}
.zelos-renderer.zelos_renderer-theme .blocklyIconGroup:not(:hover),
.zelos-renderer.zelos_renderer-theme .blocklyIconGroupReadonly,
.flyout .zelos-renderer.classic-theme .blocklyIconGroup:not(:hover),
.flyout .zelos-renderer.classic-theme .blocklyIconGroupReadonly,
.gtm-search-results .blocklyIconGroup:not(:hover),
.gtm-search-results .blocklyIconGroupReadonly,
.load-strategy__container .blocklyIconGroup:not(:hover),
.load-strategy__container .blocklyIconGroupReadonly {
    opacity: 0.6;
}
.zelos-renderer.zelos_renderer-theme .blocklyIconShape,
.flyout .zelos-renderer.classic-theme .blocklyIconShape,
.gtm-search-results .blocklyIconShape,
.load-strategy__container .blocklyIconShape {
    fill: #00f;
    stroke: #fff;
    stroke-width: 1px;
}
.zelos-renderer.zelos_renderer-theme .blocklyIconSymbol,
.flyout .zelos-renderer.classic-theme .blocklyIconSymbol,
.gtm-search-results .blocklyIconSymbol,
.load-strategy__container .blocklyIconSymbol {
    fill: #fff;
}
.zelos-renderer.zelos_renderer-theme .blocklyMinimalBody,
.flyout .zelos-renderer.classic-theme .blocklyMinimalBody,
.gtm-search-results .blocklyMinimalBody,
.load-strategy__container .blocklyMinimalBody {
    margin: 0;
    padding: 0;
}
.zelos-renderer.zelos_renderer-theme .blocklyCommentForeignObject,
.flyout .zelos-renderer.classic-theme .blocklyCommentForeignObject,
.gtm-search-results .blocklyCommentForeignObject,
.load-strategy__container .blocklyCommentForeignObject {
    position: relative;
    z-index: 0;
}
.zelos-renderer.zelos_renderer-theme .blocklyCommentRect,
.flyout .zelos-renderer.classic-theme .blocklyCommentRect,
.gtm-search-results .blocklyCommentRect,
.load-strategy__container .blocklyCommentRect {
    fill: #e7de8e;
    stroke: #bca903;
    stroke-width: 1px;
}
.zelos-renderer.zelos_renderer-theme .blocklyCommentTarget,
.flyout .zelos-renderer.classic-theme .blocklyCommentTarget,
.gtm-search-results .blocklyCommentTarget,
.load-strategy__container .blocklyCommentTarget {
    fill: transparent;
    stroke: #bca903;
}
.zelos-renderer.zelos_renderer-theme .blocklyCommentTargetFocused,
.flyout .zelos-renderer.classic-theme .blocklyCommentTargetFocused,
.gtm-search-results .blocklyCommentTargetFocused,
.load-strategy__container .blocklyCommentTargetFocused {
    fill: none;
}
.zelos-renderer.zelos_renderer-theme .blocklyCommentHandleTarget,
.flyout .zelos-renderer.classic-theme .blocklyCommentHandleTarget,
.gtm-search-results .blocklyCommentHandleTarget,
.load-strategy__container .blocklyCommentHandleTarget {
    fill: none;
}
.zelos-renderer.zelos_renderer-theme .blocklyCommentHandleTargetFocused,
.flyout .zelos-renderer.classic-theme .blocklyCommentHandleTargetFocused,
.gtm-search-results .blocklyCommentHandleTargetFocused,
.load-strategy__container .blocklyCommentHandleTargetFocused {
    fill: transparent;
}
.zelos-renderer.zelos_renderer-theme .blocklyFocused > .blocklyCommentRect,
.flyout .zelos-renderer.classic-theme .blocklyFocused > .blocklyCommentRect,
.gtm-search-results .blocklyFocused > .blocklyCommentRect,
.load-strategy__container .blocklyFocused > .blocklyCommentRect {
    fill: #b9b272;
    stroke: #b9b272;
}
.zelos-renderer.zelos_renderer-theme .blocklySelected > .blocklyCommentTarget,
.flyout .zelos-renderer.classic-theme .blocklySelected > .blocklyCommentTarget,
.gtm-search-results .blocklySelected > .blocklyCommentTarget,
.load-strategy__container .blocklySelected > .blocklyCommentTarget {
    stroke: #fc3;
    stroke-width: 3px;
}
.zelos-renderer.zelos_renderer-theme .blocklyCommentTextarea,
.flyout .zelos-renderer.classic-theme .blocklyCommentTextarea,
.gtm-search-results .blocklyCommentTextarea,
.load-strategy__container .blocklyCommentTextarea {
    background-color: #fef49c;
    border: 0;
    outline: 0;
    margin: 0;
    padding: 3px;
    resize: none;
    display: block;
    overflow: hidden;
}
.zelos-renderer.zelos_renderer-theme .blocklyCommentDeleteIcon,
.flyout .zelos-renderer.classic-theme .blocklyCommentDeleteIcon,
.gtm-search-results .blocklyCommentDeleteIcon,
.load-strategy__container .blocklyCommentDeleteIcon {
    cursor: pointer;
    fill: #000;
    display: none;
}
.zelos-renderer.zelos_renderer-theme .blocklySelected > .blocklyCommentDeleteIcon,
.flyout .zelos-renderer.classic-theme .blocklySelected > .blocklyCommentDeleteIcon,
.gtm-search-results .blocklySelected > .blocklyCommentDeleteIcon,
.load-strategy__container .blocklySelected > .blocklyCommentDeleteIcon {
    display: block;
}
.zelos-renderer.zelos_renderer-theme .blocklyDeleteIconShape,
.flyout .zelos-renderer.classic-theme .blocklyDeleteIconShape,
.gtm-search-results .blocklyDeleteIconShape,
.load-strategy__container .blocklyDeleteIconShape {
    fill: #000;
    stroke: #000;
    stroke-width: 1px;
}
.zelos-renderer.zelos_renderer-theme .blocklyDeleteIconShape.blocklyDeleteIconHighlighted,
.flyout .zelos-renderer.classic-theme .blocklyDeleteIconShape.blocklyDeleteIconHighlighted,
.gtm-search-results .blocklyDeleteIconShape.blocklyDeleteIconHighlighted,
.load-strategy__container .blocklyDeleteIconShape.blocklyDeleteIconHighlighted {
    stroke: #fc3;
}
.zelos-renderer.zelos_renderer-theme .scratchCommentForeignObject,
.flyout .zelos-renderer.classic-theme .scratchCommentForeignObject,
.gtm-search-results .scratchCommentForeignObject,
.load-strategy__container .scratchCommentForeignObject {
    position: relative;
}
.zelos-renderer.zelos_renderer-theme .scratchCommentBody,
.flyout .zelos-renderer.classic-theme .scratchCommentBody,
.gtm-search-results .scratchCommentBody,
.load-strategy__container .scratchCommentBody {
    background-color: #fef49c;
    border-radius: 4px;
}
.zelos-renderer.zelos_renderer-theme .scratchCommentRect,
.flyout .zelos-renderer.classic-theme .scratchCommentRect,
.gtm-search-results .scratchCommentRect,
.load-strategy__container .scratchCommentRect {
    fill: #fef49c;
}
.zelos-renderer.zelos_renderer-theme .scratchCommentTarget,
.flyout .zelos-renderer.classic-theme .scratchCommentTarget,
.gtm-search-results .scratchCommentTarget,
.load-strategy__container .scratchCommentTarget {
    fill: transparent;
}
.zelos-renderer.zelos_renderer-theme .scratchWorkspaceCommentBorder,
.flyout .zelos-renderer.classic-theme .scratchWorkspaceCommentBorder,
.gtm-search-results .scratchWorkspaceCommentBorder,
.load-strategy__container .scratchWorkspaceCommentBorder {
    stroke: #bca903;
    stroke-width: 1px;
}
.zelos-renderer.zelos_renderer-theme .scratchCommentTargetFocused,
.flyout .zelos-renderer.classic-theme .scratchCommentTargetFocused,
.gtm-search-results .scratchCommentTargetFocused,
.load-strategy__container .scratchCommentTargetFocused {
    fill: none;
}
.zelos-renderer.zelos_renderer-theme .scratchCommentTopBar,
.flyout .zelos-renderer.classic-theme .scratchCommentTopBar,
.gtm-search-results .scratchCommentTopBar,
.load-strategy__container .scratchCommentTopBar {
    fill: #000000;
    fill-opacity: 0.1;
}
.zelos-renderer.zelos_renderer-theme .scratchCommentText,
.flyout .zelos-renderer.classic-theme .scratchCommentText,
.gtm-search-results .scratchCommentText,
.load-strategy__container .scratchCommentText {
    font-size: 12px;
    font-weight: 400;
}
.zelos-renderer.zelos_renderer-theme .scratchCommentTextarea,
.flyout .zelos-renderer.classic-theme .scratchCommentTextarea,
.gtm-search-results .scratchCommentTextarea,
.load-strategy__container .scratchCommentTextarea {
    background-color: #fef49c;
    border: 0;
    outline: 0;
    padding: 0;
    resize: none;
    overflow: hidden;
}
.zelos-renderer.zelos_renderer-theme .scratchCommentResizeSE,
.flyout .zelos-renderer.classic-theme .scratchCommentResizeSE,
.gtm-search-results .scratchCommentResizeSE,
.load-strategy__container .scratchCommentResizeSE {
    cursor: se-resize;
    fill: transparent;
}
.zelos-renderer.zelos_renderer-theme .scratchCommentResizeSW,
.flyout .zelos-renderer.classic-theme .scratchCommentResizeSW,
.gtm-search-results .scratchCommentResizeSW,
.load-strategy__container .scratchCommentResizeSW {
    cursor: sw-resize;
    fill: transparent;
}
.zelos-renderer.zelos_renderer-theme .blocklyHtmlInput,
.flyout .zelos-renderer.classic-theme .blocklyHtmlInput,
.gtm-search-results .blocklyHtmlInput,
.load-strategy__container .blocklyHtmlInput {
    border: none;
    font-size: 12px;
    height: 100%;
    margin: 0;
    outline: none;
    box-sizing: border-box;
    width: 100%;
    text-align: center;
    font-weight: 500;
}
.zelos-renderer.zelos_renderer-theme .blocklyMainBackground,
.flyout .zelos-renderer.classic-theme .blocklyMainBackground,
.gtm-search-results .blocklyMainBackground,
.load-strategy__container .blocklyMainBackground {
    stroke-width: 0;
    fill: #fff;
}
.zelos-renderer.zelos_renderer-theme .blocklyMutatorBackground,
.flyout .zelos-renderer.classic-theme .blocklyMutatorBackground,
.gtm-search-results .blocklyMutatorBackground,
.load-strategy__container .blocklyMutatorBackground {
    fill: #fff;
    stroke: #fff;
    stroke-width: 1;
}
.zelos-renderer.zelos_renderer-theme .blocklyFlyoutBackground,
.flyout .zelos-renderer.classic-theme .blocklyFlyoutBackground,
.gtm-search-results .blocklyFlyoutBackground,
.load-strategy__container .blocklyFlyoutBackground {
    fill: #0e0e0e;
    fill-opacity: 0.8;
}
.zelos-renderer.zelos_renderer-theme .blocklyMainWorkspaceScrollbar,
.flyout .zelos-renderer.classic-theme .blocklyMainWorkspaceScrollbar,
.gtm-search-results .blocklyMainWorkspaceScrollbar,
.load-strategy__container .blocklyMainWorkspaceScrollbar {
    z-index: 20;
}
.zelos-renderer.zelos_renderer-theme .blocklyFlyoutScrollbar,
.flyout .zelos-renderer.classic-theme .blocklyFlyoutScrollbar,
.gtm-search-results .blocklyFlyoutScrollbar,
.load-strategy__container .blocklyFlyoutScrollbar {
    z-index: 30;
}
.zelos-renderer.zelos_renderer-theme .blocklyScrollbarHorizontal,
.zelos-renderer.zelos_renderer-theme .blocklyScrollbarVertical,
.flyout .zelos-renderer.classic-theme .blocklyScrollbarHorizontal,
.flyout .zelos-renderer.classic-theme .blocklyScrollbarVertical,
.gtm-search-results .blocklyScrollbarHorizontal,
.gtm-search-results .blocklyScrollbarVertical,
.load-strategy__container .blocklyScrollbarHorizontal,
.load-strategy__container .blocklyScrollbarVertical {
    position: absolute;
    outline: none;
}
.zelos-renderer.zelos_renderer-theme .blocklyScrollbarBackground,
.flyout .zelos-renderer.classic-theme .blocklyScrollbarBackground,
.gtm-search-results .blocklyScrollbarBackground,
.load-strategy__container .blocklyScrollbarBackground {
    opacity: 0;
}
.zelos-renderer.zelos_renderer-theme .blocklyScrollbarHandle,
.flyout .zelos-renderer.classic-theme .blocklyScrollbarHandle,
.gtm-search-results .blocklyScrollbarHandle,
.load-strategy__container .blocklyScrollbarHandle {
    fill: #0e0e0e;
}
.zelos-renderer.zelos_renderer-theme .blocklyScrollbarBackground:hover + .blocklyScrollbarHandle,
.zelos-renderer.zelos_renderer-theme .blocklyScrollbarHandle:hover,
.flyout .zelos-renderer.classic-theme .blocklyScrollbarBackground:hover + .blocklyScrollbarHandle,
.flyout .zelos-renderer.classic-theme .blocklyScrollbarHandle:hover,
.gtm-search-results .blocklyScrollbarBackground:hover + .blocklyScrollbarHandle,
.gtm-search-results .blocklyScrollbarHandle:hover,
.load-strategy__container .blocklyScrollbarBackground:hover + .blocklyScrollbarHandle,
.load-strategy__container .blocklyScrollbarHandle:hover {
    fill: #0e0e0e;
}
.zelos-renderer.zelos_renderer-theme .blocklyZoom > image,
.flyout .zelos-renderer.classic-theme .blocklyZoom > image,
.gtm-search-results .blocklyZoom > image,
.load-strategy__container .blocklyZoom > image {
    opacity: 1;
}
.zelos-renderer.zelos_renderer-theme .blocklyFlyout .blocklyScrollbarHandle,
.flyout .zelos-renderer.classic-theme .blocklyFlyout .blocklyScrollbarHandle,
.gtm-search-results .blocklyFlyout .blocklyScrollbarHandle,
.load-strategy__container .blocklyFlyout .blocklyScrollbarHandle {
    fill: #bbb;
}
.zelos-renderer.zelos_renderer-theme .blocklyFlyout .blocklyScrollbarBackground:hover + .blocklyScrollbarHandle,
.zelos-renderer.zelos_renderer-theme .blocklyFlyout .blocklyScrollbarHandle:hover,
.flyout .zelos-renderer.classic-theme .blocklyFlyout .blocklyScrollbarBackground:hover + .blocklyScrollbarHandle,
.flyout .zelos-renderer.classic-theme .blocklyFlyout .blocklyScrollbarHandle:hover,
.gtm-search-results .blocklyFlyout .blocklyScrollbarBackground:hover + .blocklyScrollbarHandle,
.gtm-search-results .blocklyFlyout .blocklyScrollbarHandle:hover,
.load-strategy__container .blocklyFlyout .blocklyScrollbarBackground:hover + .blocklyScrollbarHandle,
.load-strategy__container .blocklyFlyout .blocklyScrollbarHandle:hover {
    fill: #aaa;
}
.zelos-renderer.zelos_renderer-theme .blocklyInvalidInput,
.flyout .zelos-renderer.classic-theme .blocklyInvalidInput,
.gtm-search-results .blocklyInvalidInput,
.load-strategy__container .blocklyInvalidInput {
    background: #faa;
}
.zelos-renderer.zelos_renderer-theme .blocklyAngleCircle,
.flyout .zelos-renderer.classic-theme .blocklyAngleCircle,
.gtm-search-results .blocklyAngleCircle,
.load-strategy__container .blocklyAngleCircle {
    stroke: #3373cc;
    stroke-width: 1;
    fill: #4280d7;
}
.zelos-renderer.zelos_renderer-theme .blocklyAngleCenterPoint,
.flyout .zelos-renderer.classic-theme .blocklyAngleCenterPoint,
.gtm-search-results .blocklyAngleCenterPoint,
.load-strategy__container .blocklyAngleCenterPoint {
    stroke: #fff;
    stroke-width: 1;
    fill: #fff;
}
.zelos-renderer.zelos_renderer-theme .blocklyAngleDragHandle,
.flyout .zelos-renderer.classic-theme .blocklyAngleDragHandle,
.gtm-search-results .blocklyAngleDragHandle,
.load-strategy__container .blocklyAngleDragHandle {
    stroke: #fff;
    stroke-width: 5;
    stroke-opacity: 0.25;
    fill: #fff;
    cursor: pointer;
}
.zelos-renderer.zelos_renderer-theme .blocklyAngleDragArrow,
.flyout .zelos-renderer.classic-theme .blocklyAngleDragArrow,
.gtm-search-results .blocklyAngleDragArrow,
.load-strategy__container .blocklyAngleDragArrow {
    pointer-events: none;
}
.zelos-renderer.zelos_renderer-theme .blocklyAngleMarks,
.flyout .zelos-renderer.classic-theme .blocklyAngleMarks,
.gtm-search-results .blocklyAngleMarks,
.load-strategy__container .blocklyAngleMarks {
    stroke: #fff;
    stroke-width: 1;
    stroke-opacity: 0.5;
}
.zelos-renderer.zelos_renderer-theme .blocklyAngleGauge,
.flyout .zelos-renderer.classic-theme .blocklyAngleGauge,
.gtm-search-results .blocklyAngleGauge,
.load-strategy__container .blocklyAngleGauge {
    fill: #fff;
    fill-opacity: 0.2;
}
.zelos-renderer.zelos_renderer-theme .blocklyAngleLine,
.flyout .zelos-renderer.classic-theme .blocklyAngleLine,
.gtm-search-results .blocklyAngleLine,
.load-strategy__container .blocklyAngleLine {
    stroke: #fff;
    stroke-width: 1;
    stroke-linecap: round;
    pointer-events: none;
}
.zelos-renderer.zelos_renderer-theme .blocklyContextMenu,
.flyout .zelos-renderer.classic-theme .blocklyContextMenu,
.gtm-search-results .blocklyContextMenu,
.load-strategy__container .blocklyContextMenu {
    border-radius: 4px;
    max-height: 100%;
    min-width: 20rem;
}
.zelos-renderer.zelos_renderer-theme .blocklyDropdownMenu,
.flyout .zelos-renderer.classic-theme .blocklyDropdownMenu,
.gtm-search-results .blocklyDropdownMenu,
.load-strategy__container .blocklyDropdownMenu {
    padding: 0 !important;
}
.zelos-renderer.zelos_renderer-theme .blocklyDropDownNumPad,
.flyout .zelos-renderer.classic-theme .blocklyDropDownNumPad,
.gtm-search-results .blocklyDropDownNumPad,
.load-strategy__container .blocklyDropDownNumPad {
    background-color: #0e0e0e;
}
.zelos-renderer.zelos_renderer-theme .blocklyWidgetDiv .goog-option-selected .goog-menuitem-checkbox,
.zelos-renderer.zelos_renderer-theme .blocklyWidgetDiv .goog-option-selected .goog-menuitem-icon,
.flyout .zelos-renderer.classic-theme .blocklyWidgetDiv .goog-option-selected .goog-menuitem-checkbox,
.flyout .zelos-renderer.classic-theme .blocklyWidgetDiv .goog-option-selected .goog-menuitem-icon,
.gtm-search-results .blocklyWidgetDiv .goog-option-selected .goog-menuitem-checkbox,
.gtm-search-results .blocklyWidgetDiv .goog-option-selected .goog-menuitem-icon,
.load-strategy__container .blocklyWidgetDiv .goog-option-selected .goog-menuitem-checkbox,
.load-strategy__container .blocklyWidgetDiv .goog-option-selected .goog-menuitem-icon {
    background: url('<<<PATH>>>/sprites.png') no-repeat -48px -16px !important;
}
.zelos-renderer.zelos_renderer-theme .blocklyToolboxDiv,
.flyout .zelos-renderer.classic-theme .blocklyToolboxDiv,
.gtm-search-results .blocklyToolboxDiv,
.load-strategy__container .blocklyToolboxDiv {
    background-color: #0e0e0e;
    color: #0e0e0e;
    overflow-x: visible;
    overflow-y: auto;
    position: absolute;
    z-index: 40; /* so blocks go over toolbox when dragging */
    -webkit-tap-highlight-color: transparent; /* issue #1345 */
}
.zelos-renderer.zelos_renderer-theme .blocklyTreeRoot,
.flyout .zelos-renderer.classic-theme .blocklyTreeRoot,
.gtm-search-results .blocklyTreeRoot,
.load-strategy__container .blocklyTreeRoot {
    padding: 4px 0;
}
.zelos-renderer.zelos_renderer-theme .blocklyTreeRoot:focus,
.flyout .zelos-renderer.classic-theme .blocklyTreeRoot:focus,
.gtm-search-results .blocklyTreeRoot:focus,
.load-strategy__container .blocklyTreeRoot:focus {
    outline: none;
}
.zelos-renderer.zelos_renderer-theme .blocklyTreeRow,
.flyout .zelos-renderer.classic-theme .blocklyTreeRow,
.gtm-search-results .blocklyTreeRow,
.load-strategy__container .blocklyTreeRow {
    height: 22px;
    line-height: 22px;
    margin-bottom: 3px;
    padding-right: 8px;
    white-space: nowrap;
}
.zelos-renderer.zelos_renderer-theme .blocklyHorizontalTree,
.flyout .zelos-renderer.classic-theme .blocklyHorizontalTree,
.gtm-search-results .blocklyHorizontalTree,
.load-strategy__container .blocklyHorizontalTree {
    float: left;
    margin: 1px 5px 8px 0;
}
.zelos-renderer.zelos_renderer-theme .blocklyHorizontalTreeRtl,
.flyout .zelos-renderer.classic-theme .blocklyHorizontalTreeRtl,
.gtm-search-results .blocklyHorizontalTreeRtl,
.load-strategy__container .blocklyHorizontalTreeRtl {
    float: right;
    margin: 1px 0 8px 5px;
}
.zelos-renderer.zelos_renderer-theme .blocklyToolboxDiv[dir='RTL'] .blocklyTreeRow,
.flyout .zelos-renderer.classic-theme .blocklyToolboxDiv[dir='RTL'] .blocklyTreeRow,
.gtm-search-results .blocklyToolboxDiv[dir='RTL'] .blocklyTreeRow,
.load-strategy__container .blocklyToolboxDiv[dir='RTL'] .blocklyTreeRow {
    margin-left: 8px;
}
.zelos-renderer.zelos_renderer-theme .blocklyTreeRow:not(.blocklyTreeSelected):hover,
.flyout .zelos-renderer.classic-theme .blocklyTreeRow:not(.blocklyTreeSelected):hover,
.gtm-search-results .blocklyTreeRow:not(.blocklyTreeSelected):hover,
.load-strategy__container .blocklyTreeRow:not(.blocklyTreeSelected):hover {
    background-color: #e4e4e4;
}
.zelos-renderer.zelos_renderer-theme .blocklyTreeSeparator,
.flyout .zelos-renderer.classic-theme .blocklyTreeSeparator,
.gtm-search-results .blocklyTreeSeparator,
.load-strategy__container .blocklyTreeSeparator {
    border-bottom: solid #e5e5e5 1px;
    height: 0;
    margin: 5px 0;
}
.zelos-renderer.zelos_renderer-theme .blocklyTreeSeparatorHorizontal,
.flyout .zelos-renderer.classic-theme .blocklyTreeSeparatorHorizontal,
.gtm-search-results .blocklyTreeSeparatorHorizontal,
.load-strategy__container .blocklyTreeSeparatorHorizontal {
    border-right: solid #e5e5e5 1px;
    width: 0;
    padding: 5px 0;
    margin: 0 5px;
}
.zelos-renderer.zelos_renderer-theme .blocklyTreeIcon,
.flyout .zelos-renderer.classic-theme .blocklyTreeIcon,
.gtm-search-results .blocklyTreeIcon,
.load-strategy__container .blocklyTreeIcon {
    background-image: url('<<<PATH>>>/sprites.png');
    height: 16px;
    vertical-align: middle;
    width: 16px;
}
.zelos-renderer.zelos_renderer-theme .blocklyTreeIconClosedLtr,
.flyout .zelos-renderer.classic-theme .blocklyTreeIconClosedLtr,
.gtm-search-results .blocklyTreeIconClosedLtr,
.load-strategy__container .blocklyTreeIconClosedLtr {
    background-position: -32px -1px;
}
.zelos-renderer.zelos_renderer-theme .blocklyTreeIconClosedRtl,
.flyout .zelos-renderer.classic-theme .blocklyTreeIconClosedRtl,
.gtm-search-results .blocklyTreeIconClosedRtl,
.load-strategy__container .blocklyTreeIconClosedRtl {
    background-position: 0px -1px;
}
.zelos-renderer.zelos_renderer-theme .blocklyTreeIconOpen,
.flyout .zelos-renderer.classic-theme .blocklyTreeIconOpen,
.gtm-search-results .blocklyTreeIconOpen,
.load-strategy__container .blocklyTreeIconOpen {
    background-position: -16px -1px;
}
.zelos-renderer.zelos_renderer-theme .blocklyTreeSelected > .blocklyTreeIconClosedLtr,
.flyout .zelos-renderer.classic-theme .blocklyTreeSelected > .blocklyTreeIconClosedLtr,
.gtm-search-results .blocklyTreeSelected > .blocklyTreeIconClosedLtr,
.load-strategy__container .blocklyTreeSelected > .blocklyTreeIconClosedLtr {
    background-position: -32px -17px;
}
.zelos-renderer.zelos_renderer-theme .blocklyTreeSelected > .blocklyTreeIconClosedRtl,
.flyout .zelos-renderer.classic-theme .blocklyTreeSelected > .blocklyTreeIconClosedRtl,
.gtm-search-results .blocklyTreeSelected > .blocklyTreeIconClosedRtl,
.load-strategy__container .blocklyTreeSelected > .blocklyTreeIconClosedRtl {
    background-position: 0px -17px;
}
.zelos-renderer.zelos_renderer-theme .blocklyTreeSelected > .blocklyTreeIconOpen,
.flyout .zelos-renderer.classic-theme .blocklyTreeSelected > .blocklyTreeIconOpen,
.gtm-search-results .blocklyTreeSelected > .blocklyTreeIconOpen,
.load-strategy__container .blocklyTreeSelected > .blocklyTreeIconOpen {
    background-position: -16px -17px;
}
.zelos-renderer.zelos_renderer-theme .blocklyTreeIconNone,
.zelos-renderer.zelos_renderer-theme .blocklyTreeSelected > .blocklyTreeIconNone,
.flyout .zelos-renderer.classic-theme .blocklyTreeIconNone,
.flyout .zelos-renderer.classic-theme .blocklyTreeSelected > .blocklyTreeIconNone,
.gtm-search-results .blocklyTreeIconNone,
.gtm-search-results .blocklyTreeSelected > .blocklyTreeIconNone,
.load-strategy__container .blocklyTreeIconNone,
.load-strategy__container .blocklyTreeSelected > .blocklyTreeIconNone {
    background-position: -48px -1px;
}
.zelos-renderer.zelos_renderer-theme .blocklyTreeLabel,
.flyout .zelos-renderer.classic-theme .blocklyTreeLabel,
.gtm-search-results .blocklyTreeLabel,
.load-strategy__container .blocklyTreeLabel {
    cursor: default;
    font-size: 16px;
    padding: 0 3px;
    vertical-align: middle;
}
.zelos-renderer.zelos_renderer-theme .blocklyToolboxDelete .blocklyTreeLabel,
.flyout .zelos-renderer.classic-theme .blocklyToolboxDelete .blocklyTreeLabel,
.gtm-search-results .blocklyToolboxDelete .blocklyTreeLabel,
.load-strategy__container .blocklyToolboxDelete .blocklyTreeLabel {
    cursor: url('<<<PATH>>>/handdelete.cur'), auto;
}
.zelos-renderer.zelos_renderer-theme .blocklyTreeSelected .blocklyTreeLabel,
.flyout .zelos-renderer.classic-theme .blocklyTreeSelected .blocklyTreeLabel,
.gtm-search-results .blocklyTreeSelected .blocklyTreeLabel,
.load-strategy__container .blocklyTreeSelected .blocklyTreeLabel {
    color: #fff;
}
.zelos-renderer.zelos_renderer-theme .blocklyDropDownDiv .goog-slider-horizontal,
.flyout .zelos-renderer.classic-theme .blocklyDropDownDiv .goog-slider-horizontal,
.gtm-search-results .blocklyDropDownDiv .goog-slider-horizontal,
.load-strategy__container .blocklyDropDownDiv .goog-slider-horizontal {
    margin: 8px;
    height: 22px;
    width: 150px;
    position: relative;
    outline: none;
    border-radius: 11px;
    margin-bottom: 20px;
}
.zelos-renderer.zelos_renderer-theme .blocklyDropDownDiv .goog-slider-horizontal .goog-slider-thumb,
.flyout .zelos-renderer.classic-theme .blocklyDropDownDiv .goog-slider-horizontal .goog-slider-thumb,
.gtm-search-results .blocklyDropDownDiv .goog-slider-horizontal .goog-slider-thumb,
.load-strategy__container .blocklyDropDownDiv .goog-slider-horizontal .goog-slider-thumb {
    width: 26px;
    height: 26px;
    top: -1px;
    position: absolute;
    background-color: #ffffff;
    border-radius: 100%;
    -webkit-box-shadow: 0 0 0 4px rgba(0, 0, 0, 0.15);
    -moz-box-shadow: 0 0 0 4px rgba(0, 0, 0, 0.15);
    box-shadow: 0 0 0 4px rgba(0, 0, 0, 0.15);
}
.zelos-renderer.zelos_renderer-theme .scratchEyedropper,
.flyout .zelos-renderer.classic-theme .scratchEyedropper,
.gtm-search-results .scratchEyedropper,
.load-strategy__container .scratchEyedropper {
    background: none;
    outline: none;
    border: none;
    width: 100%;
    text-align: center;
    border-top: 1px solid #ddd;
    padding-top: 5px;
    cursor: pointer;
}
.zelos-renderer.zelos_renderer-theme .scratchColourPickerLabel,
.flyout .zelos-renderer.classic-theme .scratchColourPickerLabel,
.gtm-search-results .scratchColourPickerLabel,
.load-strategy__container .scratchColourPickerLabel {
    font-size: 0.65rem;
    color: #0e0e0e;
    margin: 8px;
}
.zelos-renderer.zelos_renderer-theme .scratchColourPickerLabelText,
.flyout .zelos-renderer.classic-theme .scratchColourPickerLabelText,
.gtm-search-results .scratchColourPickerLabelText,
.load-strategy__container .scratchColourPickerLabelText {
    font-weight: bold;
}
.zelos-renderer.zelos_renderer-theme .scratchColourPickerReadout,
.flyout .zelos-renderer.classic-theme .scratchColourPickerReadout,
.gtm-search-results .scratchColourPickerReadout,
.load-strategy__container .scratchColourPickerReadout {
    margin-left: 10px;
}
.zelos-renderer.zelos_renderer-theme .scratchMatrixButtonDiv,
.flyout .zelos-renderer.classic-theme .scratchMatrixButtonDiv,
.gtm-search-results .scratchMatrixButtonDiv,
.load-strategy__container .scratchMatrixButtonDiv {
    width: 50%;
    text-align: center;
    float: left;
}
.zelos-renderer.zelos_renderer-theme .scratchNotePickerKeyLabel,
.flyout .zelos-renderer.classic-theme .scratchNotePickerKeyLabel,
.gtm-search-results .scratchNotePickerKeyLabel,
.load-strategy__container .scratchNotePickerKeyLabel {
    font-size: 0.75rem;
    fill: #0e0e0e;
    pointer-events: none;
}
.zelos-renderer.zelos_renderer-theme .blocklyWidgetDiv .goog-menu,
.flyout .zelos-renderer.classic-theme .blocklyWidgetDiv .goog-menu,
.gtm-search-results .blocklyWidgetDiv .goog-menu,
.load-strategy__container .blocklyWidgetDiv .goog-menu {
    background: #fff;
    border-color: #ccc #666 #666 #ccc;
    border-style: solid;
    border-width: 1px;
    cursor: default;
    font:
        normal 13px 'Helvetica Neue',
        sans-serif;
    margin: 0;
    outline: none;
    padding: 4px 0;
    position: absolute;
    overflow-y: auto;
    overflow-x: hidden;
    z-index: 20000;
}
.zelos-renderer.zelos_renderer-theme .blocklyDropDownDiv .goog-menu,
.flyout .zelos-renderer.classic-theme .blocklyDropDownDiv .goog-menu,
.gtm-search-results .blocklyDropDownDiv .goog-menu,
.load-strategy__container .blocklyDropDownDiv .goog-menu {
    cursor: default;
    font:
        normal 13px 'Helvetica Neue',
        sans-serif;
    outline: none;
    z-index: 20000;
}
.zelos-renderer.zelos_renderer-theme .blocklyWidgetDiv .goog-menuitem,
.flyout .zelos-renderer.classic-theme .blocklyWidgetDiv .goog-menuitem,
.gtm-search-results .blocklyWidgetDiv .goog-menuitem,
.load-strategy__container .blocklyWidgetDiv .goog-menuitem {
    color: #000;
    font:
        normal 13px 'Helvetica Neue',
        sans-serif;
    list-style: none;
    margin: 0;
    padding: 4px 7em 4px 28px;
    white-space: nowrap;
}
.zelos-renderer.zelos_renderer-theme .blocklyDropDownDiv .goog-menuitem,
.flyout .zelos-renderer.classic-theme .blocklyDropDownDiv .goog-menuitem,
.gtm-search-results .blocklyDropDownDiv .goog-menuitem,
.load-strategy__container .blocklyDropDownDiv .goog-menuitem {
    color: #333333;
    font:
        normal 13px 'Helvetica Neue',
        sans-serif;
    font-weight: bold;
    list-style: none;
    margin: 0;
    min-height: 24px;
    padding: 4px 7em 4px 28px;
    white-space: nowrap;
}
.zelos-renderer.zelos_renderer-theme .blocklyWidgetDiv .goog-menu-nocheckbox .goog-menuitem,
.zelos-renderer.zelos_renderer-theme .blocklyWidgetDiv .goog-menu-noicon .goog-menuitem,
.zelos-renderer.zelos_renderer-theme .blocklyDropDownDiv .goog-menu-nocheckbox .goog-menuitem,
.zelos-renderer.zelos_renderer-theme .blocklyDropDownDiv .goog-menu-noicon .goog-menuitem,
.flyout .zelos-renderer.classic-theme .blocklyWidgetDiv .goog-menu-nocheckbox .goog-menuitem,
.flyout .zelos-renderer.classic-theme .blocklyWidgetDiv .goog-menu-noicon .goog-menuitem,
.flyout .zelos-renderer.classic-theme .blocklyDropDownDiv .goog-menu-nocheckbox .goog-menuitem,
.flyout .zelos-renderer.classic-theme .blocklyDropDownDiv .goog-menu-noicon .goog-menuitem,
.gtm-search-results .blocklyWidgetDiv .goog-menu-nocheckbox .goog-menuitem,
.gtm-search-results .blocklyWidgetDiv .goog-menu-noicon .goog-menuitem,
.gtm-search-results .blocklyDropDownDiv .goog-menu-nocheckbox .goog-menuitem,
.gtm-search-results .blocklyDropDownDiv .goog-menu-noicon .goog-menuitem,
.load-strategy__container .blocklyWidgetDiv .goog-menu-nocheckbox .goog-menuitem,
.load-strategy__container .blocklyWidgetDiv .goog-menu-noicon .goog-menuitem,
.load-strategy__container .blocklyDropDownDiv .goog-menu-nocheckbox .goog-menuitem,
.load-strategy__container .blocklyDropDownDiv .goog-menu-noicon .goog-menuitem {
    padding-left: 12px;
}
.zelos-renderer.zelos_renderer-theme .blocklyWidgetDiv .goog-menu-noaccel .goog-menuitem,
.zelos-renderer.zelos_renderer-theme .blocklyDropDownDiv .goog-menu-noaccel .goog-menuitem,
.flyout .zelos-renderer.classic-theme .blocklyWidgetDiv .goog-menu-noaccel .goog-menuitem,
.flyout .zelos-renderer.classic-theme .blocklyDropDownDiv .goog-menu-noaccel .goog-menuitem,
.gtm-search-results .blocklyWidgetDiv .goog-menu-noaccel .goog-menuitem,
.gtm-search-results .blocklyDropDownDiv .goog-menu-noaccel .goog-menuitem,
.load-strategy__container .blocklyWidgetDiv .goog-menu-noaccel .goog-menuitem,
.load-strategy__container .blocklyDropDownDiv .goog-menu-noaccel .goog-menuitem {
    padding-right: 20px;
}
.zelos-renderer.zelos_renderer-theme .blocklyWidgetDiv .goog-menuitem-content,
.zelos-renderer.zelos_renderer-theme .blocklyDropDownDiv .goog-menuitem-content,
.flyout .zelos-renderer.classic-theme .blocklyWidgetDiv .goog-menuitem-content,
.flyout .zelos-renderer.classic-theme .blocklyDropDownDiv .goog-menuitem-content,
.gtm-search-results .blocklyWidgetDiv .goog-menuitem-content,
.gtm-search-results .blocklyDropDownDiv .goog-menuitem-content,
.load-strategy__container .blocklyWidgetDiv .goog-menuitem-content,
.load-strategy__container .blocklyDropDownDiv .goog-menuitem-content {
    color: #000;
    font:
        normal 13px 'Helvetica Neue',
        sans-serif;
}
.zelos-renderer.zelos_renderer-theme .blocklyMenuItemContent.goog-menuitem-content,
.flyout .zelos-renderer.classic-theme .blocklyMenuItemContent.goog-menuitem-content,
.gtm-search-results .blocklyMenuItemContent.goog-menuitem-content,
.load-strategy__container .blocklyMenuItemContent.goog-menuitem-content {
    color: #000;
}
.zelos-renderer.zelos_renderer-theme .blocklyDropDownContent .blocklyMenuItemContent.goog-menuitem-content,
.flyout .zelos-renderer.classic-theme .blocklyDropDownContent .blocklyMenuItemContent.goog-menuitem-content,
.gtm-search-results .blocklyDropDownContent .blocklyMenuItemContent.goog-menuitem-content,
.load-strategy__container .blocklyDropDownContent .blocklyMenuItemContent.goog-menuitem-content {
    font-weight: bold;
}
.zelos-renderer.zelos_renderer-theme .blocklyCheckbox,
.flyout .zelos-renderer.classic-theme .blocklyCheckbox,
.gtm-search-results .blocklyCheckbox,
.load-strategy__container .blocklyCheckbox {
    width: 16px;
    height: 16px;
    y: 7;
    x: 2;
}
.zelos-renderer.zelos_renderer-theme .header__title,
.flyout .zelos-renderer.classic-theme .header__title,
.gtm-search-results .header__title,
.load-strategy__container .header__title {
    color: var(--text-prominent);
    display: inline-block;
    font-weight: 700;
}
.zelos-renderer.zelos_renderer-theme .blocklyWidgetDiv .goog-menuitem-disabled .goog-menuitem-accel,
.zelos-renderer.zelos_renderer-theme .blocklyWidgetDiv .goog-menuitem-disabled .goog-menuitem-content,
.zelos-renderer.zelos_renderer-theme .blocklyDropDownDiv .goog-menuitem-disabled .goog-menuitem-accel,
.zelos-renderer.zelos_renderer-theme .blocklyDropDownDiv .goog-menuitem-disabled .goog-menuitem-content,
.flyout .zelos-renderer.classic-theme .blocklyWidgetDiv .goog-menuitem-disabled .goog-menuitem-accel,
.flyout .zelos-renderer.classic-theme .blocklyWidgetDiv .goog-menuitem-disabled .goog-menuitem-content,
.flyout .zelos-renderer.classic-theme .blocklyDropDownDiv .goog-menuitem-disabled .goog-menuitem-accel,
.flyout .zelos-renderer.classic-theme .blocklyDropDownDiv .goog-menuitem-disabled .goog-menuitem-content,
.gtm-search-results .blocklyWidgetDiv .goog-menuitem-disabled .goog-menuitem-accel,
.gtm-search-results .blocklyWidgetDiv .goog-menuitem-disabled .goog-menuitem-content,
.gtm-search-results .blocklyDropDownDiv .goog-menuitem-disabled .goog-menuitem-accel,
.gtm-search-results .blocklyDropDownDiv .goog-menuitem-disabled .goog-menuitem-content,
.load-strategy__container .blocklyWidgetDiv .goog-menuitem-disabled .goog-menuitem-accel,
.load-strategy__container .blocklyWidgetDiv .goog-menuitem-disabled .goog-menuitem-content,
.load-strategy__container .blocklyDropDownDiv .goog-menuitem-disabled .goog-menuitem-accel,
.load-strategy__container .blocklyDropDownDiv .goog-menuitem-disabled .goog-menuitem-content {
    color: #ccc !important;
}
.zelos-renderer.zelos_renderer-theme .blocklyWidgetDiv .goog-menuitem-disabled .goog-menuitem-icon,
.zelos-renderer.zelos_renderer-theme .blocklyDropDownDiv .goog-menuitem-disabled .goog-menuitem-icon,
.flyout .zelos-renderer.classic-theme .blocklyWidgetDiv .goog-menuitem-disabled .goog-menuitem-icon,
.flyout .zelos-renderer.classic-theme .blocklyDropDownDiv .goog-menuitem-disabled .goog-menuitem-icon,
.gtm-search-results .blocklyWidgetDiv .goog-menuitem-disabled .goog-menuitem-icon,
.gtm-search-results .blocklyDropDownDiv .goog-menuitem-disabled .goog-menuitem-icon,
.load-strategy__container .blocklyWidgetDiv .goog-menuitem-disabled .goog-menuitem-icon,
.load-strategy__container .blocklyDropDownDiv .goog-menuitem-disabled .goog-menuitem-icon {
    opacity: 0.3;
    -moz-opacity: 0.3;
    filter: alpha(opacity=30);
}
.zelos-renderer.zelos_renderer-theme .blocklyWidgetDiv .goog-menuitem-highlight,
.zelos-renderer.zelos_renderer-theme .blocklyWidgetDiv .goog-menuitem-hover,
.flyout .zelos-renderer.classic-theme .blocklyWidgetDiv .goog-menuitem-highlight,
.flyout .zelos-renderer.classic-theme .blocklyWidgetDiv .goog-menuitem-hover,
.gtm-search-results .blocklyWidgetDiv .goog-menuitem-highlight,
.gtm-search-results .blocklyWidgetDiv .goog-menuitem-hover,
.load-strategy__container .blocklyWidgetDiv .goog-menuitem-highlight,
.load-strategy__container .blocklyWidgetDiv .goog-menuitem-hover {
    background-color: #d6e9f8;
    border-color: #d6e9f8;
    border-style: dotted;
    border-width: 1px 0;
    padding-bottom: 3px;
    padding-top: 3px;
}
.zelos-renderer.zelos_renderer-theme .blocklyDropDownDiv .goog-menuitem-highlight,
.zelos-renderer.zelos_renderer-theme .blocklyDropDownDiv .goog-menuitem-hover,
.flyout .zelos-renderer.classic-theme .blocklyDropDownDiv .goog-menuitem-highlight,
.flyout .zelos-renderer.classic-theme .blocklyDropDownDiv .goog-menuitem-hover,
.gtm-search-results .blocklyDropDownDiv .goog-menuitem-highlight,
.gtm-search-results .blocklyDropDownDiv .goog-menuitem-hover,
.load-strategy__container .blocklyDropDownDiv .goog-menuitem-highlight,
.load-strategy__container .blocklyDropDownDiv .goog-menuitem-hover {
    background-color: rgba(0, 0, 0, 0.2);
}
.zelos-renderer.zelos_renderer-theme .blocklyWidgetDiv .goog-menuitem-checkbox,
.zelos-renderer.zelos_renderer-theme .blocklyWidgetDiv .goog-menuitem-icon,
.zelos-renderer.zelos_renderer-theme .blocklyDropDownDiv .goog-menuitem-checkbox,
.zelos-renderer.zelos_renderer-theme .blocklyDropDownDiv .goog-menuitem-icon,
.flyout .zelos-renderer.classic-theme .blocklyWidgetDiv .goog-menuitem-checkbox,
.flyout .zelos-renderer.classic-theme .blocklyWidgetDiv .goog-menuitem-icon,
.flyout .zelos-renderer.classic-theme .blocklyDropDownDiv .goog-menuitem-checkbox,
.flyout .zelos-renderer.classic-theme .blocklyDropDownDiv .goog-menuitem-icon,
.gtm-search-results .blocklyWidgetDiv .goog-menuitem-checkbox,
.gtm-search-results .blocklyWidgetDiv .goog-menuitem-icon,
.gtm-search-results .blocklyDropDownDiv .goog-menuitem-checkbox,
.gtm-search-results .blocklyDropDownDiv .goog-menuitem-icon,
.load-strategy__container .blocklyWidgetDiv .goog-menuitem-checkbox,
.load-strategy__container .blocklyWidgetDiv .goog-menuitem-icon,
.load-strategy__container .blocklyDropDownDiv .goog-menuitem-checkbox,
.load-strategy__container .blocklyDropDownDiv .goog-menuitem-icon {
    background-repeat: no-repeat;
    height: 16px;
    left: 6px;
    position: absolute;
    right: auto;
    vertical-align: middle;
    width: 16px;
}
.zelos-renderer.zelos_renderer-theme .blocklyWidgetDiv .goog-option-selected .goog-menuitem-checkbox,
.zelos-renderer.zelos_renderer-theme .blocklyWidgetDiv .goog-option-selected .goog-menuitem-icon,
.zelos-renderer.zelos_renderer-theme .blocklyDropDownDiv .goog-option-selected .goog-menuitem-checkbox,
.zelos-renderer.zelos_renderer-theme .blocklyDropDownDiv .goog-option-selected .goog-menuitem-icon,
.flyout .zelos-renderer.classic-theme .blocklyWidgetDiv .goog-option-selected .goog-menuitem-checkbox,
.flyout .zelos-renderer.classic-theme .blocklyWidgetDiv .goog-option-selected .goog-menuitem-icon,
.flyout .zelos-renderer.classic-theme .blocklyDropDownDiv .goog-option-selected .goog-menuitem-checkbox,
.flyout .zelos-renderer.classic-theme .blocklyDropDownDiv .goog-option-selected .goog-menuitem-icon,
.gtm-search-results .blocklyWidgetDiv .goog-option-selected .goog-menuitem-checkbox,
.gtm-search-results .blocklyWidgetDiv .goog-option-selected .goog-menuitem-icon,
.gtm-search-results .blocklyDropDownDiv .goog-option-selected .goog-menuitem-checkbox,
.gtm-search-results .blocklyDropDownDiv .goog-option-selected .goog-menuitem-icon,
.load-strategy__container .blocklyWidgetDiv .goog-option-selected .goog-menuitem-checkbox,
.load-strategy__container .blocklyWidgetDiv .goog-option-selected .goog-menuitem-icon,
.load-strategy__container .blocklyDropDownDiv .goog-option-selected .goog-menuitem-checkbox,
.load-strategy__container .blocklyDropDownDiv .goog-option-selected .goog-menuitem-icon {
    background: url('<<<PATH>>>/sprites.png') no-repeat -48px -16px !important;
    position: static;
    float: left;
    margin-left: -24px;
}
.zelos-renderer.zelos_renderer-theme .blocklyWidgetDiv .goog-menuitem-rtl .goog-menuitem-checkbox,
.zelos-renderer.zelos_renderer-theme .blocklyWidgetDiv .goog-menuitem-rtl .goog-menuitem-icon,
.zelos-renderer.zelos_renderer-theme .blocklyDropDownDiv .goog-menuitem-rtl .goog-menuitem-checkbox,
.zelos-renderer.zelos_renderer-theme .blocklyDropDownDiv .goog-menuitem-rtl .goog-menuitem-icon,
.flyout .zelos-renderer.classic-theme .blocklyWidgetDiv .goog-menuitem-rtl .goog-menuitem-checkbox,
.flyout .zelos-renderer.classic-theme .blocklyWidgetDiv .goog-menuitem-rtl .goog-menuitem-icon,
.flyout .zelos-renderer.classic-theme .blocklyDropDownDiv .goog-menuitem-rtl .goog-menuitem-checkbox,
.flyout .zelos-renderer.classic-theme .blocklyDropDownDiv .goog-menuitem-rtl .goog-menuitem-icon,
.gtm-search-results .blocklyWidgetDiv .goog-menuitem-rtl .goog-menuitem-checkbox,
.gtm-search-results .blocklyWidgetDiv .goog-menuitem-rtl .goog-menuitem-icon,
.gtm-search-results .blocklyDropDownDiv .goog-menuitem-rtl .goog-menuitem-checkbox,
.gtm-search-results .blocklyDropDownDiv .goog-menuitem-rtl .goog-menuitem-icon,
.load-strategy__container .blocklyWidgetDiv .goog-menuitem-rtl .goog-menuitem-checkbox,
.load-strategy__container .blocklyWidgetDiv .goog-menuitem-rtl .goog-menuitem-icon,
.load-strategy__container .blocklyDropDownDiv .goog-menuitem-rtl .goog-menuitem-checkbox,
.load-strategy__container .blocklyDropDownDiv .goog-menuitem-rtl .goog-menuitem-icon {
    float: right;
    margin-right: -24px;
}
.zelos-renderer.zelos_renderer-theme .blocklyWidgetDiv .goog-menuitem-accel,
.zelos-renderer.zelos_renderer-theme .blocklyDropDownDiv .goog-menuitem-accel,
.flyout .zelos-renderer.classic-theme .blocklyWidgetDiv .goog-menuitem-accel,
.flyout .zelos-renderer.classic-theme .blocklyDropDownDiv .goog-menuitem-accel,
.gtm-search-results .blocklyWidgetDiv .goog-menuitem-accel,
.gtm-search-results .blocklyDropDownDiv .goog-menuitem-accel,
.load-strategy__container .blocklyWidgetDiv .goog-menuitem-accel,
.load-strategy__container .blocklyDropDownDiv .goog-menuitem-accel {
    color: #999;
    direction: ltr;
    left: auto;
    padding: 0 6px;
    position: absolute;
    right: 0;
    text-align: right;
}
.zelos-renderer.zelos_renderer-theme .blocklyWidgetDiv .goog-menuitem-rtl .goog-menuitem-accel,
.zelos-renderer.zelos_renderer-theme .blocklyDropDownDiv .goog-menuitem-rtl .goog-menuitem-accel,
.flyout .zelos-renderer.classic-theme .blocklyWidgetDiv .goog-menuitem-rtl .goog-menuitem-accel,
.flyout .zelos-renderer.classic-theme .blocklyDropDownDiv .goog-menuitem-rtl .goog-menuitem-accel,
.gtm-search-results .blocklyWidgetDiv .goog-menuitem-rtl .goog-menuitem-accel,
.gtm-search-results .blocklyDropDownDiv .goog-menuitem-rtl .goog-menuitem-accel,
.load-strategy__container .blocklyWidgetDiv .goog-menuitem-rtl .goog-menuitem-accel,
.load-strategy__container .blocklyDropDownDiv .goog-menuitem-rtl .goog-menuitem-accel {
    left: 0;
    right: auto;
    text-align: left;
}
.zelos-renderer.zelos_renderer-theme .blocklyWidgetDiv .goog-menuitem-mnemonic-hint,
.zelos-renderer.zelos_renderer-theme .blocklyDropDownDiv .goog-menuitem-mnemonic-hint,
.flyout .zelos-renderer.classic-theme .blocklyWidgetDiv .goog-menuitem-mnemonic-hint,
.flyout .zelos-renderer.classic-theme .blocklyDropDownDiv .goog-menuitem-mnemonic-hint,
.gtm-search-results .blocklyWidgetDiv .goog-menuitem-mnemonic-hint,
.gtm-search-results .blocklyDropDownDiv .goog-menuitem-mnemonic-hint,
.load-strategy__container .blocklyWidgetDiv .goog-menuitem-mnemonic-hint,
.load-strategy__container .blocklyDropDownDiv .goog-menuitem-mnemonic-hint {
    text-decoration: underline;
}
.zelos-renderer.zelos_renderer-theme .blocklyWidgetDiv .goog-menuitem-mnemonic-separator,
.zelos-renderer.zelos_renderer-theme .blocklyDropDownDiv .goog-menuitem-mnemonic-separator,
.flyout .zelos-renderer.classic-theme .blocklyWidgetDiv .goog-menuitem-mnemonic-separator,
.flyout .zelos-renderer.classic-theme .blocklyDropDownDiv .goog-menuitem-mnemonic-separator,
.gtm-search-results .blocklyWidgetDiv .goog-menuitem-mnemonic-separator,
.gtm-search-results .blocklyDropDownDiv .goog-menuitem-mnemonic-separator,
.load-strategy__container .blocklyWidgetDiv .goog-menuitem-mnemonic-separator,
.load-strategy__container .blocklyDropDownDiv .goog-menuitem-mnemonic-separator {
    color: #999;
    font-size: 12px;
    padding-left: 4px;
}
.zelos-renderer.zelos_renderer-theme .blocklyWidgetDiv .goog-menuseparator,
.zelos-renderer.zelos_renderer-theme .blocklyDropDownDiv .goog-menuseparator,
.flyout .zelos-renderer.classic-theme .blocklyWidgetDiv .goog-menuseparator,
.flyout .zelos-renderer.classic-theme .blocklyDropDownDiv .goog-menuseparator,
.gtm-search-results .blocklyWidgetDiv .goog-menuseparator,
.gtm-search-results .blocklyDropDownDiv .goog-menuseparator,
.load-strategy__container .blocklyWidgetDiv .goog-menuseparator,
.load-strategy__container .blocklyDropDownDiv .goog-menuseparator {
    border-top: 1px solid #ccc;
    margin: 4px 0;
    padding: 0;
}
.zelos-renderer.zelos_renderer-theme .blocklyFlyoutCheckbox,
.flyout .zelos-renderer.classic-theme .blocklyFlyoutCheckbox,
.gtm-search-results .blocklyFlyoutCheckbox,
.load-strategy__container .blocklyFlyoutCheckbox {
    fill: #ffffff;
    stroke: #c8c8c8;
}
.zelos-renderer.zelos_renderer-theme .blocklyFlyoutCheckbox.checked,
.flyout .zelos-renderer.classic-theme .blocklyFlyoutCheckbox.checked,
.gtm-search-results .blocklyFlyoutCheckbox.checked,
.load-strategy__container .blocklyFlyoutCheckbox.checked {
    fill: #4c97ff;
    stroke: #3373cc;
}
.zelos-renderer.zelos_renderer-theme .blocklyFlyoutCheckboxPath,
.flyout .zelos-renderer.classic-theme .blocklyFlyoutCheckboxPath,
.gtm-search-results .blocklyFlyoutCheckboxPath,
.load-strategy__container .blocklyFlyoutCheckboxPath {
    stroke: #ffffff;
    stroke-width: 3;
    stroke-linecap: round;
    stroke-linejoin: round;
}
.zelos-renderer.zelos_renderer-theme .scratchCategoryMenu,
.flyout .zelos-renderer.classic-theme .scratchCategoryMenu,
.gtm-search-results .scratchCategoryMenu,
.load-strategy__container .scratchCategoryMenu {
    width: 60px;
    background: #0e0e0e;
    color: #0e0e0e;
    font-size: 0.7rem;
    user-select: none;
    -webkit-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
}
.zelos-renderer.zelos_renderer-theme .scratchCategoryMenuHorizontal,
.flyout .zelos-renderer.classic-theme .scratchCategoryMenuHorizontal,
.gtm-search-results .scratchCategoryMenuHorizontal,
.load-strategy__container .scratchCategoryMenuHorizontal {
    width: 100%;
    height: 50px;
    background: #0e0e0e;
    color: #0e0e0e;
    font-size: 0.7em;
    user-select: none;
    -webkit-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
}
.zelos-renderer.zelos_renderer-theme .scratchCategoryMenuHorizontal .scratchCategoryMenuRow,
.flyout .zelos-renderer.classic-theme .scratchCategoryMenuHorizontal .scratchCategoryMenuRow,
.gtm-search-results .scratchCategoryMenuHorizontal .scratchCategoryMenuRow,
.load-strategy__container .scratchCategoryMenuHorizontal .scratchCategoryMenuRow {
    float: left;
    margin: 3px;
}
.zelos-renderer.zelos_renderer-theme .scratchCategoryMenuItem,
.flyout .zelos-renderer.classic-theme .scratchCategoryMenuItem,
.gtm-search-results .scratchCategoryMenuItem,
.load-strategy__container .scratchCategoryMenuItem {
    padding: 0.375rem 0px;
    cursor: pointer;
    text-align: center;
}
.zelos-renderer.zelos_renderer-theme .scratchCategoryMenuHorizontal .scratchCategoryMenuItem,
.flyout .zelos-renderer.classic-theme .scratchCategoryMenuHorizontal .scratchCategoryMenuItem,
.gtm-search-results .scratchCategoryMenuHorizontal .scratchCategoryMenuItem,
.load-strategy__container .scratchCategoryMenuHorizontal .scratchCategoryMenuItem {
    padding: 6px 5px;
}
.zelos-renderer.zelos_renderer-theme .scratchCategoryMenuItem.categorySelected,
.flyout .zelos-renderer.classic-theme .scratchCategoryMenuItem.categorySelected,
.gtm-search-results .scratchCategoryMenuItem.categorySelected,
.load-strategy__container .scratchCategoryMenuItem.categorySelected {
    background: #0e0e0e;
}
.zelos-renderer.zelos_renderer-theme .scratchCategoryItemBubble,
.flyout .zelos-renderer.classic-theme .scratchCategoryItemBubble,
.gtm-search-results .scratchCategoryItemBubble,
.load-strategy__container .scratchCategoryItemBubble {
    width: 1.25rem;
    height: 1.25rem;
    border: 1px solid;
    border-radius: 100%;
    margin: 0 auto 0.125rem;
}
.zelos-renderer.zelos_renderer-theme .scratchCategoryItemIcon,
.flyout .zelos-renderer.classic-theme .scratchCategoryItemIcon,
.gtm-search-results .scratchCategoryItemIcon,
.load-strategy__container .scratchCategoryItemIcon {
    width: 1.25rem;
    height: 1.25rem;
    margin: 0 auto 0.125rem;
    background-size: 100%;
}
.zelos-renderer.zelos_renderer-theme .scratchCategoryMenuItem:hover,
.flyout .zelos-renderer.classic-theme .scratchCategoryMenuItem:hover,
.gtm-search-results .scratchCategoryMenuItem:hover,
.load-strategy__container .scratchCategoryMenuItem:hover {
    color: #0e0e0e !important;
}
.zelos-renderer.zelos_renderer-theme rect.blocklyFieldRect.blocklyDropdownRect,
.flyout .zelos-renderer.classic-theme rect.blocklyFieldRect.blocklyDropdownRect,
.gtm-search-results rect.blocklyFieldRect.blocklyDropdownRect,
.load-strategy__container rect.blocklyFieldRect.blocklyDropdownRect {
    fill: #ffffff;
    rx: 16px;
    ry: 16px;
}
.zelos-renderer.zelos_renderer-theme .blocklyTextRootBlockHeader,
.zelos-renderer.zelos_renderer-theme .blocklyTextRootBlockHeaderCollapsed,
.flyout .zelos-renderer.classic-theme .blocklyTextRootBlockHeader,
.flyout .zelos-renderer.classic-theme .blocklyTextRootBlockHeaderCollapsed,
.gtm-search-results .blocklyTextRootBlockHeader,
.gtm-search-results .blocklyTextRootBlockHeaderCollapsed,
.load-strategy__container .blocklyTextRootBlockHeader,
.load-strategy__container .blocklyTextRootBlockHeaderCollapsed {
    width: 17rem !important;
    color: #fff;
    fill: #ffffff;
    font-size: 1.9rem;
}
.zelos-renderer.zelos_renderer-theme .blocklyTextRootBlockHeaderCollapsed,
.flyout .zelos-renderer.classic-theme .blocklyTextRootBlockHeaderCollapsed,
.gtm-search-results .blocklyTextRootBlockHeaderCollapsed,
.load-strategy__container .blocklyTextRootBlockHeaderCollapsed {
    font-size: 1.8rem;
}
.zelos-renderer.zelos_renderer-theme .blocklyTextTickAnalysis,
.flyout .zelos-renderer.classic-theme .blocklyTextTickAnalysis,
.gtm-search-results .blocklyTextTickAnalysis,
.load-strategy__container .blocklyTextTickAnalysis {
    fill: #ffffff;
    font-size: 1.6rem;
}

.blocklyNonEditableText:has(> .blocklyCheckbox) .blocklyFieldRect,
.blocklyEditableText:has(> .blocklyCheckbox) .blocklyFieldRect {
    width: 16px;
    height: 16px;
    y: 7;
    x: 2;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.draggable {
    user-select: none;
    transition: opacity 0.25s cubic-bezier(0.25, 0.1, 0.1, 0.25);
    color: var(--text-general);
    background: var(--general-main-2);
    border: 1px solid rgba(0, 0, 0, 0.12);
    border-radius: 8px;
    box-shadow: 0px 0px 8px 4px var(--shadow-menu);
    padding: 4px;
}
.draggable .draggable-content {
    background: var(--general-main-1);
}
.draggable .draggable-content__header {
    cursor: move;
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 16px;
    width: 100%;
}
.draggable .draggable-content__header__title {
    font-size: 16px;
    font-weight: 700;
}
.draggable .draggable-content__header__close {
    cursor: pointer;
}
.draggable .draggable-content__header-title {
    width: 100%;
}
.draggable .draggable-content__body {
    padding: 2px;
    display: contents;
}
.draggable .resizable-handle__top {
    position: absolute;
    width: 100%;
    height: 10px;
    top: -5px;
    left: 0;
    cursor: row-resize;
}
.draggable .resizable-handle__right {
    position: absolute;
    width: 10px;
    height: 100%;
    top: 0;
    right: -5px;
    cursor: col-resize;
}
.draggable .resizable-handle__bottom {
    position: absolute;
    width: 100%;
    height: 10px;
    bottom: -5px;
    left: 0;
    cursor: row-resize;
}
.draggable .resizable-handle__left {
    position: absolute;
    width: 10px;
    height: 100%;
    top: 0;
    left: -5px;
    cursor: col-resize;
}
.draggable .resizable-handle__top-left {
    position: absolute;
    width: 10px;
    height: 10px;
    top: -5px;
    left: -5px;
    cursor: nwse-resize;
}
.draggable .resizable-handle__top-right {
    position: absolute;
    width: 10px;
    height: 10px;
    top: -5px;
    right: -5px;
    cursor: nesw-resize;
}
.draggable .resizable-handle__bottom-right {
    position: absolute;
    width: 10px;
    height: 10px;
    bottom: -5px;
    right: -5px;
    cursor: nwse-resize;
}
.draggable .resizable-handle__bottom-left {
    position: absolute;
    width: 10px;
    height: 10px;
    bottom: -5px;
    left: -5px;
    cursor: nesw-resize;
}

.draggable.dragging {
    cursor: no-drop;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.notify__item-button {
    margin-top: 8px;
    height: 2.8rem !important;
    margin-left: 100%;
    transform: translateX(-100%);
}
.notify__item-button .btn__text {
    font-size: var(--text-size-xxs);
}
.notify__item-container {
    display: flex;
    align-items: center;
}
.notify__item-message {
    margin-left: 8px;
    font-size: var(--text-size-xxs);
    line-height: 1.2;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.transaction-details-modal-desktop {
    color: var(--text-general);
}
.transaction-details-modal-desktop .dc-dialog__dialog {
    padding: 0px;
    width: 80vw;
    max-width: inherit;
    max-height: inherit;
    justify-content: start;
}
.transaction-details-modal-desktop .dc-dialog__header-wrapper {
    padding-inline: 18px;
    margin: 1.5rem 0;
}
.transaction-details-modal-desktop .dc-dialog__content {
    max-width: inherit;
    margin-bottom: 0;
}
.transaction-details-modal-desktop__table-container {
    display: flex;
    flex-direction: column;
    margin-bottom: 8px;
}
.transaction-details-modal-desktop__table-container__top-table {
    overflow: auto;
    height: inherit;
}
.transaction-details-modal-desktop__table-container__bottom-table {
    overflow: unset;
}
.transaction-details-modal-desktop__table-row {
    display: flex;
    align-items: center;
    font-size: 12px;
    border-bottom: 1.5px solid var(--general-section-2);
}
.transaction-details-modal-desktop__table-header {
    position: sticky;
    top: 0;
    background-color: var(--general-section-2);
    font-size: 14px;
    font-weight: 700;
}
.transaction-details-modal-desktop__table-header .transaction-details-modal-desktop__table-cell {
    margin-left: -2px;
}
.transaction-details-modal-desktop__table-cell {
    flex: 1;
    overflow: auto;
    padding: 16px 18px;
    white-space: normal;
    word-wrap: break-word;
}
.transaction-details-modal-desktop__table-cell--grow-big {
    flex-grow: 2.5;
}
.transaction-details-modal-desktop__table-cell--grow-mid {
    flex-grow: 1.5;
}
.transaction-details-modal-desktop__table-cell .transactions__loader-text {
    width: 100%;
}
.transaction-details-modal-desktop__loss {
    color: var(--text-loss-danger);
}
.transaction-details-modal-desktop__profit--win {
    color: var(--text-profit-success);
}
.transaction-details-modal-desktop__profit--win:before {
    content: '+';
}
.transaction-details-modal-desktop__profit--loss {
    color: var(--text-loss-danger);
}
.transaction-details-modal-desktop__profit--loss:before {
    content: '-';
}
.transaction-details-modal-desktop__icon-wrapper {
    display: flex;
    align-items: baseline;
}
.transaction-details-modal-desktop__divider {
    width: 100%;
    padding: 4px 16px;
}

.transaction-details-tables {
    height: calc(100% - 56px);
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    overflow: hidden;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.download__container {
    display: flex;
    padding: 12px;
    padding-left: 16px;
    border: solid 1px var(--general-section-1);
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
/*
 * Check if the page is in RTL mode
 * Usage example:
   @include is-RTL { left: 0 };
 */
/**
 * @define journal
 */
.journal-empty {
    height: 100%;
    display: flex;
    flex-direction: column;
    justify-content: center;
}
.journal-empty__header {
    padding: 0.8rem;
}
.journal-empty__icon {
    align-self: center;
}
.journal-empty__message {
    margin: 0 auto;
}
.journal-empty__message .dc-text {
    line-height: var(--text-lh-xxl);
}
.journal-empty__list {
    list-style-type: disc;
    margin-left: 20px;
    line-height: var(--text-lh-xl);
}
.journal-empty__list li::marker {
    color: var(--text-less-prominent);
}
.journal__item {
    padding: 16px;
}
.journal__item-list {
    height: calc(100% - 7.2rem);
}
.journal__item-content > * {
    width: 100%;
}
.journal__data-list .ReactVirtualized__Grid__innerScrollContainer > div:nth-child(even) {
    background: var(--general-section-2);
}
.journal-tools__container {
    display: flex;
    justify-content: space-between;
    padding: 12px;
    padding-left: 16px;
    border: solid 1px var(--general-section-1);
}
.journal-tools__container-filter {
    display: flex;
    align-items: center;
    justify-content: flex-end;
    cursor: pointer;
    flex: 1;
}
.journal-tools__container-filter--label {
    margin-inline-end: 0.8rem;
}
.journal__text {
    font-size: var(--text-size-xxs);
    line-height: 1.5;
    display: inline;
    color: var(--text-general);
}
.journal__text-time,
.journal__text-date {
    display: inline;
}
.journal__text-datetime {
    color: var(--text-less-prominent);
    font-size: var(--text-size--xxxs);
    margin-top: 6px;
}
.journal__text--error {
    color: var(--status-danger);
}
.journal__text--warn {
    color: var(--status-warning);
}
.journal__text--info {
    color: var(--status-info);
}
.journal__text--success {
    color: var(--status-success);
}
.journal__text--bold {
    font-weight: bold;
}
.journal__loader,
.journal__loader--mobile {
    width: 350px;
    height: 9.2rem;
}
.journal__loader--mobile {
    width: 100vw;
}

.filter-dialog {
    position: fixed;
    display: grid;
    grid-gap: 1.6rem;
    background: var(--general-main-2);
    border-radius: 4px;
    box-shadow: 0 4px 16px 0 var(--shadow-menu);
    transition:
        transform 0.3s cubic-bezier(0.25, 0.1, 0.25, 1),
        opacity 0.25s linear;
    padding: 1.6rem 0.8rem;
    padding-inline-end: 3.6rem;
    inset-inline-end: 16px;
    z-index: 99;
}
.filter-dialog--enter-done {
    opacity: 1;
    transform: translate3d(0, 0, 0);
}
.filter-dialog--enter,
.filter-dialog--exit {
    opacity: 0;
    transform: translate3d(0, -20px, 0);
}
.filter-dialog__input .input-wrapper__input {
    border: 1px solid var(--border-normal);
}
.filter-dialog__button {
    margin-top: 0.8rem;
}
.filter-dialog__button .dc-btn {
    width: 100%;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.summary {
    display: flex;
    align-items: center;
    flex-direction: column;
    justify-content: center;
    background: linear-gradient(180deg, var(--general-section-2) 0%, rgba(242, 243, 244, 0) 80%);
    width: 100%;
}
@media (min-width: 1280px) {
    .summary {
        height: inherit;
    }
}
.summary--loading {
    width: 100%;
}
.summary--delayed-loading {
    justify-content: center;
}
.summary__tiles {
    display: flex;
    flex-wrap: wrap;
    justify-content: space-between;
    margin: 24px 0;
}
.summary__tile {
    display: flex;
    flex-direction: column;
    justify-content: center;
    border-radius: 4px;
    width: 32%;
    max-width: 32%;
    text-align: center;
    background-color: var(--general-section-1);
    padding: 8px 8px 0;
    margin-bottom: 2%;
    height: 56px;
}
.summary__tile-title {
    height: 18px;
    margin-bottom: 4px;
    font-size: 1.2rem;
    color: var(--text-general);
    font-weight: 700;
    text-transform: none;
    text-align: center;
    line-height: 1.25;
}
.summary__tile-content {
    height: 18px;
    margin-bottom: 4px;
    font-size: 1.2rem;
    color: var(--text-general);
    font-weight: 400;
    text-transform: none;
    text-align: center;
    line-height: 1.25;
}
.summary__amount {
    font-size: 1.2rem;
    color: var(--text-general);
    font-weight: 400;
    text-transform: none;
    text-align: center;
    line-height: 1.25;
}
.summary__amount--positive {
    font-weight: bold;
    color: var(--text-profit-success);
}
.summary__amount--negative {
    font-weight: bold;
    color: var(--text-loss-danger);
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.db-summary-card {
    box-sizing: border-box;
    display: flex;
    flex-direction: column;
    position: relative;
}
@media (min-width: 1280px) {
    .db-summary-card {
        width: 100%;
    }
}
.db-summary-card--inactive {
    color: var(--text-general);
    font-size: 14px;
    justify-content: center;
    margin: auto;
    text-align: center;
    line-height: 2rem;
    padding: 0 3rem;
}
.db-summary-card--inactive .dc-text {
    text-align: center;
}
.db-summary-card--completed {
    border: 1px solid var(--general-main-1);
}
.db-summary-card--completed:hover {
    border: 1px solid var(--border-disabled);
}
.db-summary-card--delayed-loading {
    align-items: center;
}
.db-summary-card .dc-contract-card {
    padding: 1.6rem 1.6rem 0.8rem;
}
.db-summary-card .dc-contract-card-message {
    margin: 0 3rem;
}
.db-summary-card .dc-contract-card__grid-underlying-trade {
    grid-template-columns: 1.5fr 1fr;
}
.db-summary-card .dc-contract-card-items-wrapper {
    grid-template-columns: 1.5fr 1fr;
    margin-top: 0.8rem;
}
.db-summary-card--mobile .dc-contract-card {
    padding: 1.5rem 3.4rem;
}
.db-summary-card--mobile .dc-contract-card__grid-underlying-trade--mobile {
    grid-template-columns: 1fr 1.25fr;
}
.db-summary-card--mobile .dc-contract-card-items-wrapper {
    grid-template-columns: 1fr 1fr;
}
@keyframes rotate {
    0% {
        transform: rotate(0deg);
    }
    100% {
        transform: rotate(360deg);
    }
}
.db-summary-card #rotate-icon {
    margin: 0 0 2rem;
    animation: rotate 2s linear infinite;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
/*
 * Check if the page is in RTL mode
 * Usage example:
   @include is-RTL { left: 0 };
 */
@keyframes animate-fade-in {
    0% {
        opacity: 0;
    }
    100% {
        opacity: 1;
    }
}
.db-contract-card__result {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    border-radius: 4px;
    border-bottom-left-radius: 0;
    border-bottom-right-radius: 0;
    box-sizing: border-box;
    z-index: 2;
    background-color: var(--overlay-inside-dialog);
    animation: animate-fade-in 0.3s;
    display: flex;
    align-items: center;
    justify-content: center;
}
.db-contract-card__result:hover {
    background: 0;
}
.db-contract-card__result:hover .db-contract-card__result-caption {
    opacity: 0;
}
.db-contract-card__result-caption {
    display: flex;
    align-items: center;
    transition: opacity 0.25s linear;
}
.db-contract-card__result-icon {
    margin-left: 10px;
}
.db-contract-card__result--won {
    background-image: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(0, 148, 117, 0.16));
}
.db-contract-card__result--won > .db-contract-card__result-caption {
    color: var(--text-profit-success);
}
.db-contract-card__result--lost {
    background-image: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(227, 28, 75, 0.16));
}
.db-contract-card__result--lost > .db-contract-card__result-caption {
    color: var(--text-loss-danger);
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
@keyframes animate-progress {
    0% {
        width: 0%;
    }
    100% {
        width: 51%;
    }
}
@keyframes animate-progress-complete {
    0% {
        width: 50%;
    }
    100% {
        width: 100%;
    }
}
@keyframes animate-circle {
    0% {
        transform: scale(0);
    }
    50% {
        transform: scale(1.5);
    }
    100% {
        transform: scale(0);
    }
}
@keyframes animate-circle-appear {
    0% {
        transform: scale(0);
    }
    100% {
        transform: scale(1);
    }
}
@keyframes animate-circle-pop {
    0% {
        transform: scale(0);
    }
    50% {
        transform: scale(1);
    }
    100% {
        transform: scale(0);
    }
}
.animation__wrapper {
    display: flex;
    align-items: center;
    height: 40px;
}
.animation__overlay {
    border-top-left-radius: 0;
    border-bottom-right-radius: 4px;
}
.animation__run-button {
    width: fit-content;
    height: 100% !important;
    border-start-end-radius: 0 !important;
    border-end-end-radius: 0 !important;
    background-color: var(--purchase-main-1);
}
.animation__run-button:hover {
    background-color: var(--purchase-main-1) !important;
}
.animation__stop-button {
    width: fit-content;
    height: 100% !important;
    border-start-end-radius: 0 !important;
    border-end-end-radius: 0 !important;
    background-color: var(--button-primary-default);
}
.animation__stop-button:hover {
    background-color: var(--button-primary-default) !important;
}
.animation__container {
    height: 100%;
    padding: 5px 12px;
    display: flex;
    flex-direction: column;
    justify-content: space-evenly;
    border-start-end-radius: 4px;
    border-end-end-radius: 4px;
    border: solid 1px var(--border-normal);
    position: relative;
}
.animation__text {
    color: var(--text-general);
    font-size: 12px;
    font-weight: bold;
    text-align: center;
    margin-bottom: 5px;
    line-height: 18px;
}
.animation__progress {
    display: flex;
    justify-content: space-between;
    position: relative;
    height: 6px;
}
.animation__progress .circular-wrapper {
    width: 2px;
    height: 2px;
    align-self: center;
    display: flex;
}
.animation__progress .circular-wrapper .static-circle {
    width: 2px;
    height: 2px;
    background-color: #000000;
    border-radius: 100%;
    align-self: center;
    z-index: 1;
}
.animation__progress .circular-wrapper .dynamic-circle {
    border-radius: 100%;
    height: 10px;
    width: 10px;
    margin-left: -4px;
    margin-top: -4px;
    opacity: 0.32;
    position: absolute;
}
.animation__progress .circular-wrapper:nth-child(2) {
    margin-left: 3px;
}
.animation__progress .circular-wrapper:last-child {
    margin-right: 3px;
}
.animation__progress-line {
    background-color: var(--border-normal);
    height: 100%;
    width: 100%;
    border-radius: 4px;
    position: absolute;
}
.animation__progress-bar {
    background-color: var(--status-success);
    border-radius: 4px;
    width: 0;
    height: 100%;
}
.animation__progress-4 {
    animation: animate-progress 0.5s 1;
    animation-fill-mode: forwards;
}
.animation__progress-5 {
    width: 51%;
    border-radius: 5px 0 0 5px;
}
.animation__progress-6 {
    animation: animate-progress-complete 0.5s 1;
    animation-fill-mode: forwards;
}
.animation--running .animation__progress .circular-wrapper.completed .static-circle,
.animation--running .animation__progress .circular-wrapper.active .static-circle {
    background-color: #3d9494;
}
.animation--running .animation__progress .circular-wrapper.active .dynamic-circle {
    animation: animate-circle 0.8s infinite;
    animation-timing-function: cubic-bezier(0.25, 0.1, 0.25, 1);
    background-color: var(--status-success);
}
.animation--running .animation__progress .circular-wrapper .static-circle {
    animation: animate-circle-appear 1s;
    background-color: #ff444f;
}
.animation--running .animation__progress .circular-wrapper .dynamic-circle {
    animation: animate-circle 1s;
    background-color: #ff444f;
    transform: scale(0);
}

@media (max-width: 1279px) {
    .dc-modal__container_animation__modal {
        width: 31.2rem !important;
    }
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
/*
 * Check if the page is in RTL mode
 * Usage example:
   @include is-RTL { left: 0 };
 */
.transactions {
    flex-direction: column;
}
.transactions .download__container__view-detail-button {
    margin-inline-start: 12px;
}
.transactions .transaction-details__button-container {
    display: flex;
    align-items: center;
}
.transactions-empty {
    height: 100%;
    display: flex;
    flex-direction: column;
    justify-content: center;
}
.transactions-empty-box {
    display: grid;
    flex: 1;
    height: 100%;
}
.transactions-empty__header {
    padding: 0.8rem;
}
.transactions-empty__icon-box {
    display: flex;
    justify-content: center;
    margin-top: 0.3rem;
}
.transactions-empty__icon {
    align-self: center;
}
.transactions-empty__message {
    margin: 0 auto;
    margin-bottom: 2rem;
}
.transactions-empty__message .dc-text {
    line-height: var(--text-lh-xxl);
}
.transactions-empty__list {
    list-style-type: disc;
    margin-left: 2rem;
    font-size: var(--text-size-xxs);
    line-height: var(--text-lh-xl);
    color: var(--text-less-prominent);
}
.transactions__header {
    border-bottom: 1px solid var(--general-section-1);
    width: 100%;
    display: grid;
    font-size: 1.2rem;
    color: var(--text-general);
    font-weight: 700;
    text-transform: none;
    text-align: start;
    line-height: 1.25;
    grid-template-columns: 0.8fr 1fr 1.1fr;
    grid-template-areas: 'type spot profit';
    padding: 1.2rem 1.6rem;
    height: 5rem;
    align-items: center;
}
.transactions__header-type {
    grid-column: type;
}
.transactions__header-spot {
    grid-column: spot;
    text-align: start;
}
.transactions__header-profit {
    grid-column: profit;
    text-align: start;
}
.transactions__content {
    height: calc(100% - 11rem);
}
.transactions__content--mobile {
    height: calc(100% - 4.2rem);
}
.transactions__scrollbar {
    height: 100%;
}
.transactions__scrollbar .dc-themed-scrollbars {
    height: 100%;
    width: 100%;
}
.transactions__item {
    display: grid;
    font-size: 12px;
    grid-row-gap: 3px;
    grid-template-columns: 0.8fr 1fr 1.1fr;
    grid-template-rows: auto auto;
    grid-template-areas: 'trade-type entry-spot stake' 'trade-type exit-spot  profit';
    padding: 0.8rem 0;
}
[dir='rtl'] .transactions__item {
    direction: rtl;
}
.transactions__item-wrapper {
    height: 5.2rem;
    padding: 0 1.6rem;
    cursor: pointer;
    position: relative;
    border-top: 1px solid var(--general-section-2);
}
.transactions__item-wrapper:hover {
    background-color: var(--state-hover);
}
.transactions__trade-type {
    grid-column: trade-type;
    grid-row: trade-type;
    justify-content: flex-start;
}
.transactions__entry-spot {
    grid-column: entry-spot;
    grid-row: entry-spot;
    justify-content: flex-start;
}
.transactions__exit-spot {
    grid-column: exit-spot;
    grid-row: exit-spot;
    justify-content: flex-start;
}
.transactions__stake {
    grid-column: stake;
    grid-row: stake;
    justify-content: flex-end;
}
.transactions__profit {
    grid-column: profit;
    grid-row: profit;
    justify-content: flex-end;
}
.transactions__divider {
    border-top: 1px solid var(--general-section-2);
    padding: 8px 16px;
}
.transactions__divider-line {
    height: 4px;
    background-color: var(--general-section-2);
}
.transactions__item-wrapper + .transactions__divider {
    border-top: none;
}
.transactions__divider + .transactions__item-wrapper {
    border-top: none;
}
.transactions__loader-text {
    width: 7.2rem;
    height: 1rem;
}
.transactions__loader-container {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 2.4rem;
    height: 2.4rem;
    margin-right: 0.4rem;
}
.transactions__loader-icon {
    width: 2.4rem;
    height: 2.4rem;
}
.transactions__icon {
    margin-right: 0.8rem;
    max-height: 1.6rem;
    max-width: 1.6rem;
    min-height: 1.6rem;
    min-width: 1.6rem;
}
.transactions__cell {
    display: flex;
    align-items: center;
    color: var(--text-general);
}
.transactions__profit--win {
    color: var(--text-profit-success);
}
.transactions__profit--win:before {
    content: '+';
}
.transactions__profit--loss {
    color: var(--text-loss-danger);
}
.transactions__profit--loss:before {
    content: '-';
}
.transactions__info-header {
    font-weight: bold;
}
.transactions__popover-title {
    font-size: 1rem;
    color: var(--text-general);
    font-weight: 400;
    text-transform: none;
    text-align: start;
    line-height: 1.4;
}
.transactions__popover-item {
    font-size: 1.2rem;
    color: var(--text-general);
    font-weight: 700;
    text-transform: none;
    text-align: start;
    line-height: 1.25;
}
.transactions__popover-item:not(:last-of-type) {
    margin-bottom: 0.8rem;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.transaction-details-modal-mobile {
    color: var(--text-general);
}
.transaction-details-modal-mobile .dc-mobile-full-page-modal {
    background: var(--general-main-2);
}
.transaction-details-modal-mobile .dc-mobile-full-page-modal__body {
    overflow-y: scroll;
    height: calc(100vh - 30rem);
}
.transaction-details-modal-mobile .dc-page-overlay__header-wrapper {
    padding: 0px 16px;
}
.transaction-details-modal-mobile .dc-page-overlay__header-title {
    text-align: start;
}
.transaction-details-modal-mobile__wrapper {
    display: flex;
    flex-wrap: wrap;
    width: 100%;
    align-content: flex-start;
    height: fit-content;
}
.transaction-details-modal-mobile__icon-wrapper {
    display: flex;
    align-items: center;
}
.transaction-details-modal-mobile__icon-wrapper * {
    margin-right: 2px;
}
.transaction-details-modal-mobile__card {
    display: flex;
    background: var(--general-section-2);
    width: 100%;
    flex-direction: column;
    padding: 8px 16px;
    margin: 8px 16px;
    border-radius: 8px;
    height: fit-content;
}
.transaction-details-modal-mobile__card__row {
    display: flex;
    justify-content: space-between;
    padding: 8px 0px;
}
.transaction-details-modal-mobile__card__column {
    width: 100%;
}
.transaction-details-modal-mobile__card__profit--win {
    color: var(--text-profit-success);
}
.transaction-details-modal-mobile__card__profit--win:before {
    content: '+';
}
.transaction-details-modal-mobile__card__profit--loss {
    color: var(--text-loss-danger);
}
.transaction-details-modal-mobile__card__profit--loss:before {
    content: '-';
}
.transaction-details-modal-mobile__small-title {
    font-size: 12px;
    font-weight: 700;
}
.transaction-details-modal-mobile__large-title {
    font-size: 14px;
    font-weight: 700;
}
.transaction-details-modal-mobile__label {
    font-size: 14px;
    line-height: 24px;
}
.transaction-details-modal-mobile__right-align {
    text-align: end;
}
.transaction-details-modal-mobile__divider {
    padding: 8px 16px;
    width: 100%;
}
.transaction-details-modal-mobile__card__footer {
    position: fixed;
}
.transaction-details-modal-mobile__card__footer .run-panel__stat {
    margin: 0;
    position: fixed;
    bottom: 0;
    width: 100%;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.bot__loading {
    position: fixed;
    z-index: 99999;
    top: 0;
    bottom: 0;
    background-color: var(--overlay-outside-dialog);
    pointer-events: none;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.notifications-container {
    position: absolute;
    top: 6.5rem;
    left: 0;
    width: calc(100vw - 1.6rem);
    height: calc(100% - 6.5rem);
}
.notifications-container .notification-messages {
    transition:
        transform 0.3s ease,
        opacity 0.25s linear;
}
.notifications-container__dashboard .notification-messages {
    transform: translate3d(-42.7rem, 0, 0);
}
[dir='rtl'] .notifications-container__dashboard .notification-messages {
    transform: translate3d(42.7rem, 0, 0);
}
.notifications-container--panel-open .notification-messages {
    transform: translate3d(-36.5rem, 0, 0);
}
[dir='rtl'] .notifications-container--panel-open .notification-messages {
    transform: translate3d(38rem, 0, 0);
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-dialog__wrapper--google-drive .dc-dialog__dialog {
    width: unset;
    max-width: unset;
    height: unset;
    max-height: unset;
    padding: 2.4rem;
    background-color: var(--general-main-2);
}
.dc-dialog__wrapper--google-drive .dc-dialog__content .load-strategy__container {
    height: unset;
}
.dc-dialog__wrapper--google-drive .dc-dialog__footer {
    display: none;
}

.picker-dialog {
    z-index: 9999 !important;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.load-strategy__section_message {
    --bg-section-message-warning: rgba(255, 156, 19, 0.08);
    margin-top: -16px;
    margin-bottom: 8px;
    display: flex;
    align-items: center;
    padding: 16px;
    border-radius: 16px;
    background-color: var(--bg-section-message-warning);
}
.load-strategy__section_message .icon {
    height: 16px;
    width: 16px;
    margin-right: 8px;
}
.load-strategy__section_message .icon .dc-icon {
    --fill-color1: rgb(225 141 0);
}
.load-strategy__section_message .text {
    width: calc(100% - 24px);
}
@media (max-width: 1279px) {
    .load-strategy__section_message {
        margin-top: -8px;
        margin-bottom: 8px;
        margin-inline: -1.6rem;
        border-radius: 0px;
    }
}

.load-strategy__section_message + .load-strategy__local-dropzone-area {
    height: calc(100% - 68px);
}
@media (max-width: 1279px) {
    .load-strategy__section_message + .load-strategy__local-dropzone-area {
        height: calc(100% - 76px);
    }
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
/*
 * Check if the page is in RTL mode
 * Usage example:
   @include is-RTL { left: 0 };
 */
#modal_root .load-strategy__recent {
    display: flex;
    gap: 1.6rem;
}
#modal_root .load-strategy__recent__files {
    width: 35%;
    overflow: auto;
    height: 100%;
    margin: 0.2rem 0;
}
#modal_root .load-strategy__recent__empty {
    display: flex;
    align-items: center;
    justify-content: center;
    align-items: center;
    flex-direction: column;
}
#modal_root .load-strategy__recent__empty-icon {
    margin-bottom: 1.6rem;
}
#modal_root .load-strategy__recent__empty-title {
    margin-bottom: 0.8rem;
    font-size: var(--text-size-s);
    font-weight: bold;
    line-height: 2.4rem;
}
#modal_root .load-strategy__recent__empty-description {
    margin-bottom: 1.6rem;
    font-size: var(--text-size-xs);
    line-height: 2rem;
}
#modal_root .load-strategy__recent__empty-expand {
    margin-bottom: 0.8rem;
    color: var(--brand-red-coral);
    font-size: var(--text-size-xs);
    font-weight: bold;
    cursor: pointer;
}
#modal_root .load-strategy__recent__empty-expand:hover {
    text-decoration: underline;
}
#modal_root .load-strategy__recent__empty-explanation {
    font-size: var(--text-size-xxs);
    text-align: left;
    opacity: 0;
}
#modal_root .load-strategy__recent__empty-explanation-list {
    margin-top: 0.8rem;
}
#modal_root .load-strategy__recent__empty-explanation--show {
    opacity: 1;
    width: fit-content;
}
#modal_root .load-strategy__recent-item {
    grid-template-columns: 1fr 0.6fr;
    position: relative;
    display: grid;
    grid-template-areas: 'text location';
    padding: 1rem 0.8rem;
    align-items: center;
    text-align: center;
}
#modal_root .load-strategy__recent-item:hover {
    cursor: pointer;
}
#modal_root .load-strategy__recent-item:not(:last-child) {
    border-bottom: solid 1px var(--border-divider);
}
#modal_root .load-strategy__recent-item--selected {
    background-color: var(--general-section-2);
}
#modal_root .load-strategy__recent-item-text {
    height: unset;
    flex-direction: column;
    text-align: start;
    padding-right: 0.8rem;
}
#modal_root .load-strategy__recent-item-title {
    font-size: var(--text-size-xs);
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
    text-overflow: ellipsis;
}
#modal_root .load-strategy__recent-item-time {
    font-size: var(--text-size-xxs);
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
    text-overflow: ellipsis;
}
#modal_root .load-strategy__recent-item-saved {
    margin-inline-start: 1rem;
    font-size: var(--text-size-xs);
    line-height: 1.43;
    word-break: break-word;
}
#modal_root .load-strategy__recent-item-location {
    display: flex;
    align-items: center;
    justify-content: flex-start;
    width: 100%;
    word-break: break-word;
    color: var(--text-general);
    height: 100%;
}
#modal_root .load-strategy__recent__preview {
    width: 65%;
    flex-basis: 65%;
    display: flex;
    flex-direction: column;
}
#modal_root .load-strategy__recent__preview .load-strategy__preview-workspace {
    height: calc(100% - 5.2rem);
    min-height: unset;
    margin: 0;
}
#modal_root .load-strategy__recent__preview-title {
    margin: 1.5rem 0;
    margin-left: 0;
}
#modal_root .load-strategy__recent__preview__title {
    margin-left: 0;
}
#modal_root .load-strategy__container--has-footer {
    height: calc(80vh - 21rem);
    margin-top: -1rem;
}
#modal_root .load-strategy__title {
    margin: 1.5rem;
}
#modal_root .load-strategy__preview-workspace {
    min-height: unset;
    height: unset;
    margin: 0;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
/*
 * Check if the page is in RTL mode
 * Usage example:
   @include is-RTL { left: 0 };
 */
.dc-modal__container_modal--save {
    min-width: 320px !important;
}
.dc-modal__container_modal--save .modal__content {
    padding: 16px 24px;
}
.dc-modal__container_modal--save .modal__footer {
    text-align: right;
    border-top: 2px solid var(--general-section-2);
}
.dc-modal__container_modal--save .modal__footer--button {
    margin: 1.4rem 1.6rem 1.4rem 0;
    display: inline-block;
}
.dc-modal__container_modal--save .modal__content-row {
    display: flex;
    align-items: center;
    justify-content: center;
}
.dc-modal__container_modal--save form {
    height: 445px;
    display: flex;
    justify-content: space-between;
    flex-direction: column;
}

div.radio-group__save-type {
    display: flex;
    justify-content: center;
    margin: 8% 0px;
}
div.radio-group__save-type .dc-radio-group__item {
    display: flex;
    flex-direction: column;
    padding: 24px;
    width: 128px;
    border-radius: 4px;
}
div.radio-group__save-type .dc-radio-group__item--selected {
    border: solid 1px #85acb0;
}
div.radio-group__save-type .dc-radio-group__item--selected .save-type__radio-text {
    font-weight: 700;
}
div.radio-group__save-type .dc-radio-group__item-disabled .save-type__text {
    color: var(--general-disabled) !important;
}
div.radio-group__save-type .dc-radio-group__item-disabled .dc-radio-group__circle {
    border-color: var(--general-disabled) !important;
}
div.radio-group__save-type .dc-radio-group__circle {
    display: none;
}
div.radio-group__save-type .dc-radio-group__label {
    align-self: center;
}

.save-type__container {
    text-align: center;
}
.save-type__input {
    margin: 2rem 0 0 !important;
}
.save-type__radio {
    text-align: center;
}
.save-type__radio-text {
    letter-spacing: normal;
}
.save-type__drive-status {
    cursor: pointer;
    position: absolute;
    margin-top: 5px;
    width: 71px;
}
.save-type__icon--disabled {
    opacity: 0.32;
}

.save-modal__wrapper {
    position: fixed;
    top: 40px;
    z-index: 10;
}
@media (max-width: 1279px) {
    .save-modal__wrapper form {
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        height: 100%;
    }
    .save-modal__wrapper .dc-input {
        width: 100% !important;
        margin: 3rem 0 0 !important;
    }
    .save-modal__wrapper .dc-radio-group__item {
        width: calc(50vw - 24px) !important;
        height: 35vw;
    }
    .save-modal__wrapper .save-type__drive-status {
        position: relative;
    }
    .save-modal__wrapper .modal__content {
        padding: 3rem 1.6rem;
        height: calc(100% - 70px);
    }
    .save-modal__wrapper .modal__footer {
        position: fixed;
        bottom: 0px;
        left: 0px;
        display: flex;
        flex-direction: row;
        justify-content: flex-end;
        padding: 1.4rem;
        height: 70px;
        border-top: solid 0.1em var(--general-section-1);
        width: 100%;
    }
    .save-modal__wrapper .modal__footer--active-keyboard {
        margin-top: 1.6rem;
        position: relative;
        display: block;
        left: unset;
        bottom: unset;
    }
    .save-modal__wrapper .modal__footer--button {
        float: right;
        margin-left: 0.8rem;
        height: 4rem;
    }
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dbot-accordion {
    width: 100%;
}
.dbot-accordion__navbar {
    display: flex;
    width: 100%;
    padding: 0.6rem 1.6rem;
    cursor: pointer;
    background-color: transparent;
    border: none;
    outline: none;
    padding-left: 0;
    border-bottom: 1px solid var(--general-section-1);
}
@media (max-width: 1279px) {
    .dbot-accordion__navbar {
        padding: 0.6rem 1rem;
    }
}
.dbot-accordion__navbar--no-event {
    pointer-events: none;
    border-bottom: none;
    padding: 0.6rem 0;
}
@media (max-width: 1279px) {
    .dbot-accordion__navbar--no-event {
        padding: 0.6rem 0 0.6rem 1rem;
    }
}
.dbot-accordion__header {
    width: 90%;
    text-align: start;
    padding-left: 1rem;
}
@media (max-width: 1279px) {
    .dbot-accordion__header {
        width: 100%;
        padding-left: 0;
    }
}
.dbot-accordion__header span {
    color: var(--text-prominent);
}
.dbot-accordion__icon {
    width: 10%;
    color: #ffffff;
    text-align: end;
}
.dbot-accordion__content {
    overflow: hidden;
    max-height: 0;
    opacity: 0;
    color: var(--text-prominent);
    padding: 1rem 0;
}
.dbot-accordion__content--open {
    opacity: 1;
    max-height: fit-content;
}
@media (max-width: 1279px) {
    .dbot-accordion__content--open {
        padding-left: 1rem;
    }
}
.dbot-accordion__content .joyride-content {
    line-height: 1.8rem;
}

.qs .dbot-accordion__content {
    background-color: transparent;
}
.qs .dbot-accordion__header {
    text-align: start;
}
.qs .dbot-accordion__header--cursive {
    font-style: italic;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.strategy-template-picker {
    width: calc(100% - 3rem);
    margin: 1.6rem;
}
@media (min-width: 1280px) {
    .strategy-template-picker {
        max-width: 45rem;
    }
}
.strategy-template-picker__icon {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 3.2rem;
    width: 3.2rem;
    padding: 0.7rem;
    border: 1px solid var(--general-section-6);
    border-radius: 2rem;
    background-color: unset;
    cursor: pointer;
}
.strategy-template-picker__icon svg g {
    fill: var(--icon-black-plus);
}
.strategy-template-picker__panel {
    display: flex;
    justify-content: center;
    column-gap: 1rem;
    height: 3.2rem;
    margin-bottom: 1.6rem;
}
.strategy-template-picker__panel .quill-input__container {
    background-color: var(--general-section-1);
    border-radius: 1rem;
}
.strategy-template-picker__panel .quill-input__container .input__align--left {
    background-color: var(--general-section-6);
}
.strategy-template-picker__panel .quill-input__wrapper__variant--outline {
    background-color: unset;
    border: none;
}
.strategy-template-picker__chips {
    display: flex;
    flex-direction: row;
    margin-bottom: 0.8rem;
    column-gap: 0.8rem;
}
.strategy-template-picker__strategies {
    display: flex;
    flex-direction: column;
}
.strategy-template-picker__strategies .quill-link {
    display: flex;
    justify-content: space-between;
    text-decoration: none;
    border-bottom: 1px solid var(--general-section-1);
}
.strategy-template-picker__strategies .quill-typography {
    margin: 0.8rem 0;
}
.strategy-template-picker__strategy {
    margin-bottom: 0.8rem;
}
.strategy-template-picker__links {
    margin: 0 0.8rem;
}
.strategy-template-picker__links .quill-typography {
    color: var(--text-general);
}
.strategy-template-picker__title {
    margin: 0.8rem 0;
}

.qs__body__content {
    padding: 0 !important;
}
.qs__body__content .deriv-linear-progress-bar {
    margin: 0;
}
.qs__body__content .deriv-linear-progress-bar__track {
    position: fixed;
    z-index: 2;
    margin: 0;
    left: 0;
}
.qs__body__content__footer--back {
    color: var(--brand-red-coral);
}
@media (min-width: 1280px) {
    .qs__body__content__footer .dc-btn--transparent {
        left: 2.4rem;
        position: absolute;
    }
}
@media (min-width: 1280px) {
    [dir='rtl'] .qs__body__content__footer .dc-btn--transparent {
        right: 2.4rem;
    }
}
.qs__body__sidebar .qs-stepper {
    margin: 0 1.6rem;
}
.qs__body__sidebar .qs-stepper .step .quill-typography {
    font-size: 1.4rem;
}
@media (min-width: 601px) and (max-width: 1279px) {
    .qs__form__container--template {
        display: flex;
        flex-direction: column;
        align-items: center;
    }
}
.qs__selected-options {
    display: flex;
    flex-direction: column;
    gap: 1.6rem;
    margin: 1.6rem;
    padding: 0.8rem var(--group-outer-padding);
    background-color: var(--general-section-1);
    border-radius: 0.8rem;
}
@media (min-width: 1280px) {
    .qs__selected-options {
        margin: 1.6rem 2.4rem;
    }
}
.qs__selected-options__item {
    display: flex;
    justify-content: space-between;
}
.qs__selected-options__item__description {
    width: 25rem;
    font-size: 1.4rem;
    text-align: end;
}
@media (max-width: 600px) {
    .qs__selected-options__item__description {
        width: 25rem;
        font-size: 1.4rem;
        flex-direction: column;
        justify-content: center;
        text-align: right;
    }
}

.quick-strategy__wrapper .dc-page-overlay__header-title {
    text-align: left;
    margin-left: 1.6rem;
}

[dir='rtl'] .dc-page-overlay__header-close {
    right: 2.4rem;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
/*
 * Check if the page is in RTL mode
 * Usage example:
   @include is-RTL { left: 0 };
 */
.qs {
    --sidebar-width: 24rem;
    --footer-height: 7.2rem;
    --header-height: 5.6rem;
    --min-content-height: 40rem;
    --input-height: 4.8rem;
    --select-height: 4.8rem;
    --input-border-radius: 0.4rem;
    --input-action-height: 4.6rem;
    --input-action-width: 4.6rem;
    --group-outer-padding: 1.6rem;
}
@media (max-width: 1279px) {
    .qs {
        --select-height: 4rem;
        --input-height: 3.4rem;
        --footer-height: 4.2rem;
        --input-action-height: 3rem;
        --input-action-width: 3rem;
        width: 100%;
    }
}
.qs .x-center,
.qs .qs__checkbox__container,
.qs .qs__checkbox,
.qs .qs__input-label,
.qs .qs__select__option,
.qs .qs__body__content__head__tabs,
.qs .qs__head__title {
    display: flex;
    align-items: center;
}
.qs__head {
    display: flex;
    align-items: center;
    justify-content: space-between;
    border-bottom: 1px solid var(--border-divider);
}
.qs__head__title {
    padding: 0 2.4rem;
    height: var(--header-height);
    background-color: var(--general-section-1);
    width: var(--sidebar-width);
}
.qs__head__action {
    padding: 0 2.4rem;
}
.qs__head__action span:hover {
    cursor: pointer;
}
.qs__body {
    display: flex;
}
@media (min-width: 1280px) {
    .qs__body {
        height: 72rem;
    }
}
@media (max-width: 600px) {
    .qs__body {
        display: block;
    }
}
@media (min-width: 601px) and (max-width: 1279px) {
    .qs__body {
        justify-content: center;
    }
}
.qs__body__sidebar {
    background-color: var(--general-section-1);
    width: var(--sidebar-width);
}
.qs__body__sidebar__subtitle {
    padding: 1rem 1.6rem;
}
.qs__body__sidebar__items ul {
    list-style: none;
    padding: 0;
    margin: 0;
}
.qs__body__sidebar__items ul li {
    border-left: 4px solid transparent;
    height: 4rem;
    padding: 1rem 1.6rem 1rem 4rem;
    user-select: none;
}
.qs__body__sidebar__items ul li:hover {
    background-color: var(--general-main-1);
    cursor: pointer;
}
.qs__body__sidebar__items ul li.active {
    border-left: 4px solid var(--brand-red-coral);
    background-color: var(--general-main-1);
}
.qs__body__content {
    display: flex;
    flex-direction: column;
    background-color: var(--general-main-1);
    width: calc(100% - var(--sidebar-width));
    position: relative;
    padding: 0.8rem;
}
@media (max-width: 600px) {
    .qs__body__content {
        width: 100%;
        padding: 0;
    }
}
@media (min-width: 601px) and (max-width: 1279px) {
    .qs__body__content {
        max-width: 60rem;
    }
}
.qs__body__content__head {
    display: flex;
    align-items: center;
    justify-content: center;
    padding-bottom: 1rem;
}
@media (max-width: 1279px) {
    .qs__body__content__head {
        padding: 0 1.6rem 1.6rem;
        margin-top: 1.6rem;
    }
}
.qs__body__content__head__tabs {
    background-color: var(--general-section-1);
    padding: 0.4rem;
    border-radius: 0.6rem;
    height: 4rem;
}
@media (max-width: 1279px) {
    .qs__body__content__head__tabs {
        width: 100%;
    }
}
.qs__body__content__head__tabs__tab {
    display: inline-block;
    text-align: center;
    min-width: 16rem;
    padding: 0.6rem 0.8rem;
    border-radius: 0.4rem;
    user-select: none;
}
@media (max-width: 1279px) {
    .qs__body__content__head__tabs__tab {
        min-width: auto;
        width: 50%;
    }
}
.qs__body__content__head__tabs__tab:hover {
    cursor: pointer;
}
.qs__body__content__head__tabs__tab.active {
    background-color: var(--general-main-1);
}
.qs__body__content__head__tabs__tab.disabled {
    cursor: pointer;
    pointer-events: none;
    opacity: 0.5;
}
.qs__body__content__description {
    padding: 1rem 2.4rem;
}
@media (max-width: 1279px) {
    .qs__body__content__description {
        padding: 1rem;
    }
}
.qs__body__content__select {
    padding: 0 1.6rem;
}
.qs__body__content__title {
    text-align: center;
}
.qs__body__content__form {
    padding: 0 2.4rem;
}
@media (max-width: 1279px) {
    .qs__body__content__form {
        padding: 0 1.6rem;
    }
}
.qs__body__content__form__group {
    width: 100%;
    background-color: var(--general-section-1);
    margin: auto;
    border-radius: 0.8rem;
    padding: 0.8rem var(--group-outer-padding) 1.6rem;
    margin-bottom: 1.6rem;
}
.qs__body__content__form__group:last-child {
    margin-bottom: 0;
}
.qs__body__content__footer {
    height: var(--footer-height);
    border-top: 1px solid var(--border-divider);
    display: flex;
    align-items: center;
    justify-content: flex-end;
    padding: 1.6rem 2.4rem;
    background-color: var(--general-main-1);
}
.qs__body__content__footer button {
    margin-inline-end: 1rem;
}
.qs__body__content__footer button:last-child {
    margin-inline-end: 0;
}
.qs__form__container {
    min-height: 10rem;
    max-height: calc(100vh - 23rem) !important;
    margin-bottom: 1rem;
    overflow-y: auto;
}
@media (min-width: 1280px) {
    .qs__form__container {
        height: calc(100vh - 16rem) !important;
    }
}
@media (max-width: 600px) {
    .qs__form__container {
        margin-bottom: 0;
        max-height: calc(100% - 12.2rem) !important;
    }
}
.qs__form__container--no-footer {
    max-height: 100% !important;
}
@media (max-width: 600px) {
    .qs__form__container--no-footer {
        max-height: calc(100% - 8rem) !important;
    }
}
.qs__form__field {
    width: 100%;
}
.qs__form__field__input {
    margin-bottom: 0.8rem;
}
.qs__form__field__group-icons .qs__autocomplete .dc-input__leading-icon {
    height: 2.4rem;
    width: auto;
}
.qs__form__field__group-icons .qs__autocomplete .dc-input__leading-icon .dc-icon {
    height: 1.4rem;
    width: 1.4rem;
}
.qs__form__field__group-icons .qs__autocomplete .qs__select__option .dc-icon {
    height: 1.4rem;
    width: 1.4rem;
}
.qs__form__field.no-top-spacing {
    padding-top: 0;
}
.qs__form__field.no-border-top .dc-input__container {
    border-top-left-radius: 0;
    border-top-right-radius: 0;
}
.qs__form__field.no-top-border-radius .dc-input__container {
    border-bottom-left-radius: 0;
    border-bottom-right-radius: 0;
}
.qs__form__field.no-border-bottom-radius .qs__checkbox {
    border-bottom-left-radius: 0;
    border-bottom-right-radius: 0;
}
.qs__form__field.no-bottom-spacing {
    padding-bottom: 0;
}
.qs__form__field.no-bottom-border-radius .dc-input__container {
    border-bottom-left-radius: 0;
    border-bottom-right-radius: 0;
}
.qs__form__field__list {
    margin: 0;
    padding: 0;
    display: flex;
    margin-bottom: 0.8rem;
}
.qs__form__field__list__item {
    flex: 1;
    height: var(--input-height);
    background: var(--general-main-1);
    line-height: var(--input-height);
    text-align: center;
    font-size: 12px;
}
.qs__form__field__list__item:first-child {
    border-top-left-radius: 4px;
    border-bottom-left-radius: 4px;
}
.qs__form__field__list__item:last-child {
    border-top-right-radius: 4px;
    border-bottom-right-radius: 4px;
}
.qs__form__field__list__item--active {
    font-weight: bold;
    background: var(--general-active);
}
.qs__form__field .contract-type .dc-input__field {
    font-weight: normal;
}
.qs__form__field:last-child .dc-input__container {
    margin-bottom: 0;
}
.qs__form__field .dc-input__bottom-label {
    position: relative;
    height: 0;
    margin: 0;
    padding: 0;
    top: -3.4rem;
    right: 6rem;
    display: flex;
    flex-direction: row-reverse;
}
@media (max-width: 1279px) {
    .qs__form__field .dc-input__bottom-label {
        top: -2.6rem;
        right: 5rem;
    }
}
.qs__form__field .dc-input__bottom-label .dc-text {
    color: var(--text-general) !important;
}
.qs__autocomplete {
    caret-color: transparent;
}
.qs__autocomplete .dc-input__container {
    border: none;
    height: var(--select-height);
    background: var(--general-main-1);
    padding: 0.8rem 2.4rem;
}
.qs__autocomplete .dc-input__leading-icon {
    top: 1.4rem;
    left: 1.4rem;
    height: 2.4rem;
    width: 2.4rem;
}
@media (max-width: 1279px) {
    .qs__autocomplete .dc-input__leading-icon {
        top: 50%;
        left: 0;
        transform: translateY(-50%);
    }
}
.qs__autocomplete .dc-input__leading-icon .dc-icon {
    margin-right: 0.6rem;
}
.qs__autocomplete .dc-input__leading-icon .dc-icon:last-child {
    margin-right: 0;
}
.qs__autocomplete .dc-input__field {
    margin-inline-start: 6rem;
    font-weight: bold;
    color: var(--text-general);
}
.qs__autocomplete .dc-input__field[name='symbol'] {
    caret-color: auto;
}
.qs__autocomplete .dc-input__trailing-icon {
    margin-right: 2.4rem;
}
.qs__select {
    caret-color: transparent;
}
.qs__select .dc-input__container {
    border: none;
    height: var(--select-height);
    background: var(--general-main-1);
    padding: 0.8rem 2.4rem;
}
.qs__select .dc-input__field {
    font-weight: bold;
    color: var(--text-general);
}
@media (max-width: 1279px) {
    .qs__select .dc-input__field {
        text-align: center;
    }
}
.qs__select .dc-input__leading-icon {
    top: 1.6rem;
    left: 1.6rem;
}
.qs__select .dc-input__leading-icon .dc-icon {
    margin-right: 0.6rem;
}
.qs__select .dc-input__leading-icon .dc-icon:last-child {
    margin-right: 0;
}
.qs__select .dc-input__trailing-icon {
    margin-right: 2.4rem;
}
.qs__select__option__text {
    margin-left: 3rem;
}
.qs__select__option__icon {
    background-color: var(--icon-grey-background);
    margin-left: 0.8rem;
}
.qs__select__option__icon:first-child {
    margin-left: 0;
}
.qs__select__option .dc-icon {
    height: 2.4rem;
    width: auto;
}
.qs .seddle-actions,
.qs .qs__input .dc-input__trailing-icon,
.qs__input .qs .dc-input__trailing-icon,
.qs .qs__input .dc-input__leading-icon,
.qs__input .qs .dc-input__leading-icon {
    display: flex;
    align-items: center;
    justify-content: center;
    position: absolute;
    background: transparent;
    border: none;
    font-size: 20px;
    line-height: 20px;
    width: var(--input-action-width);
    height: var(--input-action-height);
    border-radius: 2px;
    pointer-events: auto;
    margin: 0;
    top: 50%;
    transform: translateY(-50%);
}
.qs .seddle-actions:hover,
.qs .qs__input .dc-input__trailing-icon:hover,
.qs__input .qs .dc-input__trailing-icon:hover,
.qs .qs__input .dc-input__leading-icon:hover,
.qs__input .qs .dc-input__leading-icon:hover {
    background: var(--general-section-1);
    cursor: pointer;
}
.qs__input {
    margin: 0;
}
.qs__input.highlight {
    border: 1px solid var(--status-warning);
}
.qs__input .dc-input__container {
    height: var(--input-height);
    border: 1px solid transparent;
    background-color: var(--general-main-1);
}
.qs__input .dc-input__container:hover {
    border: 1px solid var(--border-hover);
}
.qs__input .dc-input__leading-icon {
    left: 0.3rem;
    color: var(--text-general);
}
@media (max-width: 1279px) {
    .qs__input .dc-input__leading-icon {
        left: 0.2rem;
    }
}
.qs__input .dc-input__leading-icon:hover {
    background-color: var(--state-hover);
}
.qs__input .dc-input__leading-icon:disabled {
    opacity: 0.32;
    pointer-events: none;
}
.qs__input .dc-input__trailing-icon {
    right: 1rem;
    color: var(--text-general);
}
@media (max-width: 1279px) {
    .qs__input .dc-input__trailing-icon {
        right: 1.6rem;
    }
}
.qs__input .dc-input__trailing-icon:hover {
    background-color: var(--state-hover);
}
.qs__input .dc-input__trailing-icon:disabled {
    opacity: 0.32;
    pointer-events: none;
}
.qs__input .dc-input__field {
    margin: 0 4rem;
    text-align: center;
    color: var(--text-general);
}
.qs__input.error .dc-input__container {
    border: 1px solid var(--text-loss-danger);
}
.qs__input-label {
    height: var(--input-height);
}
.qs__input-label__wrapper {
    margin-inline-end: 1rem;
}
.qs__checkbox__container {
    height: calc(var(--input-height) - 0.5rem);
    width: 100%;
}
.qs__checkbox__container .dc-checkbox {
    margin-inline-end: 1rem;
    gap: 0.5rem;
}
.qs__checkbox__container .dc-checkbox .dc-text:first-child {
    font-weight: bold;
}
.qs__checkbox__container .dc-toggle-switch__label {
    width: 4.6rem;
    padding: 0 0.2rem;
    background: var(--core-color-opacity-black-200, rgba(0, 0, 0, 0.16));
    margin-right: 0;
}
.qs__description__content {
    margin-bottom: 0.8rem;
}
@media (min-width: 1280px) {
    .qs__description__content {
        padding-left: 1rem;
    }
}
.qs__description__content.italic {
    font-style: italic;
}
.qs__description__content.italic span {
    font-size: 1.2rem;
}
@media (max-width: 1279px) {
    .qs__description__content.italic span {
        font-size: 1.2rem;
    }
}
.qs__description__content.no-margin {
    margin-bottom: 0;
}
.qs__description__content.no-margin:last-child {
    margin-bottom: 0.8rem;
}
.qs__description__content.top-margin {
    margin-top: 1rem;
}
.qs__description__image {
    width: 100%;
    margin-bottom: 2rem;
}
@media (max-width: 1279px) {
    .qs__description__image {
        height: 36rem;
    }
}
.qs__description__image img {
    height: 100%;
    width: auto;
    max-width: 100%;
    object-fit: contain;
}
@media (min-width: 1280px) {
    .qs__description__image {
        padding-left: 1rem;
    }
}
.qs__description__image.formula {
    width: unset;
    margin: 1.5rem 0.5rem;
}

.sell_conditions__take_profit,
.sell_conditions__tick_count {
    margin-bottom: 0.8rem;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.loss-threshold-warning-dialog__body-text {
    font-size: 1.5rem;
    line-height: 18px;
    margin: 12px 0px;
    margin-bottom: 22px;
    color: var(--text-general);
}
.loss-threshold-warning-dialog .dc-dialog__header--title {
    max-width: 90%;
}
@media (max-width: 1279px) {
    .loss-threshold-warning-dialog .dc-dialog__footer {
        display: flex;
        width: 100%;
    }
}
@media (min-width: 320px) and (max-width: 767px) {
    .loss-threshold-warning-dialog .dc-dialog__button {
        margin-inline-start: 0;
    }
}
.loss-threshold-warning-dialog .dc-dialog__dialog .dc-checkbox__box {
    margin: 0 8px 0 0;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
@keyframes fade-in {
    0% {
        opacity: 0;
    }
    100% {
        opacity: 1;
    }
}
.flyout {
    position: absolute;
    inset-inline-start: 250px;
    top: 0;
    background-color: var(--general-main-2);
    height: calc(100vh - 232px);
    max-height: calc(100vh - 232px);
    z-index: 11;
    border-radius: 4px;
    font-size: 2em;
    margin-inline-start: 15px;
    margin-top: 20px;
    box-shadow: 0 2px 8px 0 var(--shadow-box);
    min-width: 400px;
    visibility: hidden;
}
.flyout__item:hover .flyout__button-add--hide {
    display: flex !important;
    animation: fade-in 0.3s;
}
.flyout__content {
    overflow: auto;
    height: calc(100% - 64px);
}
.flyout__content .dc-themed-scrollbars {
    padding: 5px 25px;
}
.flyout__content-disclaimer {
    display: flex;
    justify-content: space-around;
    background: #ffad3a;
    font-size: var(--text-size-xs);
    margin-top: 1.6em;
    line-height: 1.3em;
    padding: 0.8rem;
    border-radius: 4px;
}
.flyout__content-disclaimer-text {
    color: #333333;
    width: 324px;
}
.flyout__content-disclaimer-icon {
    padding-top: 0.8rem;
}
.flyout__block-workspace--top {
    margin-bottom: 15px;
}
.flyout__block-workspace--center {
    margin-top: 0.6em;
}
.flyout__block-workspace--center .injectionDiv {
    height: 100%;
}
.flyout__block-workspace__header {
    display: flex;
}
.flyout__button-new {
    width: 20%;
    height: 4rem !important;
    font-size: var(--text-size-xs);
    font-weight: bold;
    border-top-left-radius: 0rem !important;
    border-bottom-left-radius: 0rem !important;
}
.flyout__button-add {
    color: var(--general-main-1);
}
.flyout__button-add--hide {
    display: none !important;
}
.flyout__button-back {
    padding: 0 15px;
    align-self: center;
    background-color: transparent;
    color: #000000;
}
.flyout__button-back svg {
    vertical-align: middle;
}
.flyout__button-back:focus {
    outline: none;
}
.flyout__button-next,
.flyout__button-previous {
    margin-inline-start: 1em;
    color: rgba(0, 0, 0, 0.8);
    background-color: var(--general-section-1);
    display: flex;
}
.flyout__item {
    line-height: 1.3em;
    font-size: var(--text-size-xs);
}
.flyout__item:not(:last-of-type) {
    margin-bottom: 30px;
}
.flyout__item-header {
    display: flex;
    margin-top: 15px;
    margin-bottom: 10px;
}
.flyout__item-buttons {
    margin-inline-start: auto;
    align-self: center;
}
.flyout__item-info {
    cursor: pointer;
    font-weight: bold;
    display: block;
    color: #e31c4b;
}
.flyout__item-description {
    font-size: var(--text-size-xs);
    margin-bottom: 1em;
    line-height: 1.3em;
    color: var(--text-general);
}
.flyout__image {
    width: 100%;
    height: auto;
    border-radius: 0.5em;
}
.flyout__video {
    width: 100%;
    height: 20vh;
    border-radius: 0.5em;
}
.flyout__help {
    padding: 0;
    height: 100%;
    visibility: visible;
}
.flyout__help-header {
    padding: 15px;
    display: flex;
    background-color: var(--general-section-1);
}
.flyout__help-content {
    padding: 1.5em;
    font-size: 0.8em;
    overflow-y: auto;
    height: calc(100vh - 295px);
}
.flyout__help-content .flyout__item {
    margin-bottom: 0.8em;
}
.flyout__help-title {
    align-self: center;
}
.flyout__help-footer {
    display: flex;
    justify-content: flex-end;
    padding: 0.5em 0.8em;
    border-top: solid 0.1em var(--general-section-1);
}
.flyout__search {
    padding: 0;
    visibility: visible;
}
.flyout__search-header {
    padding: 20px;
    background-color: var(--general-disabled);
    display: flex;
    justify-content: space-between;
}
.flyout__search-header-text {
    align-self: center;
}
.flyout__search-empty {
    padding: 25px 0;
}
.flyout__search .flyout__help-content {
    height: calc(100% - 60px);
}
.flyout__normal {
    visibility: visible;
}
.flyout__normal-content {
    height: 100%;
}
.flyout__input {
    width: 80% !important;
    height: 4rem;
    border-top-right-radius: 0rem !important;
    border-bottom-right-radius: 0rem !important;
    border: solid 1px #d6dadb !important;
    display: inline-block !important;
    margin-top: 3.3rem;
}
.flyout__hr {
    height: 2px;
    width: 100%;
    border-top: 1px solid var(--general-section-1);
    position: absolute;
    left: 0;
    right: 0;
    margin: 0;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.toolbar {
    height: 5.6rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.5rem 0.6rem;
    position: absolute;
    top: 0;
    inset-inline-start: 23.2rem;
    background-color: var(--general-main-1);
    z-index: 1;
}
@media (max-width: 1279px) {
    .toolbar {
        height: 64px;
        position: absolute;
        overflow-y: auto;
        inset-inline-start: 4rem;
        overflow-x: auto;
        width: fit-content;
        padding: 0;
        -ms-overflow-style: none;
        scrollbar-width: none;
        z-index: 0;
    }
    .toolbar::-webkit-scrollbar {
        display: none;
    }
}
.toolbar__btn {
    background-color: var(--button-primary-default) !important;
}
.toolbar__btn--icon {
    display: flex;
    justify-content: center;
    height: 4rem !important;
}
@media (min-width: 1280px) {
    .toolbar__btn--icon {
        width: 22rem;
        margin-bottom: 1rem;
    }
}
.toolbar__btn--icon .dc-btn__icon {
    padding-right: 0.4rem;
}
.toolbar__btn--icon > * {
    align-self: center;
}
.toolbar__btn--icon-text {
    font-size: 1.6rem;
    color: var(--text-colored-background);
    font-weight: 700;
    text-transform: none;
    text-align: center;
    line-height: 1.75;
}
.toolbar__section {
    display: flex;
}
@media (max-width: 1279px) {
    .toolbar__section {
        flex-direction: row-reverse;
        height: 100%;
        column-gap: 1.6rem !important;
        padding-top: 1.6rem;
        padding-inline-start: 1.6rem;
        padding-bottom: 0.8rem;
        padding-inline-end: 0.8rem;
    }
}
@media (min-width: 1280px) {
    .toolbar__section > * {
        align-self: center;
    }
}
.toolbar__icon {
    cursor: pointer;
    border: none;
    margin: auto 1.2rem;
    height: 1.6rem;
    width: 1.6rem;
    fill: var(--text-prominent);
}
@media (max-width: 1279px) {
    .toolbar__icon {
        margin: 1.2rem;
    }
}
.toolbar__group {
    display: flex;
    border-radius: 4px;
    border: solid 1px var(--border-normal);
    height: 4rem;
}
.toolbar__group-btn {
    padding: 0 1.2rem;
    height: 4rem;
}
@media (max-width: 1279px) {
    .toolbar__group-btn {
        padding: 0;
        height: fit-content;
        flex-direction: column;
        border: none;
    }
    .toolbar__group-btn .dc-popover__target {
        width: 4rem;
    }
}
.toolbar__group-btn > * {
    align-self: center;
}
.toolbar__animation {
    width: 35rem;
}
.toolbar__dialog-text--second {
    margin-top: 2.4rem;
}
@media (max-width: 1279px) {
    .toolbar__wrapper {
        background-color: var(--general-main-1);
        position: absolute;
        top: 0;
        overflow-y: auto;
        scrollbar-width: none;
        height: calc(100% - 5rem);
        box-shadow:
            0 1.2rem 1.6rem rgba(14, 14, 14, 0.08),
            0 0.4rem 0.6rem rgba(14, 14, 14, 0.03);
    }
}

@keyframes spin {
    0% {
        transform: rotate(0deg);
    }
    100% {
        transform: rotate(360deg);
    }
}
.vertical-divider {
    width: 0.1rem;
    height: 1.7rem;
    margin: 0.8rem;
    background-color: var(--border-normal);
}
@media (max-width: 1279px) {
    .vertical-divider {
        transform: rotate(90deg);
        margin: 0;
    }
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.db-toolbox {
    position: absolute;
    top: 0;
    inset-inline-start: 0;
    width: 23.6rem;
    height: 100%;
    padding: 0.8rem;
    background: var(--general-main-1);
    z-index: 1;
}
.db-toolbox__title {
    height: 2.6rem;
    line-height: 2.6rem;
    position: relative;
    cursor: pointer;
}
.db-toolbox__title__chevron {
    position: absolute;
    right: 0;
    top: 0.3rem;
    transition: transform 0.3s ease;
}
.db-toolbox__title__chevron--active {
    transform: rotate(180deg);
    top: -0.2rem;
}
.db-toolbox__search {
    padding: 1.3rem 0.8rem;
    height: 6rem;
}
.db-toolbox__search-field {
    margin-bottom: 0 !important;
}
.db-toolbox__search-field input::-ms-clear {
    display: none;
}
.db-toolbox__search-field .dc-input {
    justify-content: center;
}
.db-toolbox__search-field .dc-input__container {
    height: 3.2rem;
    padding: 0.6rem 0.8rem;
    border-radius: 8px;
}
.db-toolbox__search-field .dc-input__container:focus-within {
    border-color: var(--text-general);
}
.db-toolbox__search-field .dc-input__field {
    width: unset;
    height: 2.8rem;
    flex-grow: 1;
    padding: 0.8rem;
    color: var(--text-general);
}
.db-toolbox__search-field .dc-input__leading-icon {
    position: unset;
    pointer-events: unset;
    margin-left: 0.8rem;
    cursor: pointer;
}
.db-toolbox__content {
    display: flex;
    flex-direction: column;
    overflow: hidden;
    user-select: none;
    z-index: 1;
    visibility: visible;
    border: solid 1px var(--general-section-1);
}
.db-toolbox__content-wrapper {
    height: 0;
}
.db-toolbox__content-wrapper.active {
    height: 100%;
}
.db-toolbox__header {
    padding: 8px;
    position: relative;
    font-weight: bold;
    font-size: 1.6em;
    text-align: center;
    color: var(--text-general);
    background-color: var(--general-section-5);
}
.db-toolbox__item {
    display: flex;
    flex-direction: row;
    color: var(--text-general);
}
.db-toolbox__item:hover {
    background-color: var(--general-hover);
    color: var(--text-prominent);
}
.db-toolbox__category-arrow {
    width: 16px;
    height: 16px;
    margin-right: 10px;
    transition: transform 0.3s ease;
}
.db-toolbox__category-arrow--active {
    transform: rotate(180deg);
}
.db-toolbox__category-menu {
    height: calc(100vh - 33.6rem);
    overflow-y: scroll;
}
.db-toolbox__category-text {
    display: flex;
    align-self: center;
    justify-content: space-between;
    margin: 10px;
    width: 100%;
}
.db-toolbox__description {
    font-size: 12px;
    line-height: 1.4;
}
.db-toolbox__label {
    font-weight: bold;
    font-size: 14px;
    line-height: 1.4;
}
.db-toolbox__row {
    cursor: pointer;
    border-top: 1px solid var(--general-section-6);
}
.db-toolbox__row .db-toolbox__category--selected {
    background-color: var(--general-active);
}
.db-toolbox__row:last-of-type {
    border-bottom: 1px solid var(--general-section-6);
}
.db-toolbox__row--active {
    background-color: var(--general-hover);
}
.db-toolbox__button.dc-btn {
    margin: 16px auto;
    padding: 0;
    width: 152px;
    height: 32px;
    color: var(--text-colored-background);
    font-size: 14px;
    font-weight: bold;
    line-height: 1.4;
}
.db-toolbox__sub-category-row {
    padding: 1rem;
    cursor: pointer;
}
.db-toolbox__sub-category-row:hover {
    background-color: var(--general-hover);
}
.db-toolbox__sub-category-row--active {
    background-color: var(--general-hover);
}

.loader {
    border: 1px solid var(--general-active);
    border-top: 1px solid var(--brand-secondary);
    border-radius: 50%;
    width: 16px;
    height: 16px;
    animation: spin 1s linear infinite;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
#scratch_div {
    position: relative;
    width: calc(100vw - 3.2rem);
    height: var(--bot-content-height);
    top: 0;
}
@media (max-width: 1279px) {
    #scratch_div {
        width: 100%;
    }
}

.blocklyText.blocklyTextRootBlockHeader {
    font-size: calc(var(--text-size-sm) * 0.9);
    font-weight: normal;
    font-stretch: normal;
    font-style: normal;
    line-height: 1.43;
    letter-spacing: normal;
    fill: #ffffff;
}

.blocklyMainWorkspaceScrollbar {
    display: none;
}

.injectionDiv {
    height: calc(100vh - 16.4rem);
    position: relative;
    touch-action: none;
    overflow: hidden;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
/*
 * Check if the page is in RTL mode
 * Usage example:
   @include is-RTL { left: 0 };
 */
/**
* @define -panel
**/
.run-panel {
    height: 0;
}
.run-panel__container {
    height: var(--bot-content-height) !important;
    top: 10.4rem !important;
    width: 36.6rem !important;
    right: 0;
}
.run-panel__container--mobile {
    height: 100%;
    position: absolute;
    top: 0;
    left: 0;
    width: 100vw;
    z-index: var(--zindex-drawer);
}
.run-panel__container--mobile-closed {
    position: unset;
}
.run-panel__tile {
    display: flex;
    align-items: center;
    justify-content: center;
    flex-direction: column;
    height: 100%;
}
.run-panel__tile-title {
    min-height: 1.8rem;
    margin-bottom: 4px;
    font-size: 1.2rem;
    color: var(--text-general);
    font-weight: 700;
    text-transform: none;
    text-align: center;
    line-height: 1.25;
}
.run-panel__tile-content {
    height: 18px;
    margin-bottom: 4px;
    font-size: 1.2rem;
    color: var(--text-general);
    font-weight: 400;
    text-transform: none;
    text-align: center;
    line-height: 1.25;
}
.run-panel__stat {
    display: flex;
    align-items: flex-end;
    justify-content: flex-start;
    flex-direction: column;
    width: 35rem;
    background-color: var(--general-section-2);
}
@media (max-width: 1279px) {
    .run-panel__stat {
        margin: 0;
        position: fixed;
    }
}
.run-panel__stat--info {
    display: flex;
    align-items: flex-start;
    justify-content: center;
    width: 33%;
    padding: 16px 0px 2px 0;
    cursor: pointer;
    color: var(--text-general);
}
.run-panel__stat--info-item {
    display: inline-block;
    border-bottom: 1px dotted var(--text-general);
}
.run-panel__stat--tiles {
    width: 100%;
    display: grid;
    grid-template: 64px 64px/1fr 1fr 1fr;
}
.run-panel__stat-amount {
    font-size: 1.2rem;
    color: var(--text-general);
    font-weight: 400;
    text-transform: none;
    text-align: center;
    line-height: 1.25;
}
.run-panel__stat-amount--positive {
    font-weight: bold;
    color: var(--text-profit-success);
}
.run-panel__stat-amount--negative {
    font-weight: bold;
    color: var(--text-loss-danger);
}
.run-panel__stat--mobile {
    width: 100%;
    bottom: 0;
}
.run-panel__footer {
    text-align: center;
    display: flex;
    align-items: center;
    justify-content: space-between;
    flex-direction: column;
}
.run-panel__footer-button {
    width: 318px;
    height: 32px !important;
    margin: 12px 24px;
}
.run-panel__content {
    display: flex;
    justify-content: space-between;
    flex-direction: column;
    overflow: hidden !important;
}
.run-panel__content .dc-tabs__item {
    overflow: hidden;
    text-overflow: ellipsis;
    padding: 0 0.8rem;
}
.run-panel__buttons {
    display: inline-flex !important;
    justify-content: space-between;
    width: 67%;
    margin-top: 1rem;
    align-items: center;
}
.run-panel-tab__content {
    height: calc(100vh - 42rem);
    overflow: hidden;
}
.run-panel-tab__content--no-stat {
    height: var(--drawer-content-height-no-stat);
}
.run-panel-tab__content--mobile {
    display: flex;
    height: var(--drawer-content-height-mobile);
    position: fixed;
    bottom: 15.7rem;
    width: 100vw;
    padding: 0.4rem 0;
}
.run-panel-tab__content--summary-tab {
    padding: 0.8rem 1.6rem;
}
@media (max-width: 1279px) {
    .run-panel__clear-button {
        position: absolute !important;
        top: 0.5rem;
        right: 1.6rem;
        height: 2.6rem !important;
        min-width: 8rem;
    }
}

.controls__section {
    display: flex;
    align-items: center;
    justify-content: space-between;
    flex-direction: column;
    position: fixed;
    bottom: 0;
    width: 100%;
    background-color: var(--general-main-1);
    border-top: solid 2px var(--general-section-1);
    z-index: 8;
}
.controls__buttons {
    padding: 0.8rem 2.4rem;
    height: 6rem;
    display: flex;
    width: inherit;
}
@media (min-width: 601px) and (max-width: 1279px) {
    .controls__buttons {
        max-width: 60rem;
        padding: 0.8rem 0;
    }
}
.controls__stop-button,
.controls__run-button {
    width: 40%;
    border-radius: 4px 0px 0px 4px !important;
}
.controls__animation {
    width: 100%;
    height: 4rem;
    border-radius: 0px 4px 4px 0px;
}

.list__animation-enter {
    height: 0;
    transform: translateX(200%);
}
.list__animation-enter-active {
    height: auto;
    transform: translateX(0%);
    transition:
        height 500ms,
        transform 500ms;
}
.list__animation-exit {
    opacity: 1;
}
.list__animation-exit-active {
    opacity: 0;
    transition: opacity 300ms;
}

.db-self-exclusion {
    font-size: var(--text-size-xs);
    font-weight: normal;
    line-height: 1.43;
    color: var(--text-general);
}
.db-self-exclusion__content {
    margin: 2.4rem;
    margin-right: 1.4rem;
    padding-right: 1rem;
}
.db-self-exclusion .dc-themed-scrollbars__track--vertical {
    right: -0.2rem;
}
.db-self-exclusion__dialog {
    max-height: 500px !important;
    width: 460px;
}
.db-self-exclusion__footer {
    height: 72px;
    display: block;
    position: fixed;
    width: 100%;
    left: 0px;
    bottom: 0px;
    padding: 1.4rem;
    border-top: 2px solid var(--general-section-2);
}
@media (max-width: 1279px) {
    .db-self-exclusion__footer {
        position: absolute;
        width: 100%;
        bottom: 40px;
        left: 0px;
    }
    .db-self-exclusion__footer--relative {
        position: relative;
        margin-top: 5rem;
    }
}
.db-self-exclusion__footer-btn-group {
    display: flex;
    justify-content: flex-end;
}
.db-self-exclusion__info {
    margin-bottom: 2rem;
}
.db-self-exclusion__limit-status {
    margin: 1rem 0;
}
.db-self-exclusion__limit-status--bold {
    font-weight: 700;
}
.db-self-exclusion__limit-status--danger {
    font-weight: 700;
    color: var(--status-danger);
}
.db-self-exclusion--danger {
    color: var(--status-danger);
}
.db-self-exclusion .dc-btn {
    margin-left: 0.8rem;
}

@media (max-width: 1279px) {
    .limits__wrapper {
        position: fixed;
        z-index: 5;
        width: 100%;
        left: 0px;
        top: 0px;
        background: var(--general-main-1);
    }
    .limits__wrapper .db-self-exclusion {
        height: calc(100vh - 40px);
        display: flex;
        justify-content: space-between;
        flex-direction: column;
    }
    .limits__wrapper .db-self-exclusion__content {
        margin-top: 56px;
    }
    .limits__wrapper .db-self-exclusion__form-group {
        margin-bottom: 1.6rem;
        display: flex;
    }
}

.dc-modal__container_self-exclusion__modal {
    display: flex;
    flex-direction: row;
    align-content: space-between;
    width: 440px !important;
    height: 374px !important;
}

.statistics__modal {
    height: 28.4rem !important;
    width: 44rem !important;
    font-size: 1.6rem;
    padding: 2.4rem;
}
.statistics__modal--mobile {
    font-size: 1.6rem !important;
}
.statistics__modal-body {
    height: calc(100vh - 40.6rem);
    min-height: 10rem;
    max-height: 45rem;
}
.statistics__modal-body--mobile {
    padding: 0.6rem 0 1.6rem !important;
    height: 40.4rem;
}
.statistics__modal-body--content {
    margin-top: 1rem;
}
.statistics__modal-body--content-stake {
    margin-top: unset;
    font-weight: bold;
}
.statistics__modal-scrollbar {
    padding-right: 1.2rem;
}

@media (max-width: 1279px) {
    .dc-modal__container_statistics__modal {
        width: 31.2rem !important;
    }
}
.dc-modal__container_statistics__modal .dc-modal-body {
    padding: 2.4rem 1.2rem 2.4rem 2.4rem;
}

@media (max-width: 1279px) {
    .dc-dialog__button {
        flex-basis: 100%;
        margin-left: unset;
    }
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
/*
 * Check if the page is in RTL mode
 * Usage example:
   @include is-RTL { left: 0 };
 */
.bot__chart-container {
    position: relative;
    top: 0;
}
.bot__chart-container-wrapper {
    position: absolute;
    top: 0;
    width: 100vw;
    background-color: var(--general-main-1);
}
.bot .ciq-chart .cq-top-ui-widgets,
.bot .ciq-chart .info-box {
    transition: transform 0.25s ease;
}
.bot .ciq-chart .cq-top-ui-widgets .cq-symbols-display,
.bot .ciq-chart .info-box .cq-symbols-display {
    z-index: 1;
}
.bot .ciq-chart .cq-top-ui-widgets .cq-symbols-display.ciq-disabled,
.bot .ciq-chart .info-box .cq-symbols-display.ciq-disabled {
    display: none;
}
@media (max-width: 600px) {
    .bot .ciq-chart .cq-top-ui-widgets .cq-symbols-display,
    .bot .ciq-chart .info-box .cq-symbols-display {
        width: auto;
    }
    .bot .ciq-chart .cq-top-ui-widgets .cq-symbols-display .cq-menu-btn,
    .bot .ciq-chart .info-box .cq-symbols-display .cq-menu-btn {
        padding: 0.2rem;
    }
    .bot .ciq-chart .cq-top-ui-widgets .cq-symbols-display .cq-symbol-select-btn,
    .bot .ciq-chart .info-box .cq-symbols-display .cq-symbol-select-btn {
        margin: 0.2rem;
    }
    .bot .ciq-chart .cq-top-ui-widgets .cq-symbols-display .cq-symbol-select-btn .cq-symbol-dropdown,
    .bot .ciq-chart .info-box .cq-symbols-display .cq-symbol-select-btn .cq-symbol-dropdown {
        transform: scale(1);
        margin-left: auto;
    }
    .bot .ciq-chart .cq-top-ui-widgets .cq-symbols-display .cq-symbol-select-btn .cq-symbol,
    .bot .ciq-chart .info-box .cq-symbols-display .cq-symbol-select-btn .cq-symbol {
        font-size: 1.4rem;
    }
}
.bot .ciq-chart .cq-top-ui-widgets {
    align-items: center;
    display: flex;
    flex-wrap: wrap;
    position: absolute;
    top: 0;
    width: 100%;
}
.bot .ciq-chart .sc-toolbar-widget {
    transition: transform 0.25s ease;
}
@media (max-width: 600px) {
    .bot .ciq-chart .sc-toolbar-widget {
        background: transparent;
        border-width: 0;
        bottom: 20.8vh;
    }
    .bot .ciq-chart .sc-toolbar-widget .sc-chart-mode,
    .bot .ciq-chart .sc-toolbar-widget .sc-studies {
        background: var(--general-section-1);
        padding: 0.4rem 0.2rem;
        width: 4rem;
        height: 4rem;
        border-radius: 50%;
        margin: 0.8rem;
        opacity: 0.75;
        display: flex;
        align-items: center;
        justify-content: center;
    }
    .bot .ciq-chart .sc-toolbar-widget .sc-chart-mode__menu__timeperiod,
    .bot .ciq-chart .sc-toolbar-widget .sc-studies__menu__timeperiod {
        top: 0.8rem;
        left: 0.8rem;
    }
    .bot .ciq-chart .sc-toolbar-widget .sc-chart-mode__menu > .ic-icon,
    .bot .ciq-chart .sc-toolbar-widget .sc-studies__menu > .ic-icon {
        top: 0.6rem;
    }
}
.bot .ciq-chart .sc-toolbar-widget .app-contents .ciq-menu {
    margin: 0;
}
.bot .smartcharts-mobile .cq-context {
    z-index: 99;
}
.bot .smartcharts-mobile .cq-context .sc-mcd__category:last-child {
    margin-bottom: 3rem !important;
}
.bot .smartcharts-mobile .cq-chart-title .cq-menu-dropdown {
    position: fixed;
    height: 100% !important;
}
.bot .smartcharts-mobile .cq-chart-title .cq-menu-dropdown .sc-dialog {
    height: 100% !important;
}
.bot .smartcharts-mobile .cq-chart-title .cq-menu-dropdown .sc-dialog__body {
    height: inherit !important;
}
.bot .smartcharts-mobile .cq-chart-title .cq-menu-dropdown .sc-dialog__body .sc-mcd {
    height: inherit !important;
    min-width: auto !important;
}

.cq-modal-dropdown.stxMenuActive {
    left: 0;
    top: 0;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
/*
 * Check if the page is in RTL mode
 * Usage example:
   @include is-RTL { left: 0 };
 */
#id-charts--disabled {
    color: var(--fill-normal-1);
    stroke-opacity: 30%;
    pointer-events: none;
}

.chart-modal-dialog {
    --modal-height: calc(100% - 54px);
    height: var(--modal-height);
    max-height: var(--modal-height);
    padding: 0 0.8rem;
    z-index: 999;
    transition: opacity 0.25s cubic-bezier(0.25, 0.1, 0.1, 0.25);
    display: flex;
    align-items: center;
    justify-content: center;
}
.chart-modal-dialog .dashboard__chart-wrapper--modal {
    height: 100%;
    width: 100%;
}
.chart-modal-dialog .sc-navigation-widget {
    display: none;
}
.chart-modal-dialog .cq-symbols-display .cq-menu-btn {
    padding: 0.2rem;
}
.chart-modal-dialog .cq-symbols-display .cq-symbol-select-btn {
    margin: 0.2rem;
}
.chart-modal-dialog .cq-symbols-display .cq-symbol-select-btn-dropdown {
    transform: scale(1);
    margin-left: auto;
}
.chart-modal-dialog .cq-symbols-display .cq-symbol-select-btn .cq-symbol {
    font-size: 1.4rem;
}
.chart-modal-dialog .cq-symbols-display .cq-symbol-select-btn-info {
    min-height: unset;
}
.chart-modal-dialog .sc-toolbar-widget {
    bottom: 4vh;
    top: unset;
    border-width: 0;
    border-radius: 2rem;
    cursor: pointer;
    background: var(--general-section-1);
}
.chart-modal-dialog .sc-toolbar-widget .sc-tooltip:not(:first-child) {
    display: none;
}
.chart-modal-dialog .sc-toolbar-widget .cq-menu-btn .sc-chart-mode__menu__timeperiod {
    top: 0.6rem;
    left: 1rem;
}
.chart-modal-dialog .sc-toolbar-widget .cq-menu-btn:hover {
    background: none;
}
.chart-modal-dialog .cq-chart-title .cq-menu-dropdown {
    position: fixed;
    height: 46rem;
    inset-inline-start: unset;
}
.chart-modal-dialog .cq-chart-title .cq-menu-dropdown .sc-dialog {
    height: 100% !important;
}
.chart-modal-dialog .cq-chart-title .cq-menu-dropdown .sc-dialog__body {
    height: inherit !important;
}
.chart-modal-dialog .cq-chart-title .cq-menu-dropdown .sc-dialog__body .sc-mcd {
    height: inherit !important;
    min-width: auto !important;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
/*
 * Check if the page is in RTL mode
 * Usage example:
   @include is-RTL { left: 0 };
 */
@media (max-width: 1279px) {
    .dc-dialog__delete-strategy--delete .dc-dialog__footer {
        flex-wrap: unset;
        display: flex;
        align-items: flex-start;
        justify-content: flex-end;
        width: 100%;
    }
    .dc-dialog__delete-strategy--delete .dc-dialog__footer button {
        flex-basis: unset;
        margin-bottom: unset;
    }
    .dc-dialog__delete-strategy--delete .dc-dialog__footer button:first-child {
        margin-inline-end: 0.8rem;
    }
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
/*
 * Check if the page is in RTL mode
 * Usage example:
   @include is-RTL { left: 0 };
 */
.load-strategy__wrapper {
    position: fixed;
    top: 4rem;
    z-index: 10;
    width: 100%;
}
@media (max-width: 1279px) {
    .load-strategy__wrapper .dc-mobile-full-page-modal {
        width: 100%;
    }
}
.load-strategy__wrapper .dc-mobile-full-page-modal__body {
    height: 100%;
}
.load-strategy__wrapper .dc-mobile-full-page-modal .google-drive-label {
    width: 100%;
}
@media (max-width: 1279px) {
    .load-strategy__wrapper .dc-tabs {
        height: 100%;
        display: unset;
        flex: 1;
    }
    .load-strategy__wrapper .dc-tabs__content {
        height: calc(100% - 4rem);
    }
}
@media (min-width: 1280px) {
    .load-strategy__container {
        height: calc(80vh - 15rem);
    }
    .load-strategy__container--has-footer {
        height: calc(80vh - 15rem);
    }
    .load-strategy__container > * {
        height: 100%;
        margin-top: 0.8rem;
    }
}
@media (min-width: 601px) and (max-width: 1279px) {
    .load-strategy__container {
        height: calc(80vh - 15rem);
    }
    .load-strategy__container--has-footer {
        height: calc(80vh - 15rem);
    }
    .load-strategy__container > * {
        height: 100%;
        margin-top: 0.8rem;
    }
}
@media (max-width: 1279px) {
    .load-strategy__container {
        height: 100%;
        overflow: hidden;
    }
}
.load-strategy__button-group {
    display: flex;
    justify-content: flex-end;
    margin-inline-end: 1.6rem;
}
.load-strategy__button-group--clear {
    height: 3.4rem;
    width: 6.7rem;
    background-color: #d6d6d6;
    border-radius: 0.4rem;
    color: #ffffff;
    outline: none;
    border: none;
    font-weight: 700;
    font-size: 1.4rem;
    cursor: pointer;
    margin-inline-end: 1.6rem;
}
.load-strategy__button-group--open {
    height: 3.4rem;
    background-color: #ff444f;
    border-radius: 0.4rem;
    color: #ffffff;
    outline: none;
    border: none;
    font-weight: 700;
    font-size: '1.4rem';
    cursor: pointer;
}
.load-strategy__preview-workspace {
    padding: 1.5rem;
    border-radius: 4px;
    border: solid 1px var(--border-normal);
    height: calc(100vh - 30.4rem);
    position: relative;
    overflow: hidden;
    margin-inline-end: 1.6rem;
    margin-bottom: 1.6rem;
}
.load-strategy__preview-workspace-controls {
    padding: 0.7rem 0.5rem;
    display: flex;
    flex-direction: column;
    position: absolute;
    inset-inline-end: 1.6rem;
    bottom: 1.6rem;
    border-radius: 3rem;
    background-color: #f2f3f4;
    box-shadow: 0.2rem 0.2rem 0.5rem var(--shadow-menu);
    z-index: 4;
}
.load-strategy__preview-workspace-icon {
    margin: 0.5rem;
    cursor: pointer;
}
@media (min-width: 1280px) {
    .load-strategy__local-dropzone {
        padding-top: 1.6rem;
    }
}
@media (max-width: 1279px) {
    .load-strategy__local-dropzone {
        height: 100%;
        padding: 1.6rem;
    }
}
.load-strategy__local-dropzone-area {
    display: flex;
    align-items: center;
    justify-content: center;
    flex-direction: column;
    border: dashed 0.2rem var(--border-normal);
    border-radius: 4px;
    height: 100%;
    padding: 1.6rem;
}
.load-strategy__local-icon {
    margin-bottom: 1.6rem;
}
.load-strategy__local-title {
    margin-bottom: 1.6rem;
    font-size: var(--text-size-s);
}
.load-strategy__local-description {
    margin-bottom: 1.6rem;
    font-size: var(--text-size-xs);
}
.load-strategy__local-preview {
    display: flex;
    flex-direction: column;
    position: relative;
}
@media (max-width: 1279px) {
    .load-strategy__local-preview {
        padding: 1.6rem;
        height: calc(100% - 7.4rem);
    }
    .load-strategy__local-preview--active {
        height: calc(70% - 7.4rem);
    }
}
@media (max-width: 1279px) {
    .load-strategy__local-preview--listed {
        padding: 0;
    }
}
.load-strategy__local-preview-close {
    background-image: radial-gradient(at right top);
    position: absolute;
    padding: 2.5rem;
    border-bottom-left-radius: 50%;
    inset-inline-end: 0;
    top: 0;
    z-index: 99;
    cursor: pointer;
}
.load-strategy__local-footer {
    padding: 1.6rem;
    display: flex;
    justify-content: flex-end;
    border-top: 1px solid var(--general-section-1);
}
.load-strategy__google-drive {
    display: flex;
    align-items: center;
    justify-content: center;
    flex-direction: column;
}
@media (max-width: 1279px) {
    .load-strategy__google-drive {
        border: dashed 0.2rem var(--border-normal);
        border-radius: 4px;
        margin: 1.6rem;
        padding: 1.6rem;
        height: calc(100% - 3.2rem);
    }
}
.load-strategy__google-drive-icon {
    margin-bottom: 1.6rem;
}
.load-strategy__google-drive-icon--disabled {
    opacity: 0.32;
}
.load-strategy__google-drive-connected-text {
    margin-bottom: 1.6rem;
    font-size: var(--text-size-s);
    font-weight: bold;
    line-height: 2.4rem;
    color: var(--text-general);
}
.load-strategy__google-drive-terms {
    font-size: var(--text-size-xs);
    line-height: 2rem;
    margin: 1.6rem 0;
    text-align: center;
    color: var(--text-general);
}
.load-strategy__google-drive-text {
    margin-bottom: 1rem;
}

.picker {
    max-width: 98%;
    border-radius: 0.8rem;
    max-height: 99%;
}
.picker-content {
    max-width: 98%;
    padding: 1%;
}
@media (max-width: 1279px) {
    .picker {
        height: 100%;
        width: 100%;
        top: 0;
    }
}

@media (max-width: 1279px) {
    .dc-dialog__wrapper--preview {
        top: 6.5rem;
    }
    .dc-dialog__wrapper--preview .dc-dialog__dialog {
        justify-content: flex-start;
        min-width: 100vw;
        min-height: 100vh;
        padding: 0;
    }
    .dc-dialog__wrapper--preview .dc-dialog__header-wrapper {
        margin-bottom: 0;
        display: flex;
        align-items: center;
        justify-content: center;
        height: 4rem;
        box-shadow: inset 0 -0.1rem 0 #f2f3f4;
    }
    .dc-dialog__wrapper--preview .dc-dialog__header-wrapper h1 {
        width: 100%;
        text-align: center;
    }
    .dc-dialog__wrapper--preview .dc-dialog__header--close {
        padding: 1.6rem;
        margin-top: -1rem;
    }
    .dc-dialog__wrapper--preview .dc-dialog__content {
        max-width: unset;
    }
    .dc-dialog__wrapper--preview .dc-dialog__content .injectionDiv {
        margin: 2.4rem;
        height: calc(100vh - 26.5rem);
        border: 1px solid #d6d6d6;
    }
    .dc-dialog__wrapper--preview .dc-dialog__content .load-strategy__preview-workspace-container {
        position: relative;
        margin-bottom: 3.2rem;
        min-height: 33rem;
    }
    .dc-dialog__wrapper--preview .dc-dialog__content .load-strategy__preview-workspace-controls {
        inset-inline-end: 3.6rem;
    }
    .dc-dialog__wrapper--preview .dc-dialog__content .load-strategy__button-group {
        box-shadow: inset 0 0.2rem 0rem #f2f3f4;
        margin: 0;
        padding: 1.6rem;
    }
    .dc-dialog__wrapper--preview .dc-dialog__footer {
        display: none;
    }
}

.toolbar__dialog {
    transition: none;
}

.flex-align-center,
.bot-list__item__load-type,
.bot-list__item,
.bot-list__header {
    display: flex;
    align-items: center;
}

.bot-list__container {
    display: flex;
    justify-content: center;
    width: 100%;
}
@media (max-width: 600px) {
    .bot-list__container {
        display: unset;
    }
}
.bot-list__wrapper {
    width: 623px;
}
@media (min-width: 601px) and (max-width: 1279px) {
    .bot-list__wrapper {
        width: 600px;
    }
}
@media (max-width: 600px) {
    .bot-list__wrapper {
        width: unset;
    }
}
.bot-list__table {
    height: calc(100vh - 57rem);
    overflow: auto;
}
@media (max-width: 600px) {
    .bot-list__table {
        height: calc(100vh - 55rem);
    }
}
.bot-list__title {
    font-size: var(--text-size-s);
    font-weight: 700;
    margin-block-end: 0.8rem;
    color: var(--text-general);
}
.bot-list__title--listed {
    margin: 0 !important;
}
.bot-list__header {
    border-bottom: 1px solid var(--border-divider);
}
@media (max-width: 1279px) {
    .bot-list__header {
        padding: 0.8rem 0;
    }
}
.bot-list__header__label {
    padding: 0.8rem 1.6rem;
    width: 34%;
}
@media (max-width: 1279px) {
    .bot-list__header__label {
        width: 40%;
        padding: 0;
    }
}
.bot-list__header__time-stamp {
    width: 20%;
    padding: 0.8rem 1.6rem;
}
@media (max-width: 1279px) {
    .bot-list__header__time-stamp {
        width: 25%;
        padding: 0;
    }
}
.bot-list__header__load-type {
    width: 25%;
    padding: 0.8rem 1.6rem;
}
@media (max-width: 1279px) {
    .bot-list__header__load-type {
        padding: 0;
    }
}
.bot-list__item {
    border-bottom: 1px solid var(--border-divider);
    user-select: none;
    position: relative;
}
.bot-list__item__label {
    padding: 0.8rem 1.6rem;
    width: 35%;
}
.bot-list__item__label .text-wrapper {
    -webkit-line-clamp: 1;
    -webkit-box-orient: vertical;
    display: -webkit-box;
    max-width: 100%;
    overflow: hidden;
    text-overflow: ellipsis;
    word-break: break-all;
}
@media (max-width: 1279px) {
    .bot-list__item__label {
        width: 40%;
        padding-inline-start: 0;
    }
}
.bot-list__item__time-stamp {
    width: 20%;
    padding: 0.8rem 1.6rem;
}
@media (max-width: 1279px) {
    .bot-list__item__time-stamp {
        width: 25%;
        padding: 0;
    }
}
.bot-list__item__load-type {
    width: 25%;
    padding: 0.8rem 1.6rem;
}
@media (max-width: 1279px) {
    .bot-list__item__load-type {
        padding: 0;
    }
}
.bot-list__item__load-type .dc-icon {
    margin-inline-end: 0.8rem;
}
.bot-list__item__actions {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 20%;
    padding: 0.8rem 1.6rem;
}
.bot-list__item__actions__action-item {
    margin-inline-end: 1.6rem;
}
.bot-list__item__actions__action-item:last-child {
    margin-inline: 0;
}
.bot-list__item__actions__action-item:hover {
    cursor: pointer;
}
@media (max-width: 1279px) {
    .bot-list__item__actions {
        width: 10%;
        padding: 0;
    }
}
.bot-list__item__actions button {
    background: transparent;
    border: none;
    width: unset;
    padding: 0;
}
.bot-list__item__responsive {
    background: var(--general-main-1);
    box-shadow:
        0 0 2rem rgba(0, 0, 0, 0.05),
        0 1.6rem 2rem rgba(0, 0, 0, 0.05);
    display: none;
    min-width: 15rem;
    position: absolute;
    inset-inline-end: 3rem;
    top: 4rem;
    z-index: 100;
}
.bot-list__item__responsive--active {
    display: block;
}
.bot-list__item__responsive__menu {
    align-items: center;
    display: flex;
    height: 4rem;
    padding: 0.8rem 1.1rem;
}
.bot-list__item__responsive__menu .dc-icon {
    margin-inline-end: 0.8rem;
}
.bot-list__item:nth-last-child(-n + 4) .bot-list__item__responsive {
    top: -15rem;
}
.bot-list__item:nth-last-child(-n + 4) .bot-list__item__responsive--min {
    top: 1rem;
    inset-inline-end: 6rem;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.announcement-dialog .dc-dialog__dialog {
    max-width: calc(440px - 4.8rem);
    max-height: none;
    padding: 0;
}
@media (max-width: 1279px) {
    .announcement-dialog .dc-dialog__dialog {
        margin-top: 0;
        width: 100%;
        height: 100%;
        justify-content: start;
        border-radius: 0;
    }
}
.announcement-dialog .dc-dialog__header-wrapper {
    padding: 1.5rem 1.5rem 1.5rem 2rem;
    border-bottom: 1px solid var(--general-section-6);
    margin-bottom: 0;
}
@media (max-width: 1279px) {
    .announcement-dialog .dc-dialog__header-wrapper .dc-text {
        font-size: 14px;
    }
}
.announcement-dialog .dc-dialog__content {
    max-width: unset;
    margin-bottom: 0.5rem;
}
.announcement-dialog .dc-dialog__content .open-livechat__link .dc-text {
    color: var(--text-general);
    text-decoration: underline;
}
.announcement-dialog .dc-dialog__footer {
    justify-content: center;
    padding: 1.5rem;
    border-top: 1px solid var(--general-section-6);
}
@media (max-width: 1279px) {
    .announcement-dialog .dc-dialog__footer {
        flex-wrap: nowrap;
        position: fixed;
        bottom: 0;
    }
}
.announcement-dialog .dc-dialog__footer:empty {
    border: none;
    padding: 0;
}
.announcement-dialog .dc-dialog__button {
    width: 100%;
}
@media (max-width: 1279px) {
    .announcement-dialog .dc-dialog__button:not(:last-child) {
        margin-bottom: 0;
    }
}
.announcement-dialog--tablet .dc-dialog__content {
    max-width: 100% !important;
}
.announcement-dialog__body-icon--accumulator_announce,
.announcement-dialog__body-icon--moving_strategies_announce,
.announcement-dialog__body-icon--blockly_announce {
    display: flex;
    justify-content: center;
    align-items: center;
    margin-bottom: 1rem;
    height: 12.5rem;
}
@media (max-width: 1279px) {
    .announcement-dialog__body-icon--accumulator_announce,
    .announcement-dialog__body-icon--moving_strategies_announce,
    .announcement-dialog__body-icon--blockly_announce {
        width: 100%;
    }
}
.announcement-dialog__body-icon--accumulator_announce {
    border-radius: 0.8rem;
    background-color: var(--general-section-1);
}
.announcement-dialog__body-main-content {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    padding: 2.4rem;
}
@media (max-width: 1279px) {
    .announcement-dialog__body-main-content {
        padding: 1.6rem;
    }
}
.announcement-dialog__body-item {
    display: flex;
    gap: 1rem;
}
.announcement-dialog__body-item svg {
    margin-top: 0.4rem;
}
.announcement-dialog__body-item--numbered {
    margin-left: 2rem;
}
[dir='rtl'] .announcement-dialog__body-item--numbered {
    margin-right: 2rem;
    margin-left: 0;
}
.announcement-dialog__image {
    min-height: 16rem;
    padding-top: 1.6rem;
}
.announcement-dialog__unordered_list {
    color: var(--text-prominent);
    list-style: disc;
    padding: 0 1.6rem;
}
.announcement-dialog__title {
    margin-bottom: 1rem;
}
.announcement-dialog__title--accumulator_announce {
    text-align: center;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
/*
 * Check if the page is in RTL mode
 * Usage example:
   @include is-RTL { left: 0 };
 */
.announcements {
    position: absolute;
    inset-inline-end: 2.4rem;
    top: 1.8rem;
    z-index: 1;
}
@media (max-width: 1279px) {
    .announcements {
        inset-inline-end: 1.6rem;
    }
}
.announcements__button {
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 0.8rem 1.4rem;
    border: none;
    outline: none;
    border-radius: 2.4rem;
    background-color: var(--general-section-1);
    cursor: pointer;
}
@media (max-width: 1279px) {
    .announcements__button {
        height: 3.2rem;
        width: 3.2rem;
        line-height: 3.6rem;
        text-align: center;
        padding: 0;
    }
}
.announcements__icon {
    height: 2.4rem;
    width: 2.4rem;
}
@media (max-width: 1279px) {
    .announcements__icon {
        height: 2.6rem;
        width: 2.6rem;
    }
}
.announcements__label {
    margin-inline-start: 0.4rem;
}
.announcements__amount {
    background-color: var(--status-danger);
    border-radius: 0.9rem;
    height: 1.8rem;
    width: 1.8rem;
    margin-inline-start: 0.4rem;
    color: var(--brand-white);
    font-weight: bold;
    display: flex;
    justify-content: center;
    align-items: center;
}
@media (max-width: 1279px) {
    .announcements__amount {
        position: absolute;
        bottom: 2.1rem;
        left: 1.8rem;
    }
}

.notifications {
    min-height: 53.6rem !important;
    background-color: var(--general-main-2);
}
@media (max-width: 1279px) {
    .notifications {
        height: 100svh;
    }
}
.notifications__wrapper {
    padding-inline-start: 0.5rem;
    border-inline-start: 1px solid var(--general-section-1);
    border-width: 1px;
    margin-inline-end: 1rem;
}
.notifications__wrapper--desktop,
.notifications__wrapper--tablet {
    z-index: 10;
    top: 5rem;
    right: 0;
    position: absolute;
    width: 40rem;
}
[dir='rtl'] .notifications__wrapper--desktop,
[dir='rtl'] .notifications__wrapper--tablet {
    right: -24rem;
}
.notifications__wrapper--tablet {
    height: auto;
}
[dir='rtl'] .notifications__wrapper--tablet {
    right: -37rem;
}
.notifications__wrapper--mobile .deriv-modal__header {
    border-bottom: 1px solid var(--general-section-6);
}
.notifications__wrapper--mobile .deriv-modal__footer {
    border-top: 1px solid var(--general-section-6);
}
.notifications__wrapper .deriv-text {
    font-weight: bold;
}
.notifications__wrapper .deriv-context-menu {
    box-shadow: 0 3.2rem 6.4rem 0 rgba(14, 14, 14, 0.1411764706);
}
.notifications .deriv-text {
    color: var(--text-prominent);
}
.notifications .notification {
    --notification-icon-color: rgba(44, 154, 255, 0.08);
    height: 9.8rem;
    border-radius: none;
    box-shadow: none;
    background-color: var(--general-main-2);
}
.notifications .notification:after {
    content: '';
    position: absolute;
    bottom: 0;
    left: 16%;
    width: 100%;
    height: 0.1rem;
    background-color: var(--general-section-6);
    z-index: 1;
}
.notifications .notification:not(:last-child) {
    margin-bottom: 0;
}
@media (max-width: 1279px) {
    .notifications .notification {
        max-width: 100%;
    }
}
.notifications .notification__container {
    align-items: center;
}
.notifications .notification__button {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    border: none;
    cursor: pointer;
}
.notifications .notification__title .dc-text {
    color: var(--text-prominent);
}
.notifications .notification__message .deriv-text {
    display: flex;
    justify-content: center;
    flex-direction: column;
}
.notifications .notification__message .deriv-text .dc-text {
    overflow: hidden;
    white-space: nowrap;
    text-overflow: ellipsis;
    width: 32rem;
}
@media (max-width: 1279px) {
    .notifications .notification__message .deriv-text .dc-text {
        width: 28rem;
    }
}
.notifications .notification__icon {
    width: 3.2rem;
    height: 3.2rem;
    text-align: center;
    background-color: var(--notification-icon-color);
    border-radius: 1.8rem;
    align-self: flex-start;
    margin-top: 0.7rem;
}
.notifications .notification__icon--indicator {
    position: absolute;
    top: 1.5rem;
    left: 4rem;
    width: 0.8rem;
    height: 0.8rem;
    background-color: var(--status-danger);
    border-radius: 4px;
}
.notifications .notification__text {
    margin-left: 1.6rem;
}
.notifications__footer {
    padding: 0 !important;
}
.notifications__footer__clear-button {
    height: 4rem;
    margin: 1.6rem;
    cursor: pointer;
    color: var(--icon-black-plus);
}
@media (max-width: 1279px) {
    .notifications__footer__clear-button {
        width: 92%;
        justify-content: center;
    }
}
.notifications__footer-box {
    box-shadow: 0 1px var(--general-section-6) inset;
}
.notifications__header-desktop {
    padding: 1.6rem 0;
    border-bottom: 1px solid var(--general-section-6);
    justify-content: left;
    padding-left: 2rem !important;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
/*
 * Check if the page is in RTL mode
 * Usage example:
   @include is-RTL { left: 0 };
 */
.bot-dashboard {
    position: relative;
    height: calc(100vh - 8.4rem);
    overflow: hidden;
}
@media (max-width: 600px) {
    .bot-dashboard {
        height: calc(100vh - 3.4rem);
    }
}
.bot-dashboard .toolbar__section {
    justify-content: end;
}
@media (max-width: 1279px) {
    .bot-dashboard .toolbar__section {
        column-gap: 1rem;
    }
}
.bot-dashboard .run-panel__container {
    height: var(--tab-content-height) !important;
    position: sticky;
    transform: translateX(367px);
    transition: all 0.4s;
    margin-top: 1rem;
}
html[dir='rtl'] .bot-dashboard .run-panel__container {
    transform: translateX(-367px);
}
.bot-dashboard .run-panel__container--tour-active {
    transform: translateX(0px) !important;
}
.bot-dashboard .run-panel__container--tour-active .dc-drawer__toggle-icon--right {
    transform: rotate(180deg) !important;
}
html[dir='rtl'] .bot-dashboard .dc-drawer .dc-drawer__toggle-icon--right {
    transform: rotate(0deg) !important;
}
@media (min-width: 1280px) {
    .bot-dashboard .dc-drawer--open {
        transform: translateX(0px) !important;
    }
}
@media (max-width: 1279px) {
    .bot-dashboard .dc-drawer--open {
        transform: translateY(calc(-100% + 3.6rem));
    }
}
html[dir='rtl'] .bot-dashboard .dc-drawer--open .dc-drawer__toggle-icon {
    transform: rotate(180deg) !important;
}

.db {
    --icon-height: 2.4rem;
    --icon-width: 2.4rem;
    --border-radius: 2.4rem;
}
.db-sidebar {
    position: relative;
    background-color: var(--general-main-1);
    padding: 2.4rem;
    height: 100%;
    display: none;
}
.db-sidebar--block {
    display: block;
}
.db-sidebar__images {
    background: var(--general-section-6);
}
.db-info-panel__close-action {
    position: absolute;
    right: 1.4rem;
    top: 1.4rem;
    height: 2rem;
    width: 2rem;
    line-height: 2.3rem;
    text-align: center;
    border-radius: 1rem;
}
.db-info-panel__close-action:hover {
    cursor: pointer;
    background: var(--general-section-1);
}
.db-info-panel__content {
    cursor: pointer;
}
.db-info-panel__content:hover {
    text-decoration: underline;
    color: var(--button-primary-default);
}

.tab__dashboard {
    display: flex;
    width: 100%;
}
.tab__dashboard--tour-active {
    width: calc(100% - 36rem);
}
@media (max-width: 1279px) {
    .tab__dashboard--tour-active {
        width: 100%;
    }
}
.tab__dashboard__header--listed {
    margin-bottom: 0.8rem;
}
@media (max-width: 600px) {
    .tab__dashboard__header {
        height: auto;
        margin-top: 0;
    }
}
@media (min-width: 601px) and (max-width: 1279px) {
    .tab__dashboard__header {
        padding: 0.8rem;
    }
}
.tab__dashboard__header .title {
    text-align: center;
    height: 7.2;
}
@media (max-width: 1279px) {
    .tab__dashboard__header .title {
        height: auto;
    }
}
.tab__dashboard__header .subtitle {
    text-align: center;
    margin-top: 1.6rem;
}
.tab__dashboard__header .subtitle__has-list {
    text-align: center;
    margin-top: 0;
}
@media (max-width: 1279px) {
    .tab__dashboard__header .subtitle__has-list {
        text-align: start;
        width: 85%;
    }
}
@media (min-width: 601px) and (max-width: 1279px) {
    .tab__dashboard__header .subtitle__has-list {
        display: flex;
        justify-content: center;
        padding: 0.8rem 0;
    }
}
.tab__dashboard__content {
    display: flex;
    align-items: flex-start;
    height: var(--tab-content-height);
    flex-grow: 1;
    background: var(--general-main-1);
    overflow: hidden;
    position: relative;
}
@media (max-width: 1279px) {
    .tab__dashboard__content {
        display: unset;
    }
}
@media (min-width: 1280px) {
    .tab__dashboard__content {
        padding: 80px 216px 0;
    }
}
@media (max-width: 1279px) {
    .tab__dashboard__content {
        height: calc(100vh - 19rem);
        align-items: flex-start;
        padding: 1.6rem;
    }
}
.tab__dashboard__content .quick-panel {
    flex: 1 1 44%;
}
.tab__dashboard__content .preview-panel {
    display: none;
    flex: 1 1 56%;
}
.tab__dashboard__content .preview-panel--active {
    display: block;
}
@media (max-width: 1279px) {
    .tab__dashboard__content .preview-panel--active {
        display: none;
    }
}
.tab__dashboard__mobile-container {
    display: flex;
    align-items: center;
    justify-content: center;
    margin: 1.4rem 0;
    column-gap: 1rem;
    height: 3.2rem;
}
.tab__dashboard__mobile-container--minimized {
    height: 3.6rem;
}
.tab__dashboard__preview {
    height: calc(100% + 2rem);
}
@media (max-width: 1279px) {
    .tab__dashboard__preview {
        display: none;
    }
}
@media (min-width: 601px) and (max-width: 1279px) {
    .tab__dashboard__preview {
        display: none;
    }
}
.tab__dashboard__preview__retrigger button {
    background: var(--general-section-1);
    border-radius: 2.4rem;
    outline: none;
    border: none;
    height: 4rem;
    padding: 1rem;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
}
@media (max-width: 1279px) {
    .tab__dashboard__preview__retrigger button {
        width: 3.2rem;
        height: 3.2rem;
        padding: 0.8rem;
    }
}
.tab__dashboard__preview__retrigger__text {
    margin-left: 0.4rem;
    color: var(--text-general);
}
.tab__dashboard__preview__retrigger__icon {
    width: var(--icon-width);
    height: var(--icon-height);
}
.tab__dashboard__home__retrigger {
    position: absolute;
    top: 0;
    inset-inline-end: 0;
    padding: 2rem;
}
.tab__dashboard__home__retrigger button {
    background: var(--general-section-1);
    border-radius: 2.4rem;
    outline: none;
    border: none;
    height: 4rem;
    padding: 1rem;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
}
.tab__dashboard__home__retrigger__text {
    margin-left: 0.4rem;
    color: var(--text-general);
}
.tab__dashboard__home__retrigger__icon {
    width: var(--icon-width);
    height: var(--icon-height);
}
@media (min-width: 1280px) {
    .tab__dashboard__description {
        text-align: center;
        margin-bottom: 4rem;
    }
}
.tab__dashboard__info-panel {
    position: relative;
    background-color: var(--general-main-1);
    padding: 2.4rem;
    margin-inline-start: 1.6rem;
    display: none;
    height: calc(100vh - 16.7rem);
    overflow-y: auto;
}
.tab__dashboard__info-panel--active {
    display: block;
    width: 30%;
}
.tab__dashboard__table--minimized {
    width: 100%;
}
.tab__dashboard__table__tiles {
    display: flex;
    align-items: flex-start;
    justify-content: center;
    word-wrap: break-word;
    font-size: 1.3rem;
    text-align: center;
    padding: 3.2rem;
}
@media (max-width: 600px) {
    .tab__dashboard__table__tiles {
        flex-wrap: wrap;
    }
}
@media (min-width: 601px) and (max-width: 1279px) {
    .tab__dashboard__table__tiles {
        padding: 2.4rem 0 0;
    }
}
.tab__dashboard__table__tiles--minimized {
    align-items: flex-start;
}
@media (max-width: 1279px) {
    .tab__dashboard__table__tiles--minimized {
        display: flex;
        flex-flow: unset;
        padding: 2.4rem 0 1.6rem;
    }
}
@media (max-width: 600px) {
    .tab__dashboard__table__tiles--minimized {
        justify-content: space-around;
    }
}
.tab__dashboard__table__disabled-card {
    pointer-events: none;
    cursor: not-allowed;
    opacity: 0.6;
}
.tab__dashboard__table__block {
    display: flex;
    align-items: center;
    justify-content: center;
    flex-direction: column;
    margin-inline-end: 4rem;
}
@media (max-width: 1279px) {
    .tab__dashboard__table__block {
        margin: 1rem;
    }
}
.tab__dashboard__table__block:hover {
    cursor: pointer;
}
.tab__dashboard__table__block span {
    width: 9.1rem;
    word-wrap: break-word;
    text-align: center;
}
@media (max-width: 1279px) {
    .tab__dashboard__table__block span {
        height: auto;
    }
}
@media (max-width: 600px) {
    .tab__dashboard__table__block--minimized {
        width: 6.4rem;
    }
}
.tab__dashboard__table__block--minimized .dc-text {
    width: 8rem;
    text-align: center;
}
.tab__dashboard__table__images {
    background-color: var(--general-section-1);
    margin-bottom: 0.8rem;
    border-radius: 0.8rem;
    padding: 1.6rem;
}
@media (max-width: 1279px) {
    .tab__dashboard__table__images--minimized {
        width: 6.4rem;
        height: 6.4rem;
        padding: 0.8rem;
    }
}

.user-guide {
    position: absolute;
    inset-inline-end: 2.4rem;
    top: 1.8rem;
    z-index: 1;
}
@media (max-width: 1279px) {
    .user-guide {
        inset-inline-end: 1.6rem;
    }
}
.user-guide__button {
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 0.8rem 1.4rem;
    border: none;
    outline: none;
    border-radius: 2.4rem;
    background-color: var(--general-section-1);
}
@media (max-width: 1279px) {
    .user-guide__button {
        height: 3.2rem;
        width: 3.2rem;
        line-height: 3.6rem;
        text-align: center;
        padding: 0;
    }
}
.user-guide__button:hover {
    cursor: pointer;
}
.user-guide__icon {
    height: 24px;
    width: 24px;
}
@media (max-width: 1279px) {
    .user-guide__icon {
        height: 16px;
        width: 16px;
    }
}
.user-guide__label {
    margin-inline-start: 0.4rem;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.tutorials-quick-strategy__title {
    margin-bottom: 1.6rem;
}
.tutorials-quick-strategy__cards {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 2.4rem;
    margin-inline-end: 12rem;
}
@media (max-width: 1279px) {
    .tutorials-quick-strategy__cards {
        width: 100%;
        grid-template-columns: 1fr;
    }
}
.tutorials-quick-strategy__placeholder {
    display: grid;
    grid-template-columns: 10fr 1fr;
    align-items: center;
    padding: 1.6rem;
    border: 2px solid var(--border-normal);
    border-radius: 8px;
    cursor: pointer;
}
.tutorials-quick-strategy__placeholder__title {
    margin-bottom: 1.6rem;
}
.tutorials-quick-strategy__placeholder__content {
    display: grid;
    grid-template-columns: 10fr 1fr;
    align-items: baseline;
}
.tutorials-quick-strategy__placeholder__content ul {
    list-style: disc;
    margin-inline-start: 1.6rem;
    color: var(--text-general);
}
.tutorials-quick-strategy__placeholder__content li:not(:last-child) {
    margin-bottom: 1.6rem;
}
.tutorials-quick-strategy__placeholder__content__text {
    position: relative;
    top: 0.15rem;
    margin-inline-start: 0.3rem;
    color: var(--text-general);
}
.tutorials-quick-strategy__placeholder__icon {
    margin-inline-start: 2rem;
}
.tutorials-quick-strategy__breadcrumb {
    display: flex;
    margin-bottom: 1.6rem;
}
.tutorials-quick-strategy__breadcrumb__clickable {
    cursor: pointer;
    margin-inline-end: 0.5rem;
}
.tutorials-quick-strategy .qs__body__content__description {
    padding: 1rem 0;
    width: 85%;
}
@media (max-width: 1279px) {
    .tutorials-quick-strategy .qs__body__content__description {
        height: calc(100vh - 16rem);
        width: 100%;
    }
}
.tutorials-quick-strategy .qs__description__image {
    width: 55%;
    margin-bottom: 4rem;
}
@media (max-width: 1279px) {
    .tutorials-quick-strategy .qs__description__image {
        height: 36rem;
        width: 100%;
        margin-bottom: 2rem;
    }
}
.tutorials-quick-strategy .qs__description__image.formula {
    width: unset;
    margin: 1.5rem 0.5rem;
}
.tutorials-quick-strategy .qs__description__image.formula img {
    height: 100%;
    width: auto;
    max-width: 100%;
    object-fit: contain;
}
.tutorials-quick-strategy .qs__description__content.italic span {
    font-size: 1.4rem;
}
@media (max-width: 1279px) {
    .tutorials-quick-strategy .qs__description__content.italic span {
        font-size: 1.2rem;
    }
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
/*
 * Check if the page is in RTL mode
 * Usage example:
   @include is-RTL { left: 0 };
 */
.tutorials-wrap .no-search,
.tutorials-wrap .faq__wrapper__nosearch,
.tutorials-wrap .tutorials-wrap__group__nosearch {
    display: flex;
    justify-content: center;
    width: 100%;
    word-break: break-all;
}
.tutorials-wrap .dc-dialog__dialog {
    width: 80vw;
    height: 80vh;
    max-width: unset;
    max-height: unset;
    padding: 0;
    border-radius: 0;
    position: relative;
    z-index: 1;
}
@media (max-width: 600px) {
    .tutorials-wrap .dc-dialog__dialog {
        width: 94%;
        height: auto;
        max-height: 80%;
    }
}
@media (min-width: 601px) and (max-width: 1279px) {
    .tutorials-wrap .dc-dialog__dialog {
        height: 40vh;
    }
}
.tutorials-wrap .dc-dialog__header-wrapper--end {
    position: absolute;
    top: 0;
    padding: 0.8rem;
    z-index: 90;
}
.tutorials-wrap .dc-dialog__content {
    max-width: unset;
    margin-bottom: 0;
    height: 100%;
}
.tutorials-wrap .dc-dialog__footer {
    display: none;
}
.tutorials-wrap--placeholder {
    width: 28rem;
}
.tutorials-wrap--tour {
    cursor: pointer;
}
.tutorials-wrap__group {
    margin-bottom: 5.2rem;
}
.tutorials-wrap__group__guides {
    display: flex;
    margin-top: 2.4rem;
}
@media (max-width: 1279px) {
    .tutorials-wrap__group__guides {
        display: unset;
    }
}
@media (max-width: 1279px) {
    .tutorials-wrap__group__title {
        margin-bottom: 1.4rem;
    }
}
.tutorials-wrap__group__cards {
    display: flex;
    text-align: center;
    flex-direction: column;
    margin-inline-end: 2.4rem;
}
@media (max-width: 1279px) {
    .tutorials-wrap__group__cards {
        flex-direction: row;
        width: auto;
    }
    .tutorials-wrap__group__cards span {
        text-align: start;
        width: 100%;
    }
}
@media (max-width: 1279px) {
    .tutorials-wrap__group {
        flex-direction: column;
        margin-bottom: 2.2rem;
    }
}
.tutorials-wrap__group:last-child {
    margin-bottom: 0;
}
.tutorials-wrap__placeholder {
    display: flex;
    align-items: center;
    justify-content: center;
    background: var(--checkbox-disabled-grey);
    margin-bottom: 0.8rem;
    height: 16rem;
    width: 28rem;
    background-size: 100% 100%;
}
.tutorials-wrap__placeholder__description {
    width: 28rem;
}
@media (max-width: 1279px) {
    .tutorials-wrap__placeholder__description {
        text-align: start;
        width: calc(100% - 14.8rem);
    }
}
@media (max-width: 1279px) {
    .tutorials-wrap__placeholder {
        height: 8.7rem;
        width: 14.8rem;
        margin: 0 0.8rem 0.8rem 0;
    }
}
.tutorials-wrap__placeholder__tours {
    height: 13.5rem;
    background-size: contain;
    margin: 0 0.8rem 0.8rem 0;
    width: 21.5rem;
    cursor: pointer;
}
@media (max-width: 1279px) {
    .tutorials-wrap__placeholder__tours {
        height: 8.7rem;
        width: 14.8rem;
    }
}
.tutorials-wrap__placeholder__button-group {
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 1.6rem 3.2rem;
    border-radius: 1rem;
    cursor: pointer;
    background-color: rgba(0, 0, 0, 0.5);
}
.tutorials-wrap__placeholder__button-group--play {
    filter: invert(1);
}
@media (max-width: 1279px) {
    .tutorials-wrap__placeholder__button-group {
        padding: 0.8rem 1.6rem;
    }
}
.tutorials-wrap__placeholder--disabled {
    pointer-events: none;
}

.faq__description a {
    text-decoration: underline;
}
.faq__wrapper {
    overflow: auto;
    padding-bottom: 18px;
}
.faq__wrapper__content {
    width: 85%;
}
@media (max-width: 1279px) {
    .faq__wrapper__content {
        width: 100%;
    }
}
.faq__wrapper .dc-accordion__item {
    border: unset;
    border-bottom: 0.1rem solid var(--general-section-1);
}
.faq__wrapper .dc-accordion__item:last-child {
    margin-bottom: 2rem;
}
.faq__wrapper .dc-accordion__item-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
}
.faq__wrapper .dc-accordion__item-content .loss-control {
    width: 80%;
}
@media (max-width: 1279px) {
    .faq__wrapper .dc-accordion__item-content .loss-control {
        width: 100%;
    }
}
.faq__wrapper .dc-accordion__item-content img {
    width: 45%;
}
@media (max-width: 1279px) {
    .faq__wrapper .dc-accordion__item-content {
        width: 100%;
    }
    .faq__wrapper .dc-accordion__item-content img {
        width: 100%;
    }
}
.faq__wrapper__header {
    margin: 0 0 1rem 0.5rem;
}

.tour-dialog {
    transition: unset;
}
.tour-dialog .dc-dialog__dialog {
    transform: unset;
    opacity: unset;
    transition: unset;
}
@media (max-width: 600px) {
    .tour-dialog .dc-dialog__dialog {
        width: 90vw;
        padding: 1.6rem;
    }
}
.tour-dialog .dc-dialog__content__header {
    text-align: start;
    margin-bottom: 2.4rem;
}
.tour-dialog .dc-dialog__content__description {
    text-align: start;
}
.tour-dialog .dc-dialog__content__description__text {
    margin-bottom: 1.6rem;
}
@media (max-width: 600px) {
    .tour-dialog .dc-dialog__footer {
        display: flex;
        flex-direction: column;
        height: unset;
        align-content: flex-end;
    }
    .tour-dialog .dc-dialog__footer button:first-child {
        margin-bottom: unset;
        margin-inline-end: 0.8rem;
    }
}
@media (min-width: 601px) and (max-width: 1279px) {
    .tour-dialog .dc-dialog__footer button {
        flex-basis: unset;
        margin-bottom: unset;
    }
}

.tutorials-wrapper {
    width: 100%;
    background: var(--general-main-1);
}
@media (min-width: 601px) and (max-width: 1279px) {
    .tutorials-wrapper {
        display: flex;
        justify-content: center;
    }
}
.tutorials-wrapper .dc-tabs__wrapper {
    padding: 1.6rem 0.8rem;
}
.tutorials-wrapper .dc-tabs__wrapper__group {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 22.5rem;
    position: relative;
    padding: 1.6rem 0.8rem;
    z-index: 1;
}
.tutorials-wrapper .dc-tabs__wrapper__group .search-icon {
    cursor: pointer;
    position: absolute;
    inset-inline-start: 1.8rem;
    z-index: 1;
}
.tutorials-wrapper .dc-tabs__wrapper__group .close-icon {
    cursor: pointer;
    position: absolute;
    inset-inline-end: 1.5rem;
    z-index: 1;
}
.tutorials-wrapper .dc-tabs__wrapper__group__search-input {
    width: 100%;
    height: 3.2rem;
    border-radius: 8px;
    outline: none;
    background-color: var(--general-main-1);
    font-size: 1.4rem;
    padding: 0 3.6rem;
    border: solid 1px var(--border-normal);
    color: var(--text-general);
}
.tutorials-wrapper .dc-tabs__wrapper__group__search-input::placeholder {
    opacity: 0.4;
}
.tutorials-wrapper .dc-tabs__wrapper__group__search-input:focus {
    border-color: var(--text-general);
}
@media (max-width: 1279px) {
    .tutorials-wrapper .dc-tabs__wrapper__group__search-input {
        width: 100%;
        margin-inline-start: 17px;
        height: 4rem;
        padding-inline-start: 13px;
        margin-inline-end: 0;
    }
}
.tutorials-wrapper .dc-tabs__wrapper .dc-tabs .tutorials-search .faq__wrapper {
    height: unset;
}
.tutorials-wrapper .dc-tabs__wrapper .dc-tabs__content {
    margin: -6.5rem 2.4rem;
    width: 100%;
    max-height: calc(100vh - 20rem);
    overflow: auto;
}
.tutorials-wrapper .dc-tabs__wrapper .dc-tabs__content .tutorials-wrap {
    margin-bottom: 3rem;
}
.tutorials-wrapper .dc-tabs__wrapper .dc-tabs__content--no-result {
    display: flex;
    align-items: center;
    justify-content: flex-start;
    flex-direction: column;
    height: 100vh;
    margin: unset;
}
.tutorials-wrapper .dc-tabs__wrapper .dc-tabs__content--no-result svg {
    margin-bottom: 2.4rem;
}
.tutorials-wrapper .dc-tabs__wrapper .dc-tabs__content--no-result__title,
.tutorials-wrapper .dc-tabs__wrapper .dc-tabs__content--no-result__content {
    margin-bottom: 0.8rem;
    word-break: break-word;
    text-align: center;
}
.tutorials-wrapper .dc-tabs__wrapper .dc-tabs--top {
    display: flex;
}
@media (max-width: 1279px) {
    .tutorials-wrapper .dc-tabs__wrapper .dc-tabs--top {
        height: calc(100vh - 22rem);
    }
}
.tutorials-wrapper .dc-tabs__wrapper .dc-tabs__list {
    width: 22.5rem;
    display: flex;
    flex-direction: column;
    padding: 0 0.8rem;
}
.tutorials-wrapper .dc-tabs__wrapper .dc-tabs__list--border-bottom {
    padding: 0 0.8rem;
    height: 100vh;
}
.tutorials-wrapper .dc-tabs__wrapper .dc-tabs__list--border-bottom li {
    white-space: unset;
    text-align: start;
    line-height: normal;
}
.tutorials-wrapper .dc-tabs__wrapper .dc-tabs__list--border-bottom:first-child {
    margin-top: -7.2rem;
}
.tutorials-wrapper .dc-tabs__wrapper .dc-tabs__list--border-bottom .tutorials-guide:nth-child(1),
.tutorials-wrapper .dc-tabs__wrapper .dc-tabs__list--border-bottom .tutorials-faq:nth-child(2),
.tutorials-wrapper .dc-tabs__wrapper .dc-tabs__list--border-bottom .tutorials-qs-guide:nth-child(3) {
    background-color: var(--sidebar-tab);
    border-radius: 0.4rem 0.4rem 0 0;
    transition: all 0.6s;
    font-weight: bold;
    pointer-events: none;
}
.tutorials-wrapper .dc-tabs__wrapper .dc-tabs__item {
    width: 100% !important;
}
.tutorials-wrapper .dc-tabs__wrapper .dc-tabs__item--top:first-child {
    margin-top: 7.5rem;
}
.tutorials-wrapper .dc-tabs__wrapper .dc-tabs__item--top:nth-last-child(2) {
    display: none;
}
.tutorials-wrapper .dc-tabs__wrapper .dc-tabs__item--tutorials {
    display: flex;
    justify-content: flex-start;
    padding: 0 1.6rem;
}
.tutorials-wrapper .dc-tabs__wrapper .dc-tabs__active {
    background-color: var(--sidebar-tab);
    border-radius: 0.4rem 0.4rem 0 0;
    transition: all 0.6s;
}

.tutorials-mobile {
    padding: 1.6rem;
    overflow-x: hidden;
    overflow-y: auto;
}
@media (min-width: 601px) and (max-width: 1279px) {
    .tutorials-mobile {
        width: 100%;
        max-width: 60rem;
    }
}
.tutorials-mobile__select {
    height: 4rem;
    margin-bottom: 1.5rem;
    display: flex;
    align-items: center;
    justify-content: center;
}
@media (max-width: 1279px) {
    .tutorials-mobile__select .dc-select-native {
        position: relative;
        margin-inline-end: 17px;
        transition: all 0.3s;
    }
    .tutorials-mobile__select--show-search .dc-select-native {
        width: 0;
        margin: 0;
        visibility: hidden;
    }
    .tutorials-mobile__select--show-search .dc-tabs__wrapper__group__search-input {
        width: 100%;
    }
    .tutorials-mobile__select--show-search .arrow-left-bold {
        display: block;
    }
    .tutorials-mobile__select--show-search .close-icon {
        display: block;
        cursor: pointer;
        position: absolute;
        inset-inline-end: 2.5rem;
        z-index: 1;
    }
    .tutorials-mobile__select--show-search .dc-select-native__display,
    .tutorials-mobile__select--show-search .dc-select-native__picker,
    .tutorials-mobile__select--show-search .search-icon {
        display: none;
    }
    .tutorials-mobile__select--hide-search .dc-tabs__wrapper__group__search-input {
        width: 0;
        display: none;
    }
    .tutorials-mobile__select--hide-search .arrow-left-bold,
    .tutorials-mobile__select--hide-search .close-icon {
        display: none;
    }
    .tutorials-mobile__select--hide-search .search-icon {
        display: block;
    }
}
@media (max-width: 1279px) {
    .tutorials-mobile__guide,
    .tutorials-mobile__faq,
    .tutorials-mobile__qs-guide,
    .tutorials-mobile__search {
        height: calc(var(--vh) - 280px);
        overflow: auto;
    }
    .tutorials-mobile__guide .tutorials-wrap,
    .tutorials-mobile__faq .tutorials-wrap,
    .tutorials-mobile__qs-guide .tutorials-wrap,
    .tutorials-mobile__search .tutorials-wrap {
        margin-bottom: 2rem;
    }
}
@media (max-width: 1279px) {
    .tutorials-mobile__search .tutorials-wrap,
    .tutorials-mobile__search .faq__wrapper {
        overflow: unset;
    }
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
/*
 * Check if the page is in RTL mode
 * Usage example:
   @include is-RTL { left: 0 };
 */
.run-panel .dc-tabs__active-line {
    right: auto;
}

.main {
    display: flex;
    overflow: hidden;
    width: 100%;
    height: calc(100vh - 9rem);
    padding: 1.6rem;
}
@media (max-width: 1279px) {
    .main {
        height: calc(100vh - 6rem);
        padding: 0;
    }
}
.main__container {
    position: relative;
    border: none;
    max-width: 100%;
    width: 100%;
}
.main__container--active:before {
    content: '';
    position: fixed;
    left: 0;
    top: 0px;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.72);
    opacity: 0.7;
    z-index: 100;
}
.main__container .dc-tabs__active-line {
    background-color: var(--general-main-1);
    transition: none;
}
.main__container .dc-tabs__active {
    background: var(--general-main-1);
}
.main__container .dc-tabs__list {
    background: var(--general-section-1);
    justify-content: start;
}
@media (max-width: 1279px) {
    .main__container .dc-tabs__list {
        overflow-x: auto;
        overflow-y: hidden;
        -ms-overflow-style: none;
        scrollbar-width: none;
    }
    .main__container .dc-tabs__list::-webkit-scrollbar {
        display: none;
    }
}
@media (max-width: 1279px) {
    .main__container .dc-tabs__list--header--main__tabs {
        width: 100%;
        overflow-x: auto;
        padding: 0.8rem 1.6rem 0;
    }
}
@media (max-width: 1279px) {
    .main__container .dc-tabs__list--border-bottom {
        border-bottom: 0;
    }
}
@media (max-width: 1279px) {
    .main__container .dc-tabs__content {
        width: 100%;
        overflow-x: auto;
    }
    .main__container .dc-tabs__content--no-result {
        display: flex;
        align-items: center;
        justify-content: center;
        flex-direction: column;
        justify-content: flex-start;
        height: 100vh;
        margin-top: 5rem;
    }
    .main__container .dc-tabs__content--no-result svg {
        margin-bottom: 2.4rem;
    }
    .main__container .dc-tabs__content--no-result h1 {
        margin-bottom: 0.8rem;
    }
    .main__container .dc-tabs__content--no-result span {
        word-break: break-word;
        text-align: center;
    }
}
.main__container .dc-tabs__content--main__tabs {
    display: flex;
    justify-content: space-between;
}
@media (max-width: 1279px) {
    .main__container .dc-tabs__content--main__tabs {
        flex-direction: column;
        background-color: var(--general-section-1);
    }
}
.main__container .dc-tabs__item {
    border-top-left-radius: 1rem;
    border-top-right-radius: 1rem;
    height: 4.8rem;
    padding: 0 2.4rem;
    width: auto;
    display: flex;
    align-items: center;
    justify-content: center;
}
.main__container .dc-tabs__item svg {
    width: 1.6rem;
    height: 1.6rem;
    padding-inline-end: 0;
    margin-inline-end: 0.8rem;
}
@media (max-width: 1279px) {
    .main__container .dc-tabs__item svg {
        margin-inline-end: 0.2rem;
        margin-top: -0.5rem;
    }
}
@media (max-width: 1279px) {
    .main__container .dc-tabs__item__icon {
        padding-top: 0.5rem;
    }
}
.main__run-strategy-wrapper {
    inset-inline-end: 1.6rem;
    top: 1.6rem;
    z-index: 2;
}
@media (min-width: 1280px) {
    .main__run-strategy-wrapper {
        position: absolute;
    }
}
.main__run-strategy-wrapper .animation__button#db-animation__run-button {
    background-color: var(--purchase-main-1);
}
.main__run-strategy-wrapper .animation__button#db-animation__stop-button {
    background-color: var(--button-primary-hover);
}
.main__run-strategy-wrapper .animation__container {
    background-color: var(--general-main-1);
}
.main__sidebar-wrapper--active {
    position: fixed;
    right: 0;
}
.main__sidebar-wrapper--hidden {
    display: none;
}

.animation__wrapper .animation__button#db-animation__run-button {
    background-color: var(--purchase-main-1);
}
.animation__wrapper .animation__button#db-animation__stop-button {
    background-color: var(--button-primary-hover);
}

@media (max-width: 1279px) {
    .bot-stopped-dialog {
        padding: 2rem;
    }
}
.bot-stopped-dialog .dc-dialog {
    position: relative;
}
.bot-stopped-dialog .dc-dialog__header-wrapper {
    margin: 0 0 2.4rem;
}
.bot-stopped-dialog .dc-dialog__content__header {
    display: flex;
    justify-content: space-between;
    margin: 0 0 2.4rem;
}
.bot-stopped-dialog .dc-dialog__content__header .dc-icon {
    cursor: pointer;
}
@media (max-width: 1279px) {
    .bot-stopped-dialog .dc-dialog__footer {
        flex-wrap: unset;
    }
    .bot-stopped-dialog .dc-dialog__footer .dc-dialog__button {
        padding: 0;
        width: 40%;
        min-width: unset;
        flex-basis: unset;
    }
    .bot-stopped-dialog .dc-dialog__footer .dc-dialog__button:first-child {
        margin-right: 1rem;
    }
}

.dashboard__chart-wrapper {
    position: relative;
    height: var(--tab-content-height);
    width: 100%;
    transition: all 0.4s;
}
@media (max-width: 1279px) {
    .dashboard__chart-wrapper {
        height: var(--tab-content-height-mobile);
        background: var(--general-main-1);
    }
    .dashboard__chart-wrapper .smartcharts {
        height: calc(100% - 4rem);
        z-index: 1;
    }
    .dashboard__chart-wrapper .smartcharts:has(.stxMenuActive) {
        z-index: 99;
        transition: all 1s ease-out;
    }
}
.dashboard__chart-wrapper--expanded {
    width: calc(100vw - 39.8rem);
}
.dashboard__chart-wrapper--modal {
    width: 40rem;
}
.dashboard__toolbox {
    position: absolute;
    top: 0;
    inset-inline-start: 0;
    width: 23.6rem;
    padding: 0.8rem;
    background: var(--general-main-1);
    z-index: 1;
}
.dashboard__toolbox .db-toolbox__title {
    height: 2.6rem;
    line-height: 2.6rem;
    position: relative;
    cursor: pointer;
}
.dashboard__toolbox .db-toolbox__title__chevron {
    position: absolute;
    inset-inline-end: 0;
    top: 0.3rem;
    transition: transform 0.3s ease;
}
.dashboard__toolbox .db-toolbox__title__chevron--active {
    transform: rotate(180deg);
    top: -0.2rem;
}
.dashboard__toolbox .db-toolbox__content {
    border: solid 1px var(--general-section-1);
}
.dashboard__toolbox .db-toolbox__category-menu {
    height: calc(100vh - 33.6rem);
    overflow-y: scroll;
}
.dashboard__toolbox .db-toolbox__search {
    padding: 1.3rem 0.8rem;
    height: 6rem;
}
.dashboard__toolbox .db-toolbox__content-wrapper {
    height: 0;
}
.dashboard__toolbox .db-toolbox__content-wrapper.active {
    height: 100%;
}
.dashboard__run-strategy-wrapper {
    inset-inline-end: 1.6rem;
    top: 1.6rem;
    z-index: 2;
}
@media (min-width: 1280px) {
    .dashboard__run-strategy-wrapper {
        position: absolute;
    }
}
.dashboard__run-strategy-wrapper .animation__button {
    background-color: var(--purchase-main-1);
}
.dashboard__run-strategy-wrapper .animation__container {
    background-color: var(--general-main-1);
}
.dashboard__sidebar-wrapper--active {
    position: fixed;
    inset-inline-end: 0;
}
.dashboard__sidebar-wrapper--hidden {
    display: none;
}

.bot-builder {
    position: absolute;
    top: 6.6rem;
    inset-inline-start: 1.6rem;
    z-index: -1;
    background: var(--general-main-1);
    height: var(--tab-content-height);
}
.bot-builder .injectionDiv .blocklyTrash {
    transition: all 0.4s;
}
@media (max-width: 1279px) {
    .bot-builder .injectionDiv .blocklyTrash {
        display: none;
    }
}
.bot-builder--tour-active .blocklyTrash {
    display: none;
}
.bot-builder--active {
    z-index: 1;
}
.bot-builder--inactive {
    display: none;
}
@media (max-width: 1279px) {
    .bot-builder {
        top: 5.6rem;
        inset-inline-start: 0;
        width: 100vw;
        height: var(--tab-content-height-mobile);
    }
}

#react-joyride-step-6 .onboard__label {
    margin-bottom: 1.6rem;
}

#react-joyride-step-4 .__floater__arrow span {
    inset-inline-end: 0;
}

.onboard__header {
    display: flex;
    justify-content: space-between;
    margin-bottom: 2.4rem;
    margin-top: -2rem;
}
.onboard__header--close {
    cursor: pointer;
}
@media (max-height: 730px) {
    .onboard__steps {
        max-height: 40vh;
        overflow-y: auto;
    }
}
.onboard__label {
    text-align: left;
    margin-bottom: 2.4rem;
}
.onboard__container {
    width: 100%;
    height: 100%;
    display: flex;
    justify-content: center;
    margin-bottom: 2.4rem;
}
.onboard__container img {
    width: 97%;
}
.onboard__container .initial-loader {
    width: 33rem;
    height: 18rem;
}
.onboard__content {
    text-align: left;
}
[dir='rtl'] .onboard__content {
    text-align: right;
}
.onboard__content p {
    font-size: 1.4rem;
}
.onboard__content__block:first-child {
    margin-bottom: 2.4rem;
}

.joyride-content {
    font-size: 1.4rem;
}
@media (max-height: 790px) {
    .joyride-content {
        max-height: 46vh;
        overflow-y: auto;
    }
}
.joyride-content__left {
    text-align: start;
}
.joyride-content__left__step-three {
    margin-bottom: 0.8rem;
}
.joyride-content__sub-title {
    margin-top: 1rem;
}
.joyride-content ul {
    list-style: disc;
    margin-left: 4rem;
    margin-top: 1rem;
}
.joyride-content ul li {
    margin-bottom: 1rem;
}
.joyride-content video {
    width: 100%;
    margin-top: 1rem;
}
.joyride-content__with-icon {
    display: flex;
    margin-bottom: 1rem;
}
.joyride-content__with-icon__right {
    margin-left: 0.8rem;
}
.joyride-content__with-icon__left {
    margin: 0.3rem 0 0 1.2rem;
}
@media (max-width: 1279px) {
    .joyride-content__with-icon__left {
        margin: 0;
    }
    .joyride-content__with-icon__left svg {
        margin: 0;
    }
}

.dbot-slider {
    display: flex;
    align-items: center;
    justify-content: flex-start;
    flex-direction: column;
    position: fixed;
    left: 0;
    bottom: 0;
    width: 100%;
    height: 100vh;
    padding: 1.6rem;
    border-top: solid 1px var(--border-normal);
    z-index: 1000;
    background-color: var(--general-main-1);
}
.dbot-slider--tour-position {
    top: 0;
}
.dbot-slider--tour-position .progress-bar-circle:first-child {
    display: none;
}
.dbot-slider--active {
    height: auto;
    min-height: 17rem;
}
.dbot-slider__navbar {
    display: flex;
    justify-content: space-between;
    padding: 0 1.6rem;
    width: 100%;
    margin-bottom: 1.8rem;
}
.dbot-slider__title {
    margin-bottom: 0.8rem;
}
.dbot-slider__label {
    margin-bottom: 0.8rem;
}
.dbot-slider__content {
    text-align: center;
    padding: 0 1.6rem;
    margin-bottom: 1.6rem;
}
.dbot-slider__content:last-child {
    margin-bottom: 3rem;
}
.dbot-slider__image,
.dbot-slider__media {
    background: var(--general-section-1);
    text-align: center;
    width: 100%;
    height: 55%;
    margin-bottom: 1.6rem;
}
.dbot-slider img {
    height: 100%;
}
.dbot-slider video {
    height: 100%;
    width: 65%;
}
.dbot-slider__progress-bar {
    margin-bottom: 1.6rem;
}
.dbot-slider__status {
    width: 100%;
    position: fixed;
    bottom: 1.6rem;
}
.dbot-slider__button-group {
    display: flex;
    padding: 0 1.6rem;
}
.dbot-slider__button-group button {
    height: 4rem;
    width: 100%;
    border: 0.2rem solid #999999;
    background: #ffffff;
    border-radius: 0.4rem;
    outline: none;
    cursor: pointer;
    margin-inline-end: 0.8rem;
    display: flex;
    align-items: center;
    justify-content: center;
}
.dbot-slider__button-group button.default {
    background: transparent;
}
.dbot-slider__button-group button.danger {
    background: #ff444f;
    border: none;
    margin-right: 0;
}
.dbot-slider__button-group button.danger span {
    color: #ffffff;
}
.dbot-slider__bot-builder-tour {
    height: 16rem;
    background: var(--general-section-1);
}
.dbot-slider__bot-builder-tour .dbot-slider {
    width: 100%;
}
.dbot-slider__bot-builder-tour .dbot-slider__status {
    display: flex;
    align-items: center;
    justify-content: flex-start;
}
.dbot-slider__bot-builder-tour .dbot-slider__progress-bar {
    width: 50%;
    margin-bottom: unset;
    display: flex;
    align-items: center;
    justify-content: flex-start;
    margin-inline-start: 1rem;
}
.dbot-slider__bot-builder-tour .dbot-slider__progress-bar .progress-bar-circle {
    opacity: 0.16;
}
.dbot-slider__bot-builder-tour .dbot-slider__button-group {
    width: 50%;
    display: flex;
    justify-content: center;
}
.dbot-slider__bot-builder-tour .dbot-slider__button-group .default {
    background: transparent;
}
.dbot-slider__bot-builder-tour .dbot-slider__button-group .default span {
    color: var(--text-prominent);
}

@keyframes blink {
    0%,
    100% {
        border: 1px solid #ff444f;
    }
    50% {
        border: 1px solid transparent;
    }
}
.dbot-tour-blink {
    -webkit-animation: blink 1.25s infinite;
    -moz-animation: blink 1.25s ease-in infinite;
    animation: blink 1.25s ease-in infinite;
    border-radius: 50px;
    height: 2.5rem !important;
    width: 2.5rem !important;
    padding: 0.2rem 0;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.bot {
    --bot-content-height: calc(100vh - 140px);
    --bot-content-width: calc(100vw - 366px);
    --drawer-content-height: calc(100vh - 394px);
    --drawer-content-height-no-stat: calc(100vh - 233px);
    --drawer-scroll-height: calc(100vh - 365px);
    --drawer-content-height-mobile: calc(100% - 233px);
    --tab-content-height: calc(100vh - 16.6rem);
    --tab-content-height-mobile: calc(100vh - 12.6rem);
    --zindex-drawer: 5;
    --zindex-modal: 6;
    --zindex-draggable-modal: 7;
    --zindex-snackbar: 8;
}
.bot-dashboard {
    background: var(--general-section-1);
}

@media (min-width: 601px) and (max-width: 1279px) {
    .dc-modal__container_accounts-switcher {
        width: unset !important;
        right: 0;
    }
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.Toastify__toast {
    background: var(--icon-black-plus);
    color: var(--general-main-1);
    min-height: 4.8rem;
    height: 4.8rem;
    width: fit-content;
    text-align: start;
    padding: 0.8rem;
    padding-inline-start: 1.6rem;
    border-radius: 0.8rem;
    font-size: 1.4rem;
    font-family: inherit;
}
@media (max-width: 1279px) {
    .Toastify__toast {
        height: 4.4rem;
        min-height: 4.4rem;
        font-size: 1.2rem;
        line-height: 1.5rem;
        margin-bottom: 0.5rem;
        padding: 0.8rem, 1rem;
    }
}
.Toastify__toast-container {
    padding: 0;
    width: auto;
    inset-inline-start: 3.5rem;
    bottom: 6rem;
}
@media (max-width: 1279px) {
    .Toastify__toast-container {
        inset-inline-start: 0;
        bottom: 9rem;
        padding: 0.8rem;
    }
}
.Toastify__toast-body {
    padding: 0;
    height: 100%;
}
.Toastify__close-button {
    padding: 0.5rem 0;
    margin-inline-start: 1.2rem;
    opacity: 0.8;
}
@media (max-width: 1279px) {
    .Toastify__close-button {
        margin-inline-start: 1.2rem;
    }
}
.Toastify__close-button svg {
    fill: var(--general-main-1);
    height: 2.2rem;
    width: 16px;
}
@media (max-width: 1279px) {
    .Toastify__close-button svg {
        height: 1.6rem;
    }
}

.notification-content {
    display: flex;
    align-items: center;
}
.notification-content button {
    background: var(--icon-black-plus);
    color: var(--general-main-1);
    font-size: 1.4rem;
    font-weight: bold;
    margin-inline-start: 2rem;
    margin-bottom: 0.2rem;
    border: 0;
    padding: 0;
    text-decoration: underline;
    cursor: pointer;
    word-break: keep-all;
}
@media (max-width: 1279px) {
    .notification-content button {
        font-size: 1.2rem;
        margin-inline-start: 1.2rem;
    }
}
